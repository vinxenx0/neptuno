Perfecto, te explico paso a paso cómo hacerlo:  
Quieres integrar **GA4 (Google Analytics 4)**, **Google Consent Mode V2**, **Google Tag Manager (GTM)** y que todo esté operativo en un **frontend en Next.js**. Vamos a desglosarlo:

---

## 1. Crear cuentas necesarias
Primero asegúrate de que tengas:
- Una propiedad de **Google Analytics 4** creada.
- Un contenedor de **Google Tag Manager** creado.
- **Consent Mode V2** está configurado en tu Tag Manager (o lo vas a configurar en breve).

---

## 2. Instalación básica en Next.js
Tienes varias formas, pero la más ordenada es usando el Head (`next/head`) y cargando GTM manualmente, o usando algún paquete npm si prefieres.

Primero, **instalación manual** (recomendado para control máximo):

### a) Instalar Google Tag Manager (GTM)
Crea un archivo de utilidad, por ejemplo:  
**`lib/gtm.js`**
```javascript
export const GTM_ID = process.env.NEXT_PUBLIC_GTM_ID;

export const pageview = (url) => {
  window.dataLayer.push({
    event: 'pageview',
    page: url,
  });
};
```

En tu `_app.js` o `_app.tsx`, añade GTM en el `Head` y un pequeño `noscript`.

```javascript
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import Script from 'next/script';
import { GTM_ID, pageview } from '../lib/gtm';

export default function MyApp({ Component, pageProps }) {
  const router = useRouter();

  useEffect(() => {
    const handleRouteChange = (url) => {
      pageview(url);
    };
    router.events.on('routeChangeComplete', handleRouteChange);
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [router.events]);

  return (
    <>
      {/* Insert GTM Script */}
      <Script
        id="gtm-script"
        strategy="afterInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
              new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
              j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
              'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','${GTM_ID}');
          `,
        }}
      />

      <Component {...pageProps} />

      {/* Insert noscript for GTM */}
      <noscript>
        <iframe
          src={`https://www.googletagmanager.com/ns.html?id=${GTM_ID}`}
          height="0"
          width="0"
          style={{ display: 'none', visibility: 'hidden' }}
        ></iframe>
      </noscript>
    </>
  );
}
```

Asegúrate de tener en tu `.env.local`:
```bash
NEXT_PUBLIC_GTM_ID=GTM-XXXXXXX
```

---

### b) Configurar el Consent Mode V2

Consent Mode V2 requiere que mandes señales de consentimiento a Google *antes* de cargar cualquier tag.

Debes añadir el siguiente `Script` **antes** de cargar GTM en el HTML.  
Actualiza tu `<Script>` así:

```javascript
<Script
  id="consent-init"
  strategy="beforeInteractive"
  dangerouslySetInnerHTML={{
    __html: `
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('consent', 'default', {
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'functionality_storage': 'denied',
        'personalization_storage': 'denied',
        'security_storage': 'granted'
      });
    `,
  }}
/>
```
Este bloque garantiza que **antes** de GTM, ya exista la configuración básica de Consent Mode.

Luego cuando el usuario acepte/rechace cookies (en tu propio banner de cookies), deberías actualizar dinámicamente el consentimiento:

```javascript
gtag('consent', 'update', {
  'ad_storage': 'granted',
  'analytics_storage': 'granted',
  'functionality_storage': 'granted',
  'personalization_storage': 'granted',
});
```

Idealmente integras esta actualización con tu gestor de cookies o consentimiento (tipo Cookiebot, OneTrust o uno propio).

---

### c) Dentro de GTM
Ya en el contenedor de GTM:
- Usa **Google Analytics: GA4 Configuration** como una Tag.
- Marca "Consents" en la configuración avanzada de la tag para que respete Consent Mode V2.
- Usa triggers de tipo "All Pages".

**IMPORTANTE:** En la etiqueta de GA4, activa la opción de esperar al consentimiento (`wait_for_update`) si tu gestor de consentimiento necesita tiempo para recibir la aceptación.

---

## 3. Verificar
- Abre devtools en Chrome (`F12`) -> pestaña "Network".
- Busca si el request a `https://www.googletagmanager.com/gtm.js` y a `https://www.google-analytics.com/g/collect` se lanza **solo después** del consentimiento, si configuraste correctamente.
- En consola (`console`), puedes inspeccionar `dataLayer` para ver qué eventos se están empujando.

---

## Opcional
- Si quieres un paquete npm que te facilite todo esto:  
  - [`next-gtm`](https://www.npmjs.com/package/next-gtm)  
  - [`next/script`](https://nextjs.org/docs/api-reference/next/script) lo puedes usar también, como hicimos arriba.

Pero en proyectos donde Consent Mode V2 es obligatorio, **controlarlo manualmente** es preferible.

---

¿Quieres que también te pase un ejemplo completo de cómo sería el **gestor de consentimiento** en Next.js que actualiza Consent Mode automáticamente? (tipo un mini-banner de cookies que cambia `gtag` en tiempo real).  
Te lo puedo montar rápido si quieres. ¿Te interesa?

¡Perfecto! Vamos a armar un **ejemplo completo** de cómo integrar:

- **Google Tag Manager** (GTM)
- **Google Analytics 4** (GA4)
- **Consent Mode V2** con un **banner de cookies personalizado**  
- En un **proyecto de Next.js** moderno (`pages` o `app` router, te voy a usar `pages` para hacerlo más general).

---

## Estructura del proyecto

- `/lib/gtm.js`
- `/components/CookieConsentBanner.js`
- Modificaciones en `/pages/_app.js`
- Variables en `.env.local`

---

## 1. `/lib/gtm.js`

Primero el archivo para inicializar GTM:

```javascript
// lib/gtm.js
export const GTM_ID = process.env.NEXT_PUBLIC_GTM_ID;

// Track pageviews
export const pageview = (url) => {
  window.dataLayer.push({
    event: 'pageview',
    page: url,
  });
};

// Consent update
export const consentUpdate = (granted = false) => {
  window.gtag('consent', 'update', {
    ad_storage: granted ? 'granted' : 'denied',
    analytics_storage: granted ? 'granted' : 'denied',
    functionality_storage: granted ? 'granted' : 'denied',
    personalization_storage: granted ? 'granted' : 'denied',
    security_storage: 'granted'
  });
};
```

---

## 2. `/components/CookieConsentBanner.js`

Ahora un banner sencillo de cookies que actualiza el consentimiento.

```javascript
// components/CookieConsentBanner.js
import { useState, useEffect } from 'react';
import { consentUpdate } from '../lib/gtm';

export default function CookieConsentBanner() {
  const [showBanner, setShowBanner] = useState(false);

  useEffect(() => {
    const consent = localStorage.getItem('cookie_consent');
    if (!consent) {
      setShowBanner(true);
    }
  }, []);

  const acceptCookies = () => {
    consentUpdate(true);
    localStorage.setItem('cookie_consent', 'true');
    setShowBanner(false);
  };

  const rejectCookies = () => {
    consentUpdate(false);
    localStorage.setItem('cookie_consent', 'false');
    setShowBanner(false);
  };

  if (!showBanner) return null;

  return (
    <div style={styles.banner}>
      <p>Utilizamos cookies para mejorar tu experiencia. ¿Aceptas?</p>
      <button onClick={acceptCookies} style={styles.buttonAccept}>Aceptar</button>
      <button onClick={rejectCookies} style={styles.buttonReject}>Rechazar</button>
    </div>
  );
}

const styles = {
  banner: {
    position: 'fixed',
    bottom: 0,
    width: '100%',
    background: '#fff',
    padding: '10px',
    display: 'flex',
    justifyContent: 'space-around',
    alignItems: 'center',
    boxShadow: '0px -2px 10px rgba(0,0,0,0.1)',
    zIndex: 9999,
  },
  buttonAccept: {
    padding: '8px 12px',
    background: 'green',
    color: '#fff',
    border: 'none',
    borderRadius: '5px',
  },
  buttonReject: {
    padding: '8px 12px',
    background: 'red',
    color: '#fff',
    border: 'none',
    borderRadius: '5px',
  }
};
```

---

## 3. Modificar `/pages/_app.js`

Aquí conectamos todo:

```javascript
// pages/_app.js
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import Script from 'next/script';
import { GTM_ID, pageview } from '../lib/gtm';
import CookieConsentBanner from '../components/CookieConsentBanner';

function MyApp({ Component, pageProps }) {
  const router = useRouter();

  useEffect(() => {
    const handleRouteChange = (url) => {
      pageview(url);
    };
    router.events.on('routeChangeComplete', handleRouteChange);
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [router.events]);

  return (
    <>
      {/* Consent Mode Setup */}
      <Script
        id="gtag-consent-init"
        strategy="beforeInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('consent', 'default', {
              ad_storage: 'denied',
              analytics_storage: 'denied',
              functionality_storage: 'denied',
              personalization_storage: 'denied',
              security_storage: 'granted'
            });
          `,
        }}
      />

      {/* Google Tag Manager */}
      <Script
        id="gtm-init"
        strategy="afterInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
              new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
              j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
              'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','${GTM_ID}');
          `,
        }}
      />

      {/* Page Component */}
      <Component {...pageProps} />

      {/* Cookie Banner */}
      <CookieConsentBanner />

      {/* NoScript fallback for GTM */}
      <noscript>
        <iframe
          src={`https://www.googletagmanager.com/ns.html?id=${GTM_ID}`}
          height="0"
          width="0"
          style={{ display: 'none', visibility: 'hidden' }}
        ></iframe>
      </noscript>
    </>
  );
}

export default MyApp;
```

---

## 4. Archivo `.env.local`
Debes tener tu ID de GTM aquí:

```bash
NEXT_PUBLIC_GTM_ID=GTM-XXXXXXX
```

---

## ¿Cómo funciona?

- Al cargar la página:
  - Inicializa Consent Mode V2 en modo "denied" por defecto.
  - Inyecta GTM solo después del `Consent Mode`.
  - Muestra un banner de cookies.
- Si el usuario acepta/rechaza:
  - Se actualiza dinámicamente el consentimiento (`gtag('consent', 'update')`).
  - Se guarda la preferencia en `localStorage` para mantener el estado entre páginas y sesiones.

---

## Extra (mejoras posibles)

- Hacer el banner más bonito con TailwindCSS o ChakraUI.
- Añadir "Revisar Consentimiento" (un botón para cambiarlo después).
- Soportar múltiples idiomas (i18n).

---

¿Te gustaría que también te prepare una **versión PRO** donde los scripts solo se carguen si el usuario ACEPTA las cookies? (es decir, no cargar GTM/GA4 hasta que haya consentimiento). Eso se puede hacer también con Next.js dinámicamente. ¿Quieres?  
Te lo puedo hacer de inmediato.

¡Perfecto!  
Ahora te voy a preparar una **versión PRO**, donde:

> **NO cargamos Google Tag Manager** ni **Google Analytics** **hasta que el usuario acepte** las cookies.

Es más GDPR-compliant y evita hacer *pre-carga* de scripts de tracking si el usuario no lo ha permitido.

---

## ¿Cómo lo haremos?

- Primero mostramos el **banner de cookies**.
- Solo cuando el usuario **acepta**, **inyectamos dinámicamente** el script de GTM (y así GA4 dentro de GTM también).
- Todo **client-side** (Next.js `useEffect`).

---

## Código completo

Te reestructuro ligeramente el flujo:

---

### `/lib/gtm.js`

Actualizamos para que también podamos inyectar GTM manualmente:

```javascript
// lib/gtm.js
export const GTM_ID = process.env.NEXT_PUBLIC_GTM_ID;

// Track pageviews
export const pageview = (url) => {
  window.dataLayer.push({
    event: 'pageview',
    page: url,
  });
};

// Consent update
export const consentUpdate = (granted = false) => {
  window.gtag('consent', 'update', {
    ad_storage: granted ? 'granted' : 'denied',
    analytics_storage: granted ? 'granted' : 'denied',
    functionality_storage: granted ? 'granted' : 'denied',
    personalization_storage: granted ? 'granted' : 'denied',
    security_storage: 'granted'
  });
};

// Insert GTM script dynamically
export const injectGTM = () => {
  if (document.getElementById('gtm-script')) return; // prevent duplicate
  
  const script = document.createElement('script');
  script.id = 'gtm-script';
  script.async = true;
  script.src = `https://www.googletagmanager.com/gtm.js?id=${GTM_ID}`;
  document.head.appendChild(script);

  const iframe = document.createElement('iframe');
  iframe.src = `https://www.googletagmanager.com/ns.html?id=${GTM_ID}`;
  iframe.height = 0;
  iframe.width = 0;
  iframe.style.display = 'none';
  iframe.style.visibility = 'hidden';
  document.body.appendChild(iframe);
};
```

---

### `/components/CookieConsentBanner.js`

Ahora llamamos a `injectGTM()` cuando acepten cookies:

```javascript
// components/CookieConsentBanner.js
import { useState, useEffect } from 'react';
import { consentUpdate, injectGTM } from '../lib/gtm';

export default function CookieConsentBanner() {
  const [showBanner, setShowBanner] = useState(false);

  useEffect(() => {
    const consent = localStorage.getItem('cookie_consent');
    if (!consent) {
      setShowBanner(true);
    } else if (consent === 'true') {
      injectGTM(); // cargar si ya aceptó antes
    }
  }, []);

  const acceptCookies = () => {
    consentUpdate(true);
    localStorage.setItem('cookie_consent', 'true');
    injectGTM();
    setShowBanner(false);
  };

  const rejectCookies = () => {
    consentUpdate(false);
    localStorage.setItem('cookie_consent', 'false');
    setShowBanner(false);
  };

  if (!showBanner) return null;

  return (
    <div style={styles.banner}>
      <p>Utilizamos cookies para mejorar tu experiencia. ¿Aceptas?</p>
      <button onClick={acceptCookies} style={styles.buttonAccept}>Aceptar</button>
      <button onClick={rejectCookies} style={styles.buttonReject}>Rechazar</button>
    </div>
  );
}

const styles = {
  banner: {
    position: 'fixed',
    bottom: 0,
    width: '100%',
    background: '#fff',
    padding: '10px',
    display: 'flex',
    justifyContent: 'space-around',
    alignItems: 'center',
    boxShadow: '0px -2px 10px rgba(0,0,0,0.1)',
    zIndex: 9999,
  },
  buttonAccept: {
    padding: '8px 12px',
    background: 'green',
    color: '#fff',
    border: 'none',
    borderRadius: '5px',
  },
  buttonReject: {
    padding: '8px 12px',
    background: 'red',
    color: '#fff',
    border: 'none',
    borderRadius: '5px',
  }
};
```

---

### `/pages/_app.js`

Ahora mucho más limpio:

```javascript
// pages/_app.js
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { pageview } from '../lib/gtm';
import CookieConsentBanner from '../components/CookieConsentBanner';
import Script from 'next/script';

function MyApp({ Component, pageProps }) {
  const router = useRouter();

  useEffect(() => {
    const handleRouteChange = (url) => {
      if (window.dataLayer) {
        pageview(url);
      }
    };
    router.events.on('routeChangeComplete', handleRouteChange);
    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [router.events]);

  return (
    <>
      {/* Only Consent Mode V2 Setup */}
      <Script
        id="gtag-consent-init"
        strategy="beforeInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('consent', 'default', {
              ad_storage: 'denied',
              analytics_storage: 'denied',
              functionality_storage: 'denied',
              personalization_storage: 'denied',
              security_storage: 'granted'
            });
          `,
        }}
      />

      {/* Page Component */}
      <Component {...pageProps} />

      {/* Cookie Banner */}
      <CookieConsentBanner />
    </>
  );
}

export default MyApp;
```

---

### `.env.local`
Como antes:

```bash
NEXT_PUBLIC_GTM_ID=GTM-XXXXXXX
```

---

# Resultado
- Al entrar a tu página, **NO se carga** GTM ni GA4 inmediatamente.
- Solo después de aceptar, **se inyecta dinámicamente** el GTM.
- Las páginas se siguen trackeando bien con el cambio de rutas (`pageview()`).
- Consent Mode V2 siempre configurado.

---

# Opcional (mejoras que podrías agregar)
- **Botón de "Modificar Consentimiento"** (por ejemplo en el footer).
- **Expirar consentimiento** (borrar `localStorage` después de 6-12 meses).
- **Interfaz más bonita** (TailwindCSS o MaterialUI).
- **Multiidioma** (`next-i18next` para traducir el banner).

---

# ¿Quieres que también te pase un ejemplo de **cómo sería añadir un botón "Cambiar mis cookies"** que abra el banner nuevamente en cualquier momento? (muchos proyectos de compliance lo piden).  
Te lo puedo dar ahora mismo si quieres. ¿Te interesa?