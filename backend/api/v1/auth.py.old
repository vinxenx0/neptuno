# backend/api/v1/auth.py.OLD
# Módulo old de autenticación de la API v1.
from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.orm import Session
from schemas.auth import ChangePasswordRequest, PasswordResetConfirm, TokenResponse, RefreshTokenRequest, PasswordResetRequest
from schemas.user import RegisterRequest, UpdateProfileRequest, UserResponse
from services.auth_service import (
    change_user_password, login_user, login_with_provider, register_user, get_user_info, update_user, 
    delete_user, request_password_reset, refresh_access_token, logout_user
)
from core.database import get_db
from core.security import get_oauth2_redirect_url, oauth2_scheme, OAuth2PasswordRequestForm
from dependencies.auth import UserContext, get_user_context
from core.logging import configure_logging

router = APIRouter()
logger = configure_logging()

@router.post("/token", response_model=TokenResponse)
def login_for_access_token(
    request: Request,
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):
    try:
        ip = request.client.host
        return login_user(db, form_data.username, form_data.password, ip)
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.critical(f"Error inesperado en login desde IP {request.client.host}: {str(e)}")
        raise HTTPException(status_code=500, detail="Error al procesar el login")

@router.post("/register", response_model=TokenResponse)
def register(data: RegisterRequest, db: Session = Depends(get_db)):
    return register_user(db, data.email, data.username, data.password, data.ciudad, data.website)

@router.get("/me", response_model=UserResponse)
def get_me(user: UserContext = Depends(get_user_context), db: Session = Depends(get_db)):
    if user.user_type != "registered":
        raise HTTPException(status_code=403, detail="Solo usuarios registrados")
    return get_user_info(db, int(user.user_id))

@router.put("/me", response_model=UserResponse)
def update_me(
    request: UpdateProfileRequest,
    user: UserContext = Depends(get_user_context),
    db: Session = Depends(get_db)
):
    if user.user_type != "registered":
        raise HTTPException(status_code=403, detail="Solo usuarios registrados")
    return update_user(
        db,
        int(user.user_id),
        request.email,
        request.username,
        request.ciudad,
        request.website
    )

@router.delete("/me", response_model=dict)
def delete_me(user: UserContext = Depends(get_user_context), db: Session = Depends(get_db)):
    if user.user_type != "registered":
        raise HTTPException(status_code=403, detail="Solo usuarios registrados")
    return delete_user(db, int(user.user_id))

@router.post("/password-reset", response_model=dict)
def reset_password(data: PasswordResetRequest, db: Session = Depends(get_db)):
    return request_password_reset(db, data.email)

@router.post("/password-reset/confirm", response_model=dict)
def confirm_password_reset(data: PasswordResetConfirm, db: Session = Depends(get_db)):
    return confirm_password_reset(db, data.token, data.new_password)

@router.post("/refresh", response_model=TokenResponse)
def refresh_token(data: RefreshTokenRequest, db: Session = Depends(get_db)):
    return refresh_access_token(db, data.refresh_token)

@router.post("/logout", response_model=dict)
def logout(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    return logout_user(db, token)

@router.get("/login/{provider}", response_model=dict)
def get_provider_login_url(provider: str):
    try:
        redirect_url = get_oauth2_redirect_url(provider)
        return {"redirect_url": redirect_url}
    except ValueError:
        raise HTTPException(status_code=400, detail="Proveedor no soportado")

@router.post("/login/{provider}/callback", response_model=TokenResponse)
def provider_callback(provider: str, code: str, request: Request, db: Session = Depends(get_db)):
    ip = request.client.host
    return login_with_provider(db, provider, code, ip)

@router.put("/me/password", response_model=dict)
def change_password(
    data: ChangePasswordRequest,
    user: UserContext = Depends(get_user_context),
    db: Session = Depends(get_db)
):
    if user.user_type != "registered":
        raise HTTPException(status_code=403, detail="Solo usuarios registrados pueden cambiar su contraseña")
    return change_user_password(db, int(user.user_id), data.current_password, data.new_password)