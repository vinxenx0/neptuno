Veamos, algunos cambios:

- Aqui tienes la pagina de ranking para que Adaptes la p√°gina de rankings para mostrar solo puntos, solo insignias, ambos, o un mensaje si ninguno est√° activado.

// frontend/src/app/rankings/page.tsx
// src/app/rankings/page.tsx
"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { GlassCard, GradientText, EmptyState, RankingMedal } from "@/components/ui";
import fetchAPI from "@/lib/api";
import { RankingResponse } from "@/lib/types";

const RankingTable = ({ rankings }: { rankings: RankingResponse[] }) => (
  <div className="space-y-4">
    <AnimatePresence>
      {rankings.map((rank, index) => (
        <motion.div
          key={rank.username}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3, delay: index * 0.05 }}
        >
          <GlassCard className="p-6 hover:transform hover:scale-[1.02] transition-all">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <RankingMedal position={index + 1} />
                <div>
                  <h3 className="text-xl font-semibold text-white">{rank.username}</h3>
                  <p className="text-gray-400 capitalize">{rank.user_type}</p>
                </div>
              </div>
              
              <div className="text-right">
                <div className="flex gap-6">
                  <div>
                    <p className="text-gray-400">Puntos</p>
                    <p className="text-2xl font-bold text-purple-400">{rank.points}</p>
                  </div>
                  <div>
                    <p className="text-gray-400">Insignias</p>
                    <p className="text-2xl font-bold text-pink-400">{rank.badges_count}</p>
                  </div>
                </div>
              </div>
            </div>
          </GlassCard>
        </motion.div>
      ))}
    </AnimatePresence>
  </div>
);

export default function Rankings() {
  const [rankings, setRankings] = useState<RankingResponse[]>([]);
  const [sortBy, setSortBy] = useState<"points" | "badges_count">("points");

  useEffect(() => {
    const fetchRankings = async () => {
      const { data } = await fetchAPI<RankingResponse[]>("/v1/gamification/rankings");
      if (data) setRankings(data);
    };
    fetchRankings();
  }, []);

  const sortedRankings = [...rankings].sort((a, b) =>
    sortBy === "points" ? b.points - a.points : b.badges_count - a.badges_count
  );

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-8">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-12"
        >
          <h1 className="text-4xl font-bold text-white mb-4">
            <GradientText>Clasificaci√≥n Global</GradientText>
          </h1>
          
          <div className="flex gap-4 mb-8">
            <button
              onClick={() => setSortBy("points")}
              className={`px-6 py-2 rounded-full transition-all ${
                sortBy === "points" 
                  ? "bg-purple-500 text-white"
                  : "bg-white/10 hover:bg-white/20 text-gray-300"
              }`}
            >
              Por Puntos
            </button>
            <button
              onClick={() => setSortBy("badges_count")}
              className={`px-6 py-2 rounded-full transition-all ${
                sortBy === "badges_count"
                  ? "bg-pink-500 text-white"
                  : "bg-white/10 hover:bg-white/20 text-gray-300"
              }`}
            >
              Por Insignias
            </button>
          </div>
        </motion.div>

        {sortedRankings.length > 0 ? (
          <RankingTable rankings={sortedRankings.slice(0, 20)} />
        ) : (
          <EmptyState
            icon="üèÜ"
            title="No hay rankings disponibles"
            description="¬°S√© el primero en aparecer aqu√≠!"
          />
        )}
      </div>
    </div>
  );
}

En el punto 4: Proteger las p√°ginas de puntos e insignias

prefiero que me pases el codigo completo de ambos archivos con las correcciones propuestas:

// src/app/user/gamification/badges/page.tsx
"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { GlassCard, GradientText, BadgeIcon, EmptyState } from "@/components/ui";
import fetchAPI from "@/lib/api";
import { UserGamificationResponse, Badge, EventType, BadgeWithEventType } from "@/lib/types";

const BadgeGrid = ({ badges }: { badges: BadgeWithEventType[] }) => (
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 p-6">
    <AnimatePresence>
      {badges.map((badge) => (
        <motion.div
          key={badge.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
        >
          <GlassCard className="h-full p-6 hover:transform hover:scale-105 transition-all">
            <div className="flex items-start gap-4">
              <BadgeIcon type={badge.event_type.name} className="w-16 h-16" />
              <div className="flex-1">
                <GradientText className="text-2xl font-bold mb-2">
                  {badge.name}
                </GradientText>
                <p className="text-gray-300 mb-3">{badge.description}</p>
                <div className="flex items-center justify-between">
                  <span className="bg-white/10 px-3 py-1 rounded-full text-sm">
                    {badge.required_points} pts
                  </span>
                  <span className="text-sm text-purple-400">
                    {badge.event_type.name}
                  </span>
                </div>
              </div>
            </div>
          </GlassCard>
        </motion.div>
      ))}
    </AnimatePresence>
  </div>
);

export default function Badges() {
  const [badges, setBadges] = useState<BadgeWithEventType[]>([]);
  const [groupedBadges, setGroupedBadges] = useState<Record<string, BadgeWithEventType[]>>({});

  useEffect(() => {
    const fetchBadges = async () => {
      const { data } = await fetchAPI<UserGamificationResponse[]>("/v1/gamification/me");
      if (data) {
        const userBadges = data
          .filter(g => g.badge)
          .map(g => ({
            ...g.badge!,
            event_type: g.event_type
          })) as BadgeWithEventType[];
        
        setBadges(userBadges);
        
        const grouped = userBadges.reduce((acc, badge) => {
          const key = badge.event_type.name;
          if (!acc[key]) acc[key] = [];
          acc[key].push(badge);
          return acc;
        }, {} as Record<string, BadgeWithEventType[]>);
        
        setGroupedBadges(grouped);
      }
    };
    fetchBadges();
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-8">
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="max-w-7xl mx-auto"
      >
        <h1 className="text-4xl font-bold text-white mb-8">
          <GradientText>Mis Logros</GradientText>
        </h1>

        {Object.entries(groupedBadges).map(([eventType, badges]) => (
          <section key={eventType} className="mb-12">
            <h2 className="text-2xl font-semibold text-white mb-6 capitalize">
              {eventType.replace(/_/g, ' ')}
            </h2>
            <BadgeGrid badges={badges} />
          </section>
        ))}

        {badges.length === 0 && (
          <EmptyState
            icon="üéñÔ∏è"
            title="A√∫n no tienes insignias"
            description="Completa acciones en la plataforma para desbloquear logros"
          />
        )}
      </motion.div>
    </div>
  );
}

// frontend/src/app/user/points/page.tsx
"use client";

import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { GlassCard, GradientText, TimelineIcon, EmptyState } from "@/components/ui";

const TimelineItem = ({ entry }: { entry: any }) => (
  <motion.div
    initial={{ opacity: 0, x: -20 }}
    animate={{ opacity: 1, x: 0 }}
    className="flex gap-4 relative pl-8 pb-6 border-l-2 border-white/10 last:border-0"
  >
    <div className="absolute left-[-9px] top-0 w-4 h-4 bg-purple-500 rounded-full" />
    <TimelineIcon type={entry.event_type.name} className="flex-shrink-0 mt-1" />
    <div className="flex-1">
      <div className="flex justify-between items-center mb-2">
        <span className="text-lg font-semibold text-white">
          +{entry.points} puntos
        </span>
        <span className="text-sm text-gray-400">
          {new Date(entry.created_at).toLocaleDateString('es-ES', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
          })}
        </span>
      </div>
      <p className="text-gray-300">{entry.event_type.description}</p>
      <span className="inline-block mt-2 px-2 py-1 bg-white/10 rounded-full text-sm">
        {entry.event_type.name}
      </span>
    </div>
  </motion.div>
);

export default function PointsPage() {
  const { user } = useAuth();
  const router = useRouter();
  const [pointsHistory, setPointsHistory] = useState<any[]>([]);

  useEffect(() => {
    if (!user) {
      router.push("/user/auth/#login");
      return;
    }
    
    const fetchPoints = async () => {
      try {
        const { data } = await fetchAPI("/v1/gamification/me");
        setPointsHistory(data || []);
      } catch (err) {
        console.error("Error al obtener historial de puntos:", err);
      }
    };
    fetchPoints();
  }, [user, router]);

  if (!user) return null;

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold text-white mb-8">
          <GradientText>Historial de Puntos</GradientText>
        </h1>

        <GlassCard className="p-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-semibold text-white">Puntos Totales</h2>
              <p className="text-4xl font-bold text-purple-400">
                {pointsHistory.reduce((sum, entry) => sum + entry.points, 0)}
              </p>
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-300">Nivel Actual</p>
              <div className="text-2xl font-bold text-white">Experto</div>
            </div>
          </div>

          <div className="space-y-6">
            <AnimatePresence>
              {pointsHistory.map((entry, index) => (
                <TimelineItem key={index} entry={entry} />
              ))}
            </AnimatePresence>

            {pointsHistory.length === 0 && (
              <EmptyState
                icon="üìä"
                title="A√∫n no tienes puntos"
                description="Realiza actividades en la plataforma para ganar puntos"
              />
            )}
          </div>
        </GlassCard>
      </div>
    </div>
  );
}

Por ultimo me gustaria que le dieses un toque mas de marketing y de pagina de conversion a la pagina de ejemplos, como conoces bien la aplicacion (es backend api saas para gamificaci√≥n, scoring que mejora el engadgement y la conversion) animado a los leads o clientes.

// frontend/src/app/ejemplos/page.tsx
"use client";

import { useState, useEffect } from "react";
import { Box, Typography, Button, TextField, Checkbox, FormControlLabel, Card, CardContent, Snackbar, Alert, Grid } from "@mui/material";
import { motion } from "framer-motion";
import fetchAPI from "@/lib/api";
import { useAuth } from "@/lib/auth/context";
import { UserGamificationResponse, Badge, InfoResponse } from "@/lib/types";

export default function Ejemplos() {
  const { setGamification } = useAuth();
  const [snackMessage, setSnackMessage] = useState<string | null>(null);
  const [registroFields, setRegistroFields] = useState({ name: "", email: "", phone: "" });
  const [newsletterSubs, setNewsletterSubs] = useState({ tech: false, marketing: false, design: false });
  const [encuestaAnswers, setEncuestaAnswers] = useState<number[]>([]);
  const [checkinDone, setCheckinDone] = useState(false);
  const [icpFields, setIcpFields] = useState({ company: "", role: "", industry: "" });
  const [tutorialLessons, setTutorialLessons] = useState([false, false, false]);
  // Nuevos estados para corregir los errores
  const [formFields, setFormFields] = useState({ name: "", email: "", phone: "" });
  const [subscriptions, setSubscriptions] = useState({ list1: false, list2: false, list3: false });
  const [surveyAnswers, setSurveyAnswers] = useState<number[]>([]);

  // Resto del c√≥digo...

  // Actualizar gamificaci√≥n al cargar la p√°gina y despu√©s de cada acci√≥n relevante
  const updateGamification = async () => {
    const { data } = await fetchAPI<InfoResponse>("/info");
    if (data?.gamification) {
      const totalPoints = data.gamification.reduce((sum, g) => sum + g.points, 0);
      const badges = data.gamification.map(g => g.badge).filter(b => b !== null) as Badge[];
      setGamification({ points: totalPoints, badges });
    }
  };
  // Ejecutar updateGamification al montar el componente
  useEffect(() => {
    updateGamification();
  }, []);

  const handleRegistroChange = async (field: keyof typeof registroFields, value: string) => {
    setRegistroFields(prev => ({ ...prev, [field]: value }));
    if (value) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 1 } });
      updateGamification();
      setSnackMessage("¬°Ganaste 1 punto por completar un campo!");
    }
    if (registroFields.name && registroFields.email && registroFields.phone) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 2 } });
      updateGamification();
      setSnackMessage("¬°Completaste el registro y ganaste 10 puntos!");
    }
  };

  const handleNewsletterChange = async (newsletter: keyof typeof newsletterSubs) => {
    setNewsletterSubs(prev => ({ ...prev, [newsletter]: !prev[newsletter] }));
    if (!newsletterSubs[newsletter]) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 3 } });
      updateGamification();
      setSnackMessage("¬°Ganaste 2 puntos por suscribirte a una newsletter!");
    }
    if (newsletterSubs.tech && newsletterSubs.marketing && newsletterSubs.design) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 4 } });
      updateGamification();
      setSnackMessage("¬°Te suscribiste a todas las newsletters y ganaste 15 puntos!");
    }
  };

  const handleEncuestaAnswer = async (answer: number) => {
    setEncuestaAnswers(prev => [...prev, answer]);
    await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 5 } });
    updateGamification();
    setSnackMessage("¬°Ganaste 1 punto por responder una pregunta!");
  };

  const handleEncuestaComplete = async () => {
    if (encuestaAnswers.length === 3) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 6 } });
      updateGamification();
      setSnackMessage("¬°Completaste la encuesta y ganaste 10 puntos!");
    }
  };

  const handleCheckin = async () => {
    setCheckinDone(true);
    await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 7 } });
    updateGamification();
    setSnackMessage("¬°Ganaste 5 puntos por hacer check-in!");
  };

  const handleIcpChange = async (field: keyof typeof icpFields, value: string) => {
    setIcpFields(prev => ({ ...prev, [field]: value }));
    if (value) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 8 } });
      updateGamification();
      setSnackMessage("¬°Ganaste 1 punto por completar un campo del ICP!");
    }
    if (icpFields.company && icpFields.role && icpFields.industry) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 9 } });
      updateGamification();
      setSnackMessage("¬°Completaste tu ICP y ganaste 10 puntos!");
    }
  };


  const handleFormChange = async (field: keyof typeof formFields, value: string) => {
    setFormFields(prev => ({ ...prev, [field]: value }));
    if (value) {
      await fetchAPI("/v1/gamification/events", {
        method: "POST",
        data: { event_type_id: 3 } // registration_field
      });
      updateGamification();
    }
    if (formFields.name && formFields.email && formFields.phone) {
      await fetchAPI("/v1/gamification/events", {
        method: "POST",
        data: { event_type_id: 4 } // registration_completed
      });
      updateGamification();
    }
  };

  const handleSubscriptionChange = async (list: keyof typeof subscriptions) => {
    setSubscriptions(prev => ({ ...prev, [list]: !prev[list] }));
    if (!subscriptions[list]) {
      await fetchAPI("/v1/gamification/events", {
        method: "POST",
        data: { event_type_id: 5 } // subscription_list
      });
      updateGamification();
    }
    if (subscriptions.list1 && subscriptions.list2 && subscriptions.list3) {
      await fetchAPI("/v1/gamification/events", {
        method: "POST",
        data: { event_type_id: 6 } // all_subscriptions
      });
      updateGamification();
    }
  };

  const handleSurveyAnswer = async (answer: number) => {
    setSurveyAnswers(prev => [...prev, answer]);
    await fetchAPI("/v1/gamification/events", {
      method: "POST",
      data: { event_type_id: 1 } // survey_question
    });
    updateGamification();
  };

  const handleSurveyComplete = async () => {
    if (surveyAnswers.length === 3) {
      await fetchAPI("/v1/gamification/events", {
        method: "POST",
        data: { event_type_id: 2 } // survey_completed
      });
      updateGamification();
    }
  };

  const handleLessonComplete = async (index: number) => {
    setTutorialLessons(prev => {
      const newLessons = [...prev];
      newLessons[index] = true;
      return newLessons;
    });
    await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 10 } });
    updateGamification();
    setSnackMessage("¬°Ganaste 3 puntos por completar una lecci√≥n!");
  };

  return (
    <Box sx={{ p: 4, bgcolor: "#f5f7fa", minHeight: "100vh" }}>
      <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
        <Typography variant="h3" align="center" gutterBottom sx={{ fontWeight: "bold", color: "#1976d2" }}>
          Ejemplos de Gamificaci√≥n
        </Typography>
        <Typography variant="subtitle1" align="center" color="textSecondary" sx={{ mb: 4 }}>
          Descubre c√≥mo puedes ganar puntos y badges interactuando con nuestra plataforma.
        </Typography>
      </motion.div>

      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.1 }}>
            <Card sx={{ boxShadow: 3, borderRadius: 2 }}>
              <CardContent>
                <Typography variant="h6" color="primary">Formulario de Registro</Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Reg√≠strate completando tus datos y gana puntos por cada campo. ¬°Completa todo para un bonus!
                </Typography>
                <Box component="form" sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                  <TextField label="Nombre" value={registroFields.name} onChange={(e) => handleRegistroChange("name", e.target.value)} variant="outlined" />
                  <TextField label="Email" value={registroFields.email} onChange={(e) => handleRegistroChange("email", e.target.value)} variant="outlined" />
                  <TextField label="Tel√©fono" value={registroFields.phone} onChange={(e) => handleRegistroChange("phone", e.target.value)} variant="outlined" />
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        </Grid>

        <Grid item xs={12} md={6}>
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.2 }}>
            <Card sx={{ boxShadow: 3, borderRadius: 2 }}>
              <CardContent>
                <Typography variant="h6" color="primary">Suscripci√≥n a Newsletters</Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Suscr√≠bete a nuestras newsletters y gana puntos por cada una. ¬°Todas te dan un badge especial!
                </Typography>
                <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                  <FormControlLabel
                    control={<Checkbox checked={newsletterSubs.tech} onChange={() => handleNewsletterChange("tech")} />}
                    label="Tecnolog√≠a"
                  />
                  <FormControlLabel
                    control={<Checkbox checked={newsletterSubs.marketing} onChange={() => handleNewsletterChange("marketing")} />}
                    label="Marketing"
                  />
                  <FormControlLabel
                    control={<Checkbox checked={newsletterSubs.design} onChange={() => handleNewsletterChange("design")} />}
                    label="Dise√±o"
                  />
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        </Grid>

        <Grid item xs={12} md={6}>
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.3 }}>
            <Card sx={{ boxShadow: 3, borderRadius: 2 }}>
              <CardContent>
                <Typography variant="h6" color="primary">Encuesta de Satisfacci√≥n</Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Responde preguntas y gana puntos por cada una. ¬°Completa la encuesta para m√°s recompensas!
                </Typography>
                <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                  <Button variant="outlined" onClick={() => handleEncuestaAnswer(1)}>Pregunta 1</Button>
                  <Button variant="outlined" onClick={() => handleEncuestaAnswer(2)}>Pregunta 2</Button>
                  <Button variant="outlined" onClick={() => handleEncuestaAnswer(3)}>Pregunta 3</Button>
                  <Button variant="contained" onClick={handleEncuestaComplete} disabled={encuestaAnswers.length !== 3}>Completar</Button>
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        </Grid>

        <Grid item xs={12} md={6}>
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.4 }}>
            <Card sx={{ boxShadow: 3, borderRadius: 2 }}>
              <CardContent>
                <Typography variant="h6" color="primary">Check-in Horario</Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Registra tu entrada o salida y gana puntos por mantener tu horario.
                </Typography>
                <Button variant="contained" onClick={handleCheckin} disabled={checkinDone}>
                  {checkinDone ? "Check-in Realizado" : "Hacer Check-in"}
                </Button>
              </CardContent>
            </Card>
          </motion.div>
        </Grid>

        <Grid item xs={12} md={6}>
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.5 }}>
            <Card sx={{ boxShadow: 3, borderRadius: 2 }}>
              <CardContent>
                <Typography variant="h6" color="primary">Perfil de Cliente Ideal (ICP)</Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Ampl√≠a tus datos personales y gana puntos por cada campo. ¬°Completa todo para un bonus!
                </Typography>
                <Box component="form" sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                  <TextField label="Empresa" value={icpFields.company} onChange={(e) => handleIcpChange("company", e.target.value)} variant="outlined" />
                  <TextField label="Rol" value={icpFields.role} onChange={(e) => handleIcpChange("role", e.target.value)} variant="outlined" />
                  <TextField label="Industria" value={icpFields.industry} onChange={(e) => handleIcpChange("industry", e.target.value)} variant="outlined" />
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        </Grid>

        <Grid item xs={12} md={6}>
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.6 }}>
            <Card sx={{ boxShadow: 3, borderRadius: 2 }}>
              <CardContent>
                <Typography variant="h6" color="primary">Tutorial Interactivo</Typography>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Completa lecciones y gana puntos por cada una que termines.
                </Typography>
                <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                  {tutorialLessons.map((completed, index) => (
                    <Button key={index} variant="outlined" onClick={() => handleLessonComplete(index)} disabled={completed}>
                      {completed ? `Lecci√≥n ${index + 1} Completada` : `Completar Lecci√≥n ${index + 1}`}
                    </Button>
                  ))}
                </Box>
              </CardContent>
            </Card>
          </motion.div>
        </Grid>
      </Grid>

      <Snackbar open={!!snackMessage} autoHideDuration={3000} onClose={() => setSnackMessage(null)}>
        <Alert severity="success" onClose={() => setSnackMessage(null)}>{snackMessage}</Alert>
      </Snackbar>
    </Box>
  );
}

Recuerda que debes respetar la logica actual, sin omitir nada de lo existente a la hora de implantar tu soluci√≥n. Si necesitas m√°s ayuda o necesitas c√≥digo adicional que ver, no dudes en dec√≠rmelo.  implementar las mejoras solicitadas de manera clara y estructuradaSe que es muchiiiisima informaci√≥n, por favor leela toda con detenimiento. Si es mucho separa tu respuesta en partes. Solicitame los archivos que necesites ver. Respeta la logica actual para no romper ningun servicio activo. Es importante esta parte que salga bien, tomate tu tiempo.Pideme los archivos que necesites ver para una mejor implantaci√≥n.Si te parece mejor por motivos de capacidad generame la respuesta en varias partes, lo dejo a tu elecci√≥n.




 