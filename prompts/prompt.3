Excelente! Me encanta tu actitud y como de bien estas entendiendo que es Neptuno

yo tb he tomado nota de todas tus sugerencias, las he ordenado y jerarquizado y puesto en el roadmap.

Tambien voy a resolver las dudas tecnicas que has tenido durante todos tu feedback pero antes dejame
terminar con mi exposición antes de solicitarte tu ayuda:


continuamos con parte 3: frontend

Aqui voy hacer un alto antes de pasarte todos los archivos en uno muy especial
es este:

// src/lib/auth/context.tsx

// frontend/src/lib/auth/context.tsx
// Contexto de autenticación y estado global del usuario

"use client";

import { createContext, useContext, useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { User, TokenResponse, RegisterRequest, UserInfo, Gamification, Badge, Coupon } from "../types";
import { motion } from "framer-motion";
import { GamificationEventCreate, GamificationEventResponse, UserGamificationResponse } from "../types";

interface AuthContextType {
  user: User | null;
  credits: number;
  gamification: Gamification | null; // Añadimos gamificación al contexto
  coupons: Coupon[];
  setCredits: (credits: number) => void; // Añadido
  setCoupons: (coupons: Coupon[]) => void;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  setGamification: (gamification: Gamification) => void; // Añadido
  register: (data: RegisterRequest) => Promise<void>;
  loginWithGoogle: () => void;
  refreshToken: () => Promise<string | null>;
  updateProfile: (data: Partial<User>) => Promise<void>;
  deleteProfile: () => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
}



const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [credits, setCredits] = useState<number>(10); // Valor por defecto para anónimos
  const [gamification, setGamification] = useState<Gamification | null>(null); // Estado para gamificación
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const [coupons, setCoupons] = useState<Coupon[]>([]);


  useEffect(() => {
    const checkAuth = async () => {
      try {
        const { data } = await fetchAPI<any>("/whoami"); // Endpoint para obtener info del usuario
        if (data) {
          if (data.user_type === "registered") {
            setUser({
              id: parseInt(data.user_id!),
              email: data.email!,
              username: data.username!,
              rol: data.rol!,
              activo: true,
              subscription: data.subscription!,
              credits: data.credits,
              create_at: "",
              last_ip: "",
              last_login: "",
              user_type: data.user_type,
            });
            setCredits(data.credits);
          } else if (data.user_type === "anonymous") {
            setUser(null);
            setCredits(data.credits);
            localStorage.setItem("session_id", data.session_id!);
          } else {
            setUser(null);
            setCredits(0);
          }

          // Obtener datos de gamificación
          const gamificationRes = await fetchAPI<any[]>("/v1/gamification/me");
          if (gamificationRes.data) {
            const totalPoints = gamificationRes.data.reduce((sum, g) => sum + g.points, 0);
            const badges = gamificationRes.data.map(g => g.badge).filter(Boolean) as Badge[];
            setGamification({ points: totalPoints, badges });
          } else {
            setGamification({ points: 0, badges: [] });
          }

          // Obtener cupones del usuario
          const couponsRes = await fetchAPI<Coupon[]>("/v1/coupons/me");
          setCoupons(couponsRes.data || []);
        }
      } catch (err) {
        console.error("Error en checkAuth:", err);
        setUser(null);
        setCredits(0);
        setGamification({ points: 0, badges: [] });
        setCoupons([]);
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    const { data, error } = await fetchAPI<TokenResponse>(
      "/v1/auth/token",
      {
        method: "POST",
        data: { username: email, password, grant_type: "password" },
      },
      "application/x-www-form-urlencoded"
    );
    if (error) throw new Error(typeof error === "string" ? error : "Error al iniciar sesión");
    localStorage.setItem("accessToken", data!.access_token);
    localStorage.setItem("refreshToken", data!.refresh_token);
    localStorage.removeItem("session_id");  // Limpiar session_id al iniciar sesión
    const userResponse = await fetchAPI<User>("/v1/users/me");
    if (userResponse.data) {
      setUser(userResponse.data);
      setCredits(userResponse.data.credits);
      router.push("/user/dashboard");
    }
  };

  const logout = async () => {
    try {
      await fetchAPI("/v1/auth/logout", { method: "POST" });
    } catch (err) {
      console.error("Error al cerrar sesión:", err);
    }
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("session_id");  // Limpiar session_id al cerrar sesión
    setUser(null);
    // const anonCredits = localStorage.getItem("anonCredits");
    // setCredits(anonCredits ? parseInt(anonCredits) : 100);
    router.push("/");
  };

  const register = async (data: RegisterRequest) => {
    const { error } = await fetchAPI("/v1/auth/register", {
      method: "POST",
      data,
    });
    if (error) throw new Error(typeof error === "string" ? error : "Error al registrarse");
    await login(data.email, data.password);
  };

  const loginWithGoogle = () => {
    window.location.href = `${process.env.NEXT_PUBLIC_API_URL}/v1/auth/login/google`;
  };

  const refreshToken = async (): Promise<string | null> => {
    const refresh = localStorage.getItem("refreshToken");
    if (!refresh) {
      await logout();
      return null;
    }

    try {
      const { data, error } = await fetchAPI<TokenResponse>("/v1/auth/refresh", {
        method: "POST",
        data: { refresh_token: refresh },
        ...(true && { _retry: true }) // Evitar bucle infinito
      });

      if (error || !data) {
        throw new Error(typeof error === "string" ? error : JSON.stringify(error) || "Refresh failed");
      }

      // Actualizar localStorage ANTES de cualquier otra operación
      localStorage.setItem("accessToken", data.access_token);
      localStorage.setItem("refreshToken", data.refresh_token);

      // Actualizar estado del usuario
      const userResponse = await fetchAPI<User>("/v1/users/me");
      if (userResponse.data) {
        setUser(userResponse.data);
        setCredits(userResponse.data.credits);
      }

      return data.access_token;
    } catch (err) {
      console.error("Refresh error:", err);
      await logout();
      return null;
    }
  };

  const updateProfile = async (data: Partial<User>) => {
    try {
      const response = await fetchAPI<User>("/v1/users/me", {
        method: "PUT",
        data,
      });
      if (response.error) throw new Error(typeof response.error === "string" ? response.error : JSON.stringify(response.error));
      if (response.data) {
        setUser(response.data);
        setCredits(response.data.credits);
      } else {
        throw new Error("No se recibió la información del usuario actualizado");
      }
    } catch (err) {
      console.error("Error al actualizar el perfil:", err);
      throw err;
    }
  };

  const deleteProfile = async () => {
    const { error } = await fetchAPI("/v1/users/me", { method: "DELETE" });
    if (error) throw new Error(typeof error === "string" ? error : "Error al eliminar perfil");
    logout();
  };

  const resetPassword = async (email: string) => {
    const { error } = await fetchAPI("/v1/auth/password-reset", {
      method: "POST",
      data: { email },
    });
    if (error) throw new Error(typeof error === "string" ? error : "Error al restablecer contraseña");
  };

  if (loading) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="fixed inset-0 flex items-center justify-center bg-[var(--background)] z-50"
      >
        <div className="text-[var(--foreground)] text-xl font-semibold">
          Cargando Neptuno...
        </div>
      </motion.div>
    );
  }

  return (
    <AuthContext.Provider
      value={{ user, credits, gamification, coupons, setCoupons, setGamification, setCredits, login, logout, register, loginWithGoogle, refreshToken, updateProfile, deleteProfile, resetPassword }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error("useAuth must be used within AuthProvider");
  return context;
};


Neptuno es todo lo que ya sabes pero tiene algo que lo hace bestial en cuanto a engagement:
todas las Funcionalidades estan disponibles para usuarios anonimos (guests) o sea Usuarios
que no se han registrado pueden tener puntos, creditos de cortesia, ganar insignias,etc...

esta "magia" sucede porque el front utiliza localstorage tanto para guest como para registered
(el campo user_type), para evitar usar cookies y ganar velocidad, al usar local storage manejamos
invitados y registrados.

esta magia explica algo que quizas no te has preguntado aun:
veras que el tipado en el front del usuario tiene user_id y session_id, bien: estan los dos porque
se dan escenarios que el usuario invitado no tiene user_id pero si tiene session_id o viceversa cuando
es anonimo (antes de hacer login o registrarse o volver), es la manera que esta implantando ahora
quizas se cambie mas adelante, por ahora es asi como Funcionalidades

Esta "curiosidad" hace especial a neptuno porque los leads desde que entran pueden interactuar
con la gamificación y el auth aqui para los tokens etc y la info que guardamos en localstorage
que luego influye en toda la logica de navbar etc esta aqui metida

por favor no lo olvides, esto te lo queria comentar explicitamente,

Continuamos, Otro archivo crucial es este:

// src/lib/api.ts
// frontend/src/lib/api.ts
// Cliente Axios y funciones para consumir la API

// src/lib/api.ts
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError, AxiosInstance } from "axios";
import { useState, useEffect } from 'react';
import { HTTPValidationError, FetchResponse, RegisterRequest, TokenResponse, UpdateProfileRequest, User, ValidationError } from "./types";

// Extender AxiosRequestConfig para incluir _retry
interface CustomAxiosRequestConfig extends AxiosRequestConfig {
  _retry?: boolean;
}

// Crear una instancia personalizada de Axios
const api: AxiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL,
});

// Variables para manejar el estado de refresco
let isRefreshing = false;
let failedQueue: Array<{ resolve: (token: string) => void; reject: (error: any) => void }> = [];

const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token!);
    }
  });
  failedQueue = [];
};

// Agregar el interceptor de solicitudes
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");
  const sessionId = localStorage.getItem("session_id");
  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
  } else if (sessionId) {
    config.headers["X-Session-ID"] = sessionId;
  }
  return config;
});

const logRequest = (method: string, url: string, status: number, data?: unknown) => {
  console.log(`[${method}] ${url} - Status: ${status}`, data ?? "");
};

const fetchAPI = async <T>(
  endpoint: string,
  options: CustomAxiosRequestConfig = {},
  contentType: string = "application/json"
): Promise<FetchResponse<T>> => {
  console.log(`Iniciando fetchAPI para ${endpoint}`);

  const config: CustomAxiosRequestConfig = {
    ...options,
    url: endpoint, // baseURL ya está configurado en la instancia
    headers: {
      "Content-Type": contentType,
      ...options.headers,
    },
    data: options.data,
  };

  // Convertir datos a formato x-www-form-urlencoded si es necesario
  if (contentType === "application/x-www-form-urlencoded" && config.data) {
    const formData = new URLSearchParams();
    Object.entries(config.data).forEach(([key, value]) => {
      if (value !== undefined) formData.append(key, String(value));
    });
    config.data = formData;
  }

  const normalizeResponse = (
    response: AxiosResponse<T> | undefined,
    error: unknown
  ): FetchResponse<T> => {
    if (response && response.status >= 200 && response.status < 300) {
      return { data: response.data, error: null };
    }

    if (axios.isAxiosError(error)) {
      const errorData = error.response?.data;
      if (errorData && errorData.detail) {
        if (typeof errorData.detail === "string") {
          return { data: null, error: errorData.detail };
        } else if (Array.isArray(errorData.detail)) {
          const messages = errorData.detail
            .map((err: ValidationError) => err.msg)
            .join(", ");
          return { data: null, error: messages };
        }
      }
    }

    return { data: null, error: "Error desconocido" };
  };

  try {
    const response: AxiosResponse<T> = await api(config); // Usar la instancia 'api'
    logRequest(config.method || "GET", config.url!, response.status, response.data);

    if (response.data && (response.data as any).session_id) {
      localStorage.setItem("session_id", (response.data as any).session_id);
    }

    return normalizeResponse(response, null);
  } catch (err: unknown) {
    const axiosError = err as AxiosError;
    logRequest(
      config.method || "GET",
      config.url!,
      axiosError.response?.status || 500,
      axiosError.response?.data
    );

    if (axiosError.response?.status === 401 && !config._retry) {
      const originalRequest: CustomAxiosRequestConfig = config;
      originalRequest._retry = true;

      const accessToken = localStorage.getItem("accessToken");
      const refreshToken = localStorage.getItem("refreshToken");

      if (accessToken && refreshToken) {
        if (isRefreshing) {
          return new Promise((resolve, reject) => {
            failedQueue.push({
              resolve: (token) => {
                originalRequest.headers.Authorization = `Bearer ${token}`;
                api(originalRequest)
                  .then(response => resolve(normalizeResponse(response, null)))
                  .catch(error => reject(normalizeResponse(undefined, error)));
              },
              reject: (error) => reject(normalizeResponse(undefined, error)),
            });
          });
        }

        isRefreshing = true;

        try {
          console.log("Intentando refrescar token de acceso");
          const refreshResponse = await api.post<TokenResponse>(
            "/v1/auth/refresh",
            { refresh_token: refreshToken },
            {
              headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${accessToken}`,
              },
            }
          );

          localStorage.setItem("accessToken", refreshResponse.data.access_token);
          localStorage.setItem("refreshToken", refreshResponse.data.refresh_token);

          originalRequest.headers.Authorization = `Bearer ${refreshResponse.data.access_token}`;
          processQueue(null, refreshResponse.data.access_token);

          const retryResponse = await api(originalRequest);
          return normalizeResponse(retryResponse, null);
        } catch (refreshError) {
          console.error("Error al refrescar token:", refreshError);
          localStorage.removeItem("accessToken");
          localStorage.removeItem("refreshToken");
          localStorage.removeItem("session_id");
          processQueue(refreshError, null);
          window.location.href = "/user/auth/#login";
          return normalizeResponse(undefined, {
            message: "Sesión expirada, por favor inicia sesión nuevamente",
          });
        } finally {
          isRefreshing = false;
        }
      } else {
        return normalizeResponse(undefined, { message: "No autorizado" });
      }
    }

    return normalizeResponse(undefined, err);
  }
};

// Custom hook to fetch data
export const useFetchData = <T>(
  endpoint: string,
  options: CustomAxiosRequestConfig = {},
  dependencies: any[] = []
): { data: T | null; loading: boolean; error: string | null } => {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await fetchAPI<T>(endpoint, options);
        if (response.error) {
          setError(typeof response.error === 'string' ? response.error : 'Error desconocido');
        } else {
          setData(response.data);
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Error desconocido');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [endpoint, options, dependencies]); // Asegurar que la lista de dependencias sea un array literal y agregar endpoint y options como dependencias

  return { data, loading, error };
};

// Funciones específicas de la API
export const getAllUsers = async (
  page: number = 1,
  limit: number = 10
): Promise<FetchResponse<{
  data: User[],
  total_items: number,
  total_pages: number,
  current_page: number
}>> => {
  return fetchAPI(`/v1/users/admin/users?page=${page}&limit=${limit}`, {
    method: "GET"
  });
};

export const getUserById = async (
  userId: number
): Promise<FetchResponse<User>> => {
  return fetchAPI<User>(`/v1/users/${userId}`, {
    method: "GET"
  });
};

export const updateUser = async (
  userId: number,
  data: UpdateProfileRequest
): Promise<FetchResponse<User>> => {
  return fetchAPI<User>(`/v1/users/${userId}`, {
    method: "PUT",
    data
  });
};

export const deleteUser = async (
  userId: number
): Promise<FetchResponse<void>> => {
  return fetchAPI<void>(`/v1/users/${userId}`, {
    method: "DELETE"
  });
};

export const createUser = async (
  data: RegisterRequest
): Promise<FetchResponse<TokenResponse>> => {
  return fetchAPI<TokenResponse>("/v1/auth/register", {
    method: "POST",
    data
  });
};

export default fetchAPI;

Como ves es donde disparamos a la API, importantisimo que lo tengas presente.

Por ultimo otro archivo crucial:

// src/components/web/Navbar.tsx

// frontend/src/components/web/Navbar.tsx
// Barra de navegación principal con estado de usuario y notificaciones
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/lib/auth/context";
import Link from "next/link";
import { usePathname } from "next/navigation";
import fetchAPI from "@/lib/api";
import {
  Button,
  Avatar,
  IconButton,
  Menu,
  MenuItem,
  useTheme,
  styled,
  Box,
  Typography,
  Snackbar,
  Alert,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Tooltip,
  Badge
} from "@mui/material";
import {
  MonetizationOn,
  Settings,
  ListAlt,
  People,
  Dashboard,
  Login,
  PersonAdd,
  Person,
  Home,
  Star,
  EmojiEvents,
  Leaderboard,
  School,
  Menu as MenuIcon,
  ContactMail,
  Close,
  Key,
  LocalActivity,
  Mail,
  Favorite
} from "@mui/icons-material";
import Image from "next/image";

const MobileBottomNav = styled(Box)(({ theme }) => ({
  position: 'fixed',
  bottom: 0,
  left: 0,
  right: 0,
  background: 'rgba(255, 255, 255, 0.1)',
  backdropFilter: 'blur(10px)',
  borderTop: `1px solid ${theme.palette.divider}`,
  padding: theme.spacing(1),
  zIndex: 999,
  justifyContent: 'space-around',
  alignItems: 'center',
  display: 'flex',
  [theme.breakpoints.up('md')]: {
    display: 'none',
  },
}));

const GlassNavbar = styled("nav")(({ theme }) => ({
  background: "rgba(255, 255, 255, 0.1)",
  backdropFilter: "blur(10px)",
  borderBottom: `1px solid ${theme.palette.divider}`,
  padding: theme.spacing(1, 2),
  position: "fixed",
  top: 0,
  left: 0,
  right: 0,
  zIndex: 1000,
}));

const NavContainer = styled(Box)(({ theme }) => ({
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
  maxWidth: "1200px",
  margin: "0 auto",
  [theme.breakpoints.down("md")]: {
    flexDirection: "row",
    alignItems: "center",
    gap: 1
  },
}));

export default function Navbar() {
  const theme = useTheme();
  const pathname = usePathname();
  const { user, credits, gamification, coupons, setCredits, setGamification, logout } = useAuth();
  const [settingsAnchorEl, setSettingsAnchorEl] = useState<null | HTMLElement>(null);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [disableCredits, setDisableCredits] = useState(false);
  const [enableRegistration, setEnableRegistration] = useState(true);
  const [enablePoints, setEnablePoints] = useState(true);
  const [enableCoupons, setEnableCoupons] = useState(true);
  const [enableBadges, setEnableBadges] = useState(true);
  const [enablePaymentMethods, setEnablePaymentMethods] = useState(true);
  const [anonUsername, setAnonUsername] = useState<string | null>(null);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [newBadge, setNewBadge] = useState<string | null>(null);

  useEffect(() => {
    const storedAnonUsername = localStorage.getItem("anonUsername");
    setAnonUsername(storedAnonUsername);
  }, []);

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const [
          disableCreditsRes,
          enableRegistrationRes,
          enablePointsRes,
          enableCouponsRes,
          enableBadgesRes,
          enablePaymentMethodsRes,
        ] = await Promise.all([
          fetchAPI("/v1/settings/disable_credits"),
          fetchAPI("/v1/settings/enable_registration"),
          fetchAPI("/v1/settings/enable_points"),
          fetchAPI("/v1/settings/enable_coupons"),
          fetchAPI("/v1/settings/enable_badges"),
          fetchAPI("/v1/settings/enable_payment_methods"),
        ]);
        setDisableCredits(disableCreditsRes.data === "true" || disableCreditsRes.data === true);
        setEnableRegistration(enableRegistrationRes.data === "true" || enableRegistrationRes.data === true);
        setEnablePoints(enablePointsRes.data === "true" || enablePointsRes.data === true);
        setEnableCoupons(enableCouponsRes.data === "true" || enableCouponsRes.data === true);
        setEnableBadges(enableBadgesRes.data === "true" || enableBadgesRes.data === true);
        setEnablePaymentMethods(enablePaymentMethodsRes.data === "true" || enablePaymentMethodsRes.data === true);
      } catch (err) {
        console.error("Error al obtener configuraciones:", err);
      }
    };
    fetchSettings();
  }, []);

  interface InfoData {
    credits: number;
  }

  useEffect(() => {
    if (!enablePoints && !enableBadges) return;

    const interval = setInterval(async () => {
      try {
        const { data: infoData } = await fetchAPI<InfoData>("/whoami");
        if (infoData) {
          setCredits(infoData.credits);
        }

        const { data: gamificationData } = await fetchAPI("/v1/gamification/me");
        if (gamificationData && Array.isArray(gamificationData)) {
          const totalPoints = enablePoints
            ? gamificationData.reduce((sum, g) => sum + g.points, 0)
            : 0;
          const badges = enableBadges
            ? gamificationData.map((g) => g.badge).filter((b) => b !== null)
            : [];

          const previousBadges = JSON.parse(localStorage.getItem("badges") || "[]");
          const currentBadgeIds = badges.map((b) => b.id);
          const newBadges = currentBadgeIds.filter((id) => !previousBadges.includes(id));
          if (newBadges.length > 0 && enableBadges) {
            const badge = badges.find((b) => b.id === newBadges[0]);
            setNewBadge(badge?.name || "Nuevo badge");
            setSnackbarOpen(true);
            localStorage.setItem("badges", JSON.stringify(currentBadgeIds));
          }

          setGamification({ points: totalPoints, badges });
        }
      } catch (err) {
        console.error("Error al actualizar datos:", err);
      }
    }, 30000);

    return () => clearInterval(interval);
  }, [setCredits, setGamification, enablePoints, enableBadges]);

  const handleSettingsMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setSettingsAnchorEl(event.currentTarget);
  };

  const handleSettingsMenuClose = () => {
    setSettingsAnchorEl(null);
  };

  const handleDrawerOpen = () => {
    setDrawerOpen(true);
  };

  const handleDrawerClose = () => {
    setDrawerOpen(false);
  };

  const availableCoupons = (coupons || []).filter(
    (coupon) =>
      coupon &&
      coupon.status === "active" &&
      (!coupon.expires_at || new Date(coupon.expires_at) > new Date())
  ).length;

  return (
    <>
      <GlassNavbar>
        <NavContainer>
          {/* Sección izquierda: Logo y menú hamburguesa */}
          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <IconButton
              onClick={handleDrawerOpen}
              sx={{ display: { xs: "block", md: "none" } }}
            >
              <MenuIcon />
            </IconButton>

            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              <Link href="/" passHref>
                <Box sx={{
                  display: "flex",
                  alignItems: "center",
                  gap: 1,
                  cursor: "pointer"
                }}>
                  <Image
                    src="/logo.png"
                    alt="Logo Neptuno"
                    width={40}
                    height={40}
                    style={{ borderRadius: "50%" }}
                  />
                  <Typography
                    variant="h6"
                    component="span"
                    className="app-logo"
                    sx={{
                      fontWeight: "bold",
                      display: {
                        xs: 'none',
                        md: 'block'
                      }
                    }}
                  >
                    Neptuno
                  </Typography>
                </Box>
              </Link>
            </Box>
          </Box>

          {/* Sección derecha: Elementos específicos para móvil */}
          <Box sx={{ 
            display: { xs: "flex", md: "none" },
            alignItems: "center",
            gap: 1
          }}>
            {/* Mensajes */}
            <Tooltip title="Mensajes (próximamente)">
              <IconButton sx={{ color: theme.palette.text.disabled }}>
                <Mail />
              </IconButton>
            </Tooltip>

            {/* Favoritos */}
            <Tooltip title="Likes (próximamente)">
              <IconButton sx={{ color: theme.palette.text.disabled }}>
                <Favorite />
              </IconButton>
            </Tooltip>

            {/* Settings solo para admin */}
            {user?.rol === "admin" && (
              <IconButton
                onClick={handleSettingsMenuOpen}
                sx={{ color: "inherit" }}
              >
                <Settings />
              </IconButton>
            )}
          </Box>

          {/* Sección derecha: Versión desktop */}
          <Box sx={{ 
            display: { xs: "none", md: "flex" },
            alignItems: "center",
            gap: 2
          }}>
            {/* Enlaces desktop */}
            <Box sx={{ display: "flex", gap: 2, mr: 1 }}>
              <Button
                component={Link}
                href="/ejemplos"
                className={pathname === '/ejemplos' ? 'active-link' : ''}
              >
                Ejemplos
              </Button>
              <Button
                component={Link}
                href="/rankings"
                className={pathname === '/rankings' ? 'active-link' : ''}
              >
                Rankings
              </Button>
            </Box>

            {/* Iconos de notificaciones - Orden modificado */}
            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              {/* Nuevo orden: corazón primero */}
              <Tooltip title="Likes (próximamente)">
                <IconButton sx={{ color: theme.palette.text.disabled }}>
                  <Favorite />
                </IconButton>
              </Tooltip>

              {/* Mensaje segundo */}
              <Tooltip title="Mensajes (próximamente)">
                <IconButton sx={{ color: theme.palette.text.disabled }}>
                  <Mail />
                </IconButton>
              </Tooltip>

              {/* Créditos tercero */}
              {!disableCredits && credits > 0 && (
                <Link href="/user/transactions" passHref>
                  <IconButton className="notification-icon">
                    <MonetizationOn />
                    <span className="notification-badge credits-badge">{credits}</span>
                  </IconButton>
                </Link>
              )}

              {enableCoupons && (
                <Link href="/user/coupon" passHref>
                  <Tooltip title="Tus cupones">
                    <IconButton className="notification-icon">
                      <Badge badgeContent={availableCoupons} color="secondary">
                        <LocalActivity />
                      </Badge>
                    </IconButton>
                  </Tooltip>
                </Link>
              )}

              {gamification && (
                <>
                  {enablePoints && (
                    <Link href="/user/points" passHref>
                      <IconButton className="notification-icon">
                        <Star />
                        <span className="notification-badge points-badge">{gamification.points}</span>
                      </IconButton>
                    </Link>
                  )}
                  {enableBadges && (
                    <Link href="/user/badges" passHref>
                      <IconButton className="notification-icon">
                        <EmojiEvents />
                        <span className="notification-badge badges-badge">{gamification.badges.length}</span>
                      </IconButton>
                    </Link>
                  )}
                </>
              )}
            </Box>

            {/* Menú admin y usuario */}
            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              {user?.rol === "admin" && (
                <>
                  <IconButton
                    onClick={handleSettingsMenuOpen}
                    sx={{ color: "inherit" }}
                  >
                    <Settings />
                  </IconButton>
                  <Menu
                    anchorEl={settingsAnchorEl}
                    open={Boolean(settingsAnchorEl)}
                    onClose={handleSettingsMenuClose}
                    PaperProps={{
                      sx: {
                        background: "rgba(255, 255, 255, 0.9)",
                        backdropFilter: "blur(10px)",
                        borderRadius: "12px",
                        mt: 1,
                        minWidth: "200px",
                      },
                    }}
                  >
                    <MenuItem onClick={handleSettingsMenuClose} component={Link} href="/admin/dashboard">
                      <Dashboard sx={{ mr: 1 }} /> Config
                    </MenuItem>
                    <MenuItem onClick={handleSettingsMenuClose} component={Link} href="/admin/gamification">
                      <EmojiEvents sx={{ mr: 1 }} /> Gamification
                    </MenuItem>
                    <MenuItem onClick={handleSettingsMenuClose} component={Link} href="/admin/revenues">
                      <MonetizationOn sx={{ mr: 1 }} /> Revenues
                    </MenuItem>
                    <MenuItem onClick={handleSettingsMenuClose} component={Link} href="/admin/registry">
                      <ListAlt sx={{ mr: 1 }} /> Registros
                    </MenuItem>
                    <MenuItem onClick={handleSettingsMenuClose} component={Link} href="/admin/users">
                      <People sx={{ mr: 1 }} /> Usuarios
                    </MenuItem>
                  </Menu>
                </>
              )}

              {user ? (
                <Tooltip title={user.username} arrow>
                  <IconButton
                    component={Link}
                    href="/user/dashboard"
                    className="user-avatar"
                  >
                    <Avatar sx={{
                      bgcolor: theme.palette.primary.main,
                      width: 40,
                      height: 40,
                      fontSize: '1rem'
                    }}>
                      {user.username[0].toUpperCase()}
                    </Avatar>
                  </IconButton>
                </Tooltip>
              ) : (
                <Tooltip title={anonUsername ? "Iniciar sesión" : "Registrarse"} arrow>
                  <Box sx={{ position: 'relative' }}>
                    <IconButton
                      component={Link}
                      href={anonUsername ? "/user/auth/#login" : "/user/auth/#register"}
                      className="user-avatar"
                    >
                      <Avatar sx={{
                        bgcolor: theme.palette.grey[500],
                        width: 40,
                        height: 40,
                        color: theme.palette.common.white
                      }}>
                        {anonUsername ? <Person /> : <Key />}
                      </Avatar>
                    </IconButton>
                    {anonUsername && (
                      <Box sx={{
                        position: 'absolute',
                        top: 0,
                        right: 0,
                        backgroundColor: theme.palette.secondary.main,
                        borderRadius: '50%',
                        width: 20,
                        height: 20,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        border: `2px solid ${theme.palette.background.paper}`
                      }}>
                        <Key sx={{ fontSize: 12, color: theme.palette.common.white }} />
                      </Box>
                    )}
                  </Box>
                </Tooltip>
              )}
            </Box>
          </Box>

          {/* Menú hamburguesa */}
          <Drawer anchor="left" open={drawerOpen} onClose={handleDrawerClose}>
            <List>
              <Box sx={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                p: 2,
                borderBottom: `1px solid ${theme.palette.divider}`
              }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Image
                    src="/logo.png"
                    alt="Logo Neptuno"
                    width={40}
                    height={40}
                    style={{ borderRadius: "50%" }}
                  />
                  <Typography
                    variant="h6"
                    sx={{
                      fontWeight: "bold",
                      background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                      WebkitBackgroundClip: "text",
                      WebkitTextFillColor: "transparent",
                      display: "inline-block",
                    }}
                  >
                    Neptuno
                  </Typography>
                </Box>
                <IconButton onClick={handleDrawerClose}>
                  <Close />
                </IconButton>
              </Box>

              <ListItem component={Link} href="/">
                <ListItemIcon><Home /></ListItemIcon>
                <ListItemText primary="Inicio" />
              </ListItem>
              <ListItem component={Link} href="/ejemplos">
                <ListItemIcon><School /></ListItemIcon>
                <ListItemText primary="Ejemplos" />
              </ListItem>
              <ListItem component={Link} href="/rankings">
                <ListItemIcon><Leaderboard /></ListItemIcon>
                <ListItemText primary="Rankings" />
              </ListItem>
              <ListItem component={Link} href="/about/contact">
                <ListItemIcon><ContactMail /></ListItemIcon>
                <ListItemText primary="Contacto" />
              </ListItem>

              {user?.rol === "admin" && (
                <>
                  <ListItem component={Link} href="/admin/dashboard">
                    <ListItemIcon><Dashboard /></ListItemIcon>
                    <ListItemText primary="Dashboard" />
                  </ListItem>
                  <ListItem component={Link} href="/admin/registry">
                    <ListItemIcon><ListAlt /></ListItemIcon>
                    <ListItemText primary="Registros" />
                  </ListItem>
                  <ListItem component={Link} href="/admin/users">
                    <ListItemIcon><People /></ListItemIcon>
                    <ListItemText primary="Usuarios" />
                  </ListItem>
                </>
              )}
              {user ? (
                <ListItem component={Link} href="/user/dashboard">
                  <ListItemIcon><Person /></ListItemIcon>
                  <ListItemText primary={user.username} />
                </ListItem>
              ) : (
                <>
                  <ListItem component={Link} href="/user/auth/#login">
                    <ListItemIcon><Login /></ListItemIcon>
                    <ListItemText primary="Iniciar Sesión" />
                  </ListItem>
                  {enableRegistration && (
                    <ListItem component={Link} href="/user/auth/#register">
                      <ListItemIcon><PersonAdd /></ListItemIcon>
                      <ListItemText primary="Registrarse" />
                    </ListItem>
                  )}
                </>
              )}
            </List>
          </Drawer>
        </NavContainer>

        <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={() => setSnackbarOpen(false)}>
          <Alert onClose={() => setSnackbarOpen(false)} severity="success" sx={{ width: "100%" }}>
            ¡Felicidades! Has obtenido el badge: {newBadge}
          </Alert>
        </Snackbar>
      </GlassNavbar>

      <MobileBottomNav>
        {!disableCredits && credits > 0 && (
          <Link href="/user/transactions" passHref>
            <IconButton className="notification-icon">
              <MonetizationOn />
              <span className="notification-badge credits-badge">{credits}</span>
            </IconButton>
          </Link>
        )}

        {enableCoupons && (
          <Link href="/user/coupon" passHref>
            <Tooltip title="Tus cupones">
              <IconButton className="notification-icon">
                <Badge badgeContent={availableCoupons} color="secondary">
                  <LocalActivity />
                </Badge>
              </IconButton>
            </Tooltip>
          </Link>
        )}

        {user ? (
          <Tooltip title={user.username} arrow>
            <IconButton component={Link} href="/user/dashboard">
              <Avatar sx={{
                bgcolor: theme.palette.primary.main,
                width: 32,
                height: 32,
                fontSize: '0.9rem'
              }}>
                {user.username[0].toUpperCase()}
              </Avatar>
            </IconButton>
          </Tooltip>
        ) : (
          <Tooltip title={anonUsername ? "Iniciar sesión" : "Registrarse"} arrow>
            <IconButton
              component={Link}
              href={anonUsername ? "/user/auth/#login" : "/user/auth/#register"}
            >
              <Avatar sx={{
                bgcolor: theme.palette.grey[500],
                width: 32,
                height: 32,
                color: theme.palette.common.white
              }}>
                {anonUsername ? <Person fontSize="small" /> : <Key fontSize="small" />}
              </Avatar>
            </IconButton>
          </Tooltip>
        )}

        {/* Mostrar icono de puntos incluso cuando es 0 */}
        {enablePoints && gamification && (
          <Link href="/user/points" passHref>
            <IconButton className="notification-icon">
              <Star />
              <span className="notification-badge points-badge">{gamification.points || 0}</span>
            </IconButton>
          </Link>
        )}

        {gamification?.badges && enableBadges && (
          <Link href="/user/badges" passHref>
            <IconButton className="notification-icon">
              <EmojiEvents />
              <span className="notification-badge badges-badge">{gamification.badges.length}</span>
            </IconButton>
          </Link>
        )}
      </MobileBottomNav>
    </>
  );
}

Aqui es donde esta toda la interfaz, tenemos pendiente implantar websockets pero por ahora esta asi y 
continuaremos usandolo asi sin websockets, sino con la misma logica que ya has vsito.

es importantisimo que navbar este siempre optimizado y al dia en tu mente y en el codigo para reflejar
todos los cambios

bueno ahora vamos con el resto de archivos del frontend

// frontend/src/lib/types.ts
// Tipos TypeScript para entidades y respuestas de la app

// src/lib/types.ts
export interface User {
  id: number;
  email: string;
  username: string;
  rol: string;
  activo: boolean;
  subscription: string;
  ciudad?: string;
  website?: string;
  credits: number;
  create_at: string;  // ISO string (e.g., "2023-10-01T12:00:00Z")
  last_ip?: string;
  last_login: string;
  user_type: string;
}

export interface TokenResponse {
  access_token: string;
  refresh_token: string;
  token_type: string;
}



export interface RegisterRequest {
  email: string;
  username: string;
  password: string;
  ciudad?: string;
  website?: string;
}

export interface UpdateProfileRequest {
  email?: string;
  username?: string;
  ciudad?: string;
  website?: string;
}

export interface PurchaseRequest {
  credits: number;
  payment_amount: number;
  payment_method?: string;
}

export interface PurchaseResponse {
  transaction_id: string;
  credits_added: number;
  new_balance: number;
}

export interface PaymentMethod {
  id: number;
  payment_type: string;
  details: string;
  is_default: boolean;
  created_at: string;  // ISO string
  updated_at: string;  // ISO string
}

export interface HTTPValidationError {
  detail: ValidationError[];
}

export interface ValidationError {
  loc: (string | number)[];
  msg: string;
  type: string;
}

export interface CreditTransaction {
  id: number;
  amount: number;
  transaction_type: string;
  payment_amount?: number;
  payment_method?: string;
  payment_status: string;
  timestamp: string; // ISO string
}

export interface Integration {
  user_id: number;
  id: number;
  name: string;
  webhook_url: string;
  event_type: string;
  active: boolean;
  created_at: string;
  last_triggered: string | null;
}

export interface SiteSetting {
    id: number;
    key: string;
    value: string;
    description?: string;
    tag?: string;
    updated_by?: number;
    updated_at: string; // ISO string
}

export interface FetchResponse<T> {
  data: T | null;
  error: string | HTTPValidationError | null;
  total_pages?: number;
}

// src/lib/types.ts
export interface UserInfo {
  user_id: string | null;
  email: string | null;
  username: string | null;
  user_type: string;
  subscription: string | null;
  credits: number;
  rol: string | null;
  session_id?: string;
  gamification: UserGamificationResponse[]; // Actualizado para reflejar /whoami
}

export interface EventType {
  id: number;
  name: string;
  description?: string;
  points_per_event: number;
}

export interface Badge {
  id: number;
  name: string;
  description?: string;
  event_type_id: number;
  required_points: number;
  user_type: string; // "anonymous", "registered", "both"
}

export interface Gamification {
  points: number;
  badges: Badge[];
}

export interface GamificationEventCreate {
  event_type_id: number;
}

export interface GamificationEventResponse {
  id: number;
  event_type_id: number;
  user_id?: number;
  session_id?: string;
  timestamp: string; // ISO string
}

export interface UserGamificationResponse {
  points: number;
  badge_id?: number;
  event_type_id: number;
  user_id?: number;
  session_id?: string;
  event_type: EventType;
  badge?: Badge;
}
export interface RankingResponse {
  username: string;
  points: number;
  badges_count: number;
  user_type: string;
}

export interface PaymentProvider {
  id: number;
  name: string;
  active: boolean;
}



export interface InfoResponse {
  credits: number;
  gamification: { points: number; badge: Badge | null }[];
}


export interface BadgeWithEventType extends Badge {
  event_type: EventType;
}


// src/lib/types.ts

// Nuevo tipo para cupones
export interface Coupon {
  id: number;
  name: string;
  description?: string;
  unique_identifier: string;
  issued_at: string; // ISO string
  expires_at?: string; // ISO string, opcional
  redeemed_at?: string; // ISO string, opcional
  active: boolean;
  status: "active" | "redeemed" | "expired" | "disabled";
  credits: number;
  user_id?: number; // Opcional, para usuarios registrados
  session_id?: string; // Opcional, para usuarios anónimos
  redeemed_by_user_id?: number; // Quién lo canjeó, si aplica
  redeemed_by_session_id?: string; // Quién lo canjeó (anónimo), si aplica
}



export interface CouponType {
  id: number;
  name: string;
  description?: string;
  credits: number;
  active: boolean;
}

export interface CouponActivity {
  id: number;
  coupon_type: string;
  unique_identifier: string;
  user_id?: number;
  session_id?: string;
  status: string;
  issued_at: string;
  redeemed_at?: string;
}

export interface AllowedOrigin {
  id: number;
  origin: string;
}



// frontend/src/lib/payments.ts
export interface PaymentProvider {
    name: string;
    processPayment(amount: number, currency: string, description: string): Promise<PaymentResult>;
  }
  
  export interface PaymentResult {
    success: boolean;
    transactionId?: string;
    error?: string;
  }

  // frontend/src/lib/payments/manager.ts
// this file manages the payment providers
import { PaymentProvider, PaymentResult } from "../payments";

export class PaymentManager {
  private providers: Record<string, PaymentProvider> = {};

  registerProvider(provider: PaymentProvider) {
    this.providers[provider.name] = provider;
  }

  async processPayment(providerName: string, amount: number, currency: string, description: string): Promise<PaymentResult> {
    const provider = this.providers[providerName];
    if (!provider) {
      return { success: false, error: `Proveedor ${providerName} no encontrado` };
    }
    return await provider.processPayment(amount, currency, description);
  }
}


// frontend/src/lib/payments/example.tsx
// Ejemplo de integración de pagos con PaymentManager y Stripe
import { PaymentManager } from "@/lib/payments/manager";
import { StripeProvider } from "@/lib/payments/stripe";

const paymentManager = new PaymentManager();
paymentManager.registerProvider(new StripeProvider());

const handlePayment = async () => {
  const result = await paymentManager.processPayment("Stripe", 1000, "USD", "Compra de créditos");
  if (result.success) {
    console.log("Pago exitoso:", result.transactionId);
  } else {
    console.error("Error en el pago:", result.error);
  }
};

// frontend/src/hooks/useNotifications.tsx
// Custom hook para manejar notificaciones en la aplicación.
// Este hook utiliza Material-UI y Framer Motion para mostrar notificaciones de manera elegante.
// El hook devuelve una función para mostrar notificaciones y un componente para renderizarlas.
import { useState } from 'react';
import { Snackbar, Alert } from '@mui/material';
import { motion, AnimatePresence } from 'framer-motion';

interface Notification {
  message: string;
  severity: 'success' | 'error' | 'warning' | 'info';
}

export function useNotifications() {
  const [notification, setNotification] = useState<Notification | null>(null);

  const showNotification = (message: string, severity: Notification['severity']) => {
    setNotification({ message, severity });
  };

  const clearNotification = () => {
    setNotification(null);
  };

  const NotificationComponent = () => (
    <AnimatePresence>
      {notification && (
        <Snackbar
          open
          autoHideDuration={3000}
          onClose={clearNotification}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
          >
            <Alert
              severity={notification.severity}
              onClose={clearNotification}
              sx={{ boxShadow: 6, borderRadius: '12px' }}
            >
              {notification.message}
            </Alert>
          </motion.div>
        </Snackbar>
      )}
    </AnimatePresence>
  );

  return { showNotification, NotificationComponent };
}

// frontend/src/hooks/useFetchData.ts
// frontend/src/hooks/useFetchData.ts
// Custom hook para realizar peticiones HTTP y manejar el estado de carga, error y datos.
import { useState, useEffect } from 'react';

interface FetchDataResult<T> {
  data: T | null;
  error: string | null;
  loading: boolean;
}

export function useFetchData<T>(url: string, dependencies: any[] = []): FetchDataResult<T> {
  const [data, setData] = useState<T | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error(`Error: ${response.statusText}`);
        }
        const result = await response.json();
        setData(result);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [url, dependencies]);

  return { data, error, loading };
}

// src/components/Footer.tsx
// src/components/Footer.tsx
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import {
  Box,
  Grid,
  Typography,
  IconButton,
  Divider,
  useTheme,
  styled,
  Container,
} from "@mui/material";
import {
  Brightness4,
  Brightness7,
  Info,
  Gavel,
  ContactSupport,
  Home,
  Code,
  Help,
  Build,
  LocationOn,
  Email,
  Phone,
} from "@mui/icons-material";

const GlassFooter = styled("footer")(({ theme }) => ({
  background: "rgba(255, 255, 255, 0.1)",
  backdropFilter: "blur(10px)",
  borderTop: `1px solid ${theme.palette.divider}`,
  padding: theme.spacing(4, 1),
  marginTop: "auto",
}));

const FooterLink = styled(Link)(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  gap: theme.spacing(1),
  color: theme.palette.text.secondary,
  textDecoration: "none",
  transition: "color 0.3s ease",
  "&:hover": {
    color: theme.palette.primary.main,
  },
}));

const ContactItem = styled(Box)(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  gap: theme.spacing(1),
  color: theme.palette.text.secondary,
  marginBottom: theme.spacing(1),
}));

export default function Footer() {
  const theme = useTheme();
  const [loadTime, setLoadTime] = useState(0);
  const [currentTheme, setCurrentTheme] = useState(theme.palette.mode);

  useEffect(() => {
    const startTime = performance.now();
    const handleLoad = () => {
      const endTime = performance.now();
      setLoadTime(parseFloat((endTime - startTime).toFixed(2)));
    };

    window.addEventListener("load", handleLoad);
    return () => window.removeEventListener("load", handleLoad);
  }, []);

  const toggleTheme = () => {
    const newTheme = currentTheme === "light" ? "dark" : "light";
    setCurrentTheme(newTheme);
    // Aquí deberías implementar la lógica para cambiar el tema globalmente
  };

  return (
    <GlassFooter>
      <Container maxWidth="lg">
        <Grid container spacing={4}>
          {/* Columna 1: Logo, nombre, tagline y botón de tema */}
          <Grid item xs={12} sm={6} md={3}>
            <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 2 }}>
              <Home color="primary" />
              <Typography
                variant="h6"
                sx={{
                  fontWeight: "bold",
                  background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                  WebkitBackgroundClip: "text",
                  WebkitTextFillColor: "transparent",
                }}
              >
                Neptuno
              </Typography>
            </Box>
            <Typography variant="body2" color="textSecondary" gutterBottom>
              Tu framework SaaS para gestión de créditos y APIs.
            </Typography>
            <IconButton 
              onClick={toggleTheme} 
              color="inherit"
              sx={{ mt: 1, border: `1px solid ${theme.palette.divider}`, borderRadius: 2 }}
            >
              {currentTheme === "light" ? <Brightness4 /> : <Brightness7 />}
              <Typography variant="caption" sx={{ ml: 1 }}>
                {currentTheme === "light" ? "Modo oscuro" : "Modo claro"}
              </Typography>
            </IconButton>
          </Grid>

          {/* Columna 2: Información */}
          <Grid item xs={12} sm={6} md={3}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Información
            </Typography>
            <Box sx={{ display: "flex", flexDirection: "column", gap: 1.5 }}>
              <FooterLink href="/about/us">
                <Info fontSize="small" /> Sobre Nosotros
              </FooterLink>
              <FooterLink href="/about/privacy">
                <Gavel fontSize="small" /> Privacidad
              </FooterLink>
              <FooterLink href="/about/legal">
                <Gavel fontSize="small" /> Términos Legales
              </FooterLink>
            </Box>
          </Grid>

          {/* Columna 3: Soporte */}
          <Grid item xs={12} sm={6} md={3}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Soporte
            </Typography>
            <Box sx={{ display: "flex", flexDirection: "column", gap: 1.5 }}>
              <FooterLink href="/api/docs">
                <Code fontSize="small" /> API Docs
              </FooterLink>
              <FooterLink href="/installation">
                <Build fontSize="small" /> Instalación
              </FooterLink>
              <FooterLink href="/help">
                <Help fontSize="small" /> Ayuda
              </FooterLink>
            </Box>
          </Grid>

          {/* Columna 4: Contacto */}
          <Grid item xs={12} sm={6} md={3}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Contacto
            </Typography>
            <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
              <ContactItem>
                <LocationOn fontSize="small" />
                <Typography variant="body2">
                  Avenida Miguel Indurain, Murcia, 30008 España
                </Typography>
              </ContactItem>
              <FooterLink href="mailto:info@neptuno.com">
                <Email fontSize="small" /> info@neptuno.com
              </FooterLink>
              <FooterLink href="tel:+34987654321">
                <Phone fontSize="small" /> +34 987 654 321
              </FooterLink>
            </Box>
          </Grid>
        </Grid>

        {/* Pie del footer */}
        <Divider sx={{ my: 3 }} />
        <Box sx={{ 
          display: "flex", 
          flexDirection: { xs: "column", sm: "row" }, 
          alignItems: "center", 
          justifyContent: "space-between",
          gap: 2
        }}>
          <Typography variant="caption" color="textSecondary">
            Tiempo de carga: {loadTime} ms
          </Typography>
          <Typography variant="caption" color="textSecondary">
            © {new Date().getFullYear()} Neptuno. Todos los derechos reservados.
          </Typography>
        </Box>
      </Container>
    </GlassFooter>
  );
}

// frontend/src/components/ui/Styled.tsx
// This file contains styled components for the application using Material-UI's styled API.
// It includes custom styles for tabs, chips, cards, and other UI elements.
// The styles are defined using the theme provided by Material-UI, allowing for consistent theming across the application.
import { styled } from '@mui/material/styles';
import { Chip, Tabs, Paper, Card } from '@mui/material';

export const StyledTabs = styled(Tabs)(({ theme }) => ({
  '& .MuiTabs-indicator': {
    backgroundColor: theme.palette.primary.main,
    height: 3,
    borderRadius: '2px',
  },
  '& .MuiTab-root': {
    color: theme.palette.text.primary,
    opacity: 0.8,
    fontSize: '0.875rem',
    fontWeight: 500,
    textTransform: 'capitalize',
    padding: '12px 16px',
    minHeight: 'auto',
    '&.Mui-selected': {
      color: theme.palette.primary.main,
      opacity: 1,
      fontWeight: 600,
    },
    '&:hover': {
      opacity: 1,
      color: theme.palette.primary.dark,
    },
  },
}));

export const StatusChip = styled(Chip)(({ theme }) => ({
  borderRadius: '8px',
  fontWeight: 600,
  fontSize: '0.75rem',
  padding: '2px 8px',
  height: 'auto',
  color: 'white',
  '&.MuiChip-colorSuccess': {
    backgroundColor: theme.palette.success.main,
  },
  '&.MuiChip-colorWarning': {
    backgroundColor: theme.palette.warning.main,
  },
  '&.MuiChip-colorError': {
    backgroundColor: theme.palette.error.main,
  },
  '&.MuiChip-colorDefault': {
    backgroundColor: theme.palette.grey[500],
  },
}));

export const StyledCard = styled(Paper)(({ theme }) => ({
  background: 'rgba(248, 249, 250, 0.85)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  padding: theme.spacing(3),
  boxShadow: theme.shadows[4],
  border: '1px solid rgba(222, 226, 230, 0.5)',
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-4px)',
    boxShadow: theme.shadows[6],
    background: 'rgba(248, 249, 250, 0.95)',
  },
}));

export const GradientCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%)`,
  color: 'white',
  borderRadius: '16px',
  boxShadow: theme.shadows[4]
}));

export const GlassCard = styled(Card)(({ theme }) => ({
  background: 'rgba(248, 249, 250, 0.8)',
  backdropFilter: 'blur(10px)',
  border: '1px solid rgba(222, 226, 230, 0.5)',
  borderRadius: '16px',
  boxShadow: theme.shadows[2]
}));

export const AdminGradientCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, ${theme.palette.primary.dark} 0%, ${theme.palette.secondary.dark} 100%)`,
  color: theme.palette.primary.contrastText,
  borderRadius: '16px',
  boxShadow: theme.shadows[10],
  transition: 'transform 0.3s ease',
  '&:hover': {
    transform: 'translateY(-5px)'
  }
}));

export const ConfigGlassCard = styled(Card)(({ theme }) => ({
  background: 'rgba(255, 255, 255, 0.1)',
  backdropFilter: 'blur(10px)',
  border: '1px solid rgba(255, 255, 255, 0.2)',
  borderRadius: '16px',
  boxShadow: theme.shadows[5]
}));

export const FeatureCard = styled(Card)(({ theme }) => ({
  borderRadius: '16px',
  boxShadow: theme.shadows[4],
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-5px)',
    boxShadow: theme.shadows[8]
  }
}));

// frontend/src/components/ui/SectionTable.tsx
// This file defines a SectionTable component that uses Material-UI's Table component.
import { Table, TableBody, TableCell, TableHead, TableRow, styled } from "@mui/material";

const StyledTable = styled(Table)(({ theme }) => ({
  '& .MuiTableCell-root': {
    borderColor: theme.palette.divider,
  },
  '& .MuiTableHead-root': {
    backgroundColor: theme.palette.background.default,
  },
}));

interface SectionTableProps {
  headers: string[];
  children: React.ReactNode;
}

export default function SectionTable({ headers, children }: SectionTableProps) {
  return (
    <StyledTable>
      <TableHead>
        <TableRow>
          {headers.map((header, index) => (
            <TableCell key={index}>{header}</TableCell>
          ))}
        </TableRow>
      </TableHead>
      <TableBody>
        {children}
      </TableBody>
    </StyledTable>
  );
}

// frontend/src/ui/SectionHeader.tsx
// This file defines a SectionHeader component that uses Material-UI's Box and Typography components.
import { Box, Typography, Button, Divider, styled } from "@mui/material";

const HeaderContainer = styled(Box)(({ theme }) => ({
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  marginBottom: theme.spacing(3),
}));

interface SectionHeaderProps {
  title: string;
  action?: React.ReactNode;
}

export default function SectionHeader({ title, action }: SectionHeaderProps) {
  return (
    <>
      <HeaderContainer>
        <Typography variant="h6" fontWeight="600">
          {title}
        </Typography>
        {action}
      </HeaderContainer>
      <Divider sx={{ mb: 3 }} />
    </>
  );
}

// frontend/src/components/ui/Notification.tsx
import { Snackbar, Alert } from "@mui/material";

interface NotificationProps {
  message: string;
  severity: "success" | "error";
  onClose: () => void;
}

export default function Notification({ message, severity, onClose }: NotificationProps) {
  return (
    <Snackbar open autoHideDuration={3000} onClose={onClose} anchorOrigin={{ vertical: "bottom", horizontal: "right" }}>
      <Alert severity={severity} onClose={onClose} sx={{ boxShadow: 1, borderRadius: 2 }}>
        {message}
      </Alert>
    </Snackbar>
  );
}


// file: frontend/src/components/ui/MinimalList.tsx
import { List, ListItem, ListItemText } from "@mui/material";

interface MinimalListProps {
  items: { primary: string; secondary?: string }[];
}

export default function MinimalList({ items }: MinimalListProps) {
  return (
    <List sx={{ bgcolor: "white", borderRadius: 2, boxShadow: 1 }}>
      {items.map((item, index) => (
        <ListItem key={index} divider={index < items.length - 1}>
          <ListItemText primary={item.primary} secondary={item.secondary} />
        </ListItem>
      ))}
    </List>
  );
}

// frontend/src/components/ui/MinimalForm.tsx
import { Box, Button } from "@mui/material";
import { ReactNode } from "react";

interface MinimalFormProps {
  onSubmit: (e: React.FormEvent) => void;
  children: ReactNode;
  submitLabel?: string;
}

export default function MinimalForm({ onSubmit, children, submitLabel = "Guardar" }: MinimalFormProps) {
  return (
    <Box component="form" onSubmit={onSubmit} sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
      {children}
      <Button type="submit" variant="contained" color="primary" sx={{ alignSelf: "flex-start" }}>
        {submitLabel}
      </Button>
    </Box>
  );
}

// src/components/ui/MinimalCard.tsx
// This file defines a MinimalCard component that uses Material-UI's Card component.
import { Box, Card, CardContent, Typography, styled } from "@mui/material";
import { ReactNode } from "react";

interface MinimalCardProps {
  title: string;
  value: string | number;
  icon: ReactNode;
  gradient?: boolean;
}

const StyledCard = styled(Card)(({ theme }) => ({
  borderRadius: theme.shape.borderRadius * 2,
  boxShadow: theme.shadows[2],
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-2px)',
    boxShadow: theme.shadows[4],
  },
}));

const GradientCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,
  color: theme.palette.primary.contrastText,
  borderRadius: theme.shape.borderRadius * 2,
  boxShadow: theme.shadows[4],
}));

export default function MinimalCard({ title, value, icon, gradient }: MinimalCardProps) {
  const Component = gradient ? GradientCard : StyledCard;
  
  return (
    <Component>
      <CardContent sx={{ display: "flex", alignItems: "center", gap: 2, py: 2 }}>
        <Box sx={{ 
          p: 1.5, 
          bgcolor: gradient ? 'rgba(255,255,255,0.15)' : 'action.hover',
          borderRadius: 1,
          display: 'flex',
        }}>
          {icon}
        </Box>
        <div>
          <Typography variant="body2" color={gradient ? 'text.secondary' : 'text.primary'}>
            {title}
          </Typography>
          <Typography variant="h6" fontWeight="bold">
            {value}
          </Typography>
        </div>
      </CardContent>
    </Component>
  );
}

// frontend/src/components/ui/index.tsx
// Componentes UI reutilizables (spinner, glass card, etc)
import { ReactNode } from "react";
import { motion } from "framer-motion";

export const LoadingSpinner = () => (
  <motion.div
    animate={{ rotate: 360 }}
    transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
    className="h-8 w-8 border-4 border-purple-500 border-t-transparent rounded-full"
  />
);

export const GlassCard = ({ children, className }: { children: ReactNode; className?: string }) => (
  <motion.div
    className={`bg-white/5 backdrop-blur-lg rounded-xl border border-white/10 ${className}`}
    whileHover={{ scale: 1.02 }}
  >
    {children}
  </motion.div>
);

export const GradientText = ({ children, className }: { children: ReactNode; className?: string }) => (
  <span className={`bg-gradient-to-r from-purple-400 to-pink-500 bg-clip-text text-transparent ${className}`}>
    {children}
  </span>
);

export const BadgeIcon = ({ type, className }: { type: string; className?: string }) => {
  const icons: Record<string, string> = {
    'api_usage': '💻',
    'survey_completed': '📝',
    'registration_completed': '🎯',
    'all_subscriptions': '📬',
    'default': '🏆'
  };
  
  return <div className={`${className} flex items-center justify-center text-4xl`}>{icons[type] || icons.default}</div>;
};

export const TimelineIcon = ({ type, className }: { type: string; className?: string }) => {
  const icons: Record<string, string> = {
    'api_usage': '⬆️',
    'survey_completed': '✅',
    'registration_completed': '📋',
    'all_subscriptions': '📩',
    'default': '✨'
  };
  
  return <span className={`${className} text-2xl`}>{icons[type] || icons.default}</span>;
};

export const EmptyState = ({ icon, title, description }: { icon: string; title: string; description: string }) => (
  <div className="text-center py-12">
    <div className="text-6xl mb-4">{icon}</div>
    <h3 className="text-xl font-semibold text-white mb-2">{title}</h3>
    <p className="text-gray-400 max-w-md mx-auto">{description}</p>
  </div>
);

// components/ui/index.tsx
export const RankingMedal = ({ position }: { position: number }) => {
  const colors = {
    1: "from-yellow-400 to-yellow-600",
    2: "from-gray-400 to-gray-600",
    3: "from-amber-600 to-amber-800",
    default: "from-purple-500 to-pink-500"
  };

  return (
    <div className={`w-12 h-12 rounded-full flex items-center justify-center 
      bg-gradient-to-r ${colors[position as keyof typeof colors] || colors.default}`}>
      <span className="font-bold text-white">{position}</span>
    </div>
  );
};

export const InteractiveDemo = ({ children }: { children: React.ReactNode }) => (
  <motion.div
    className="relative overflow-hidden rounded-xl"
    whileHover={{ scale: 1.02 }}
  >
    <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20" />
    <div className="relative backdrop-blur-sm p-8">
      {children}
    </div>
  </motion.div>
);

export { StyledTabs, StatusChip, StyledCard } from './Styled';
export { default as FeatureDisabled } from './FeatureDisabled';
export { GradientCard, AdminGradientCard, ConfigGlassCard, FeatureCard } from './Styled';

// frontend/src/components/ui/FilterableTabs.tsx
// This component renders a set of tabs that can be filtered based on the provided props.
// It uses Material-UI's Tabs and Tab components for styling and functionality.
// The tabs are passed as props, and the selected tab is managed using React's useState hook.
import React, { useState } from 'react';
import { Tabs, Tab, Box } from '@mui/material';

interface FilterableTabsProps {
  tabs: { label: string; value: string }[];
  onTabChange: (value: string) => void;
  initialTab?: string;
}

const FilterableTabs: React.FC<FilterableTabsProps> = ({ tabs, onTabChange, initialTab }) => {
  const [selectedTab, setSelectedTab] = useState(initialTab || tabs[0].value);

  const handleChange = (event: React.SyntheticEvent, newValue: string) => {
    setSelectedTab(newValue);
    onTabChange(newValue);
  };

  return (
    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
      <Tabs value={selectedTab} onChange={handleChange} aria-label="filterable tabs">
        {tabs.map((tab) => (
          <Tab key={tab.value} label={tab.label} value={tab.value} />
        ))}
      </Tabs>
    </Box>
  );
};

export default FilterableTabs;



// from frontend/src/components/ui/FeatureStateHandler.tsx
// This component handles the display of a feature based on its enabled state.
// It shows a loading spinner while checking the state and displays a message if the feature is disabled.
// If the feature is enabled, it renders the children components passed to it.
// It uses Material-UI for styling and layout.
// The component is designed to be reusable and can be used in various parts of the application where feature state handling is required.
import React, { ReactNode } from 'react';
import { Box, Typography } from '@mui/material';

interface FeatureStateHandlerProps {
  isEnabled: boolean | null;
  message: string;
  children?: ReactNode;
}

const FeatureStateHandler: React.FC<FeatureStateHandlerProps> = ({ isEnabled, message, children }) => {
  if (isEnabled === null) return null;

  if (!isEnabled) {
    return (
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
          p: 4,
        }}
      >
        <Typography variant="h6" color="text.secondary">
          {message}
        </Typography>
      </Box>
    );
  }

  return <>{children}</>;
};

export default FeatureStateHandler;


// from: frontend/src/components/ui/FeatureDisabled.tsx
// This component handles the display of a feature based on its enabled state.
// It shows a loading spinner while checking the state and displays a message if the feature is disabled.
// If the feature is enabled, it renders the children components passed to it.
// It uses Material-UI for styling and layout.
// The component is designed to be reusable and can be used in various parts of the application where feature state handling is required.
import React, { ReactNode } from 'react';
import { Box, Typography } from '@mui/material';

interface FeatureDisabledProps {
  message: string;
  isEnabled: boolean | null;
  children?: ReactNode;
}

const FeatureDisabled: React.FC<FeatureDisabledProps> = ({ message, isEnabled, children }) => {
  if (isEnabled === null) return null;

  if (!isEnabled) {
    return (
      <Box
        sx={{
          minHeight: '100vh',
          background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          p: 4,
        }}
      >
        <Typography variant="h6" color="text.secondary">
          {message}
        </Typography>
      </Box>
    );
  }

  return <>{children}</>;
};

export default FeatureDisabled;

// frontend/src/components/dashboard/DashboardUI.tsx
// Componentes de UI reutilizables para dashboards
import { Card, styled } from "@mui/material";

export const GradientCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%)`,
  color: 'white',
  borderRadius: '16px',
  boxShadow: theme.shadows[4]
}));

export const GlassCard = styled(Card)(({ theme }) => ({
  background: 'rgba(248, 249, 250, 0.8)',
  backdropFilter: 'blur(10px)',
  border: '1px solid rgba(222, 226, 230, 0.5)',
  borderRadius: '16px',
  boxShadow: theme.shadows[2]
}));

export const AdminGradientCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, ${theme.palette.primary.dark} 0%, ${theme.palette.secondary.dark} 100%)`,
  color: theme.palette.primary.contrastText,
  borderRadius: '16px',
  boxShadow: theme.shadows[10],
  transition: 'transform 0.3s ease',
  '&:hover': {
    transform: 'translateY(-5px)'
  }
}));

export const ConfigGlassCard = styled(Card)(({ theme }) => ({
  background: 'rgba(255, 255, 255, 0.1)',
  backdropFilter: 'blur(10px)',
  border: '1px solid rgba(255, 255, 255, 0.2)',
  borderRadius: '16px',
  boxShadow: theme.shadows[5]
}));

export const FeatureCard = styled(Card)(({ theme }) => ({
  borderRadius: '16px',
  boxShadow: theme.shadows[4],
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-5px)',
    boxShadow: theme.shadows[8]
  }
}));


// src/components/admin/AdminUsersPage.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { useAuth } from "@/lib/auth/context";
import { getAllUsers, updateUser, deleteUser, createUser } from "@/lib/api";
import { User, RegisterRequest, UpdateProfileRequest } from "@/lib/types";
import {
  Box,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TextField,
  Snackbar,
  Alert,
  IconButton,
  Pagination,
  CircularProgress,
  Avatar,
  Chip,
  Paper,
  Typography,
  Divider,
  useTheme,
  styled
} from "@mui/material";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import { Edit, Delete, Add, Person, Lock, Email, Language, LocationOn, VerifiedUser } from "@mui/icons-material";
import { motion, AnimatePresence } from "framer-motion";

// Styled Components
const AdminGlassCard = styled(Paper)(({ theme }) => ({
  background: 'rgba(255, 255, 255, 0.1)',
  backdropFilter: 'blur(10px)',
  border: '1px solid rgba(255, 255, 255, 0.2)',
  borderRadius: '16px',
  boxShadow: theme.shadows[5],
  padding: theme.spacing(4),
  marginBottom: theme.spacing(4)
}));

const StyledDataGrid = styled(DataGrid)(({ theme }) => ({
  borderRadius: '12px',
  boxShadow: theme.shadows[2],
  '& .MuiDataGrid-columnHeaders': {
    backgroundColor: theme.palette.primary.light,
    color: theme.palette.primary.contrastText,
    borderRadius: '12px 12px 0 0'
  },
  '& .MuiDataGrid-cell': {
    borderBottom: `1px solid ${theme.palette.divider}`
  },
  '& .MuiDataGrid-row:hover': {
    backgroundColor: 'rgba(0, 0, 0, 0.04)'
  }
}));

const StatusChip = styled(Chip)(({ theme }) => ({
  fontWeight: 'bold',
  borderRadius: '8px'
}));

const AdminUsersPage = () => {
  const theme = useTheme();
  const { user } = useAuth();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [formMode, setFormMode] = useState<"create" | "update">("create");
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [formData, setFormData] = useState<RegisterRequest | Omit<UpdateProfileRequest, 'password'>>({
    email: "",
    username: "",
    password: "",
    ciudad: "",
    website: "",
  });

  const [pagination, setPagination] = useState({
    page: 1,
    limit: 10,
    totalItems: 0,
    totalPages: 1,
  });

  const fetchUsers = useCallback(async () => {
    setLoading(true);
    try {
      const response = await getAllUsers(pagination.page, pagination.limit);
  
      if (response.error) {
        let errorMessage: string;
        
        if (typeof response.error === 'string') {
          errorMessage = response.error;
        } else if ('detail' in response.error) {
          if (Array.isArray(response.error.detail)) {
            errorMessage = response.error.detail.map(d => d.msg).join(', ');
          } else {
            errorMessage = response.error.detail || 'Error de validación';
          }
        } else {
          errorMessage = JSON.stringify(response.error);
        }
        
        setError(errorMessage);
      } else if (response.data) {
        setUsers(response.data.data || []);
        setPagination(prev => ({
          ...prev,
          totalItems: response.data?.total_items || 0,
          totalPages: response.data?.total_pages || 1
        }));
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error desconocido");
    }
    setLoading(false);
  }, [pagination.page, pagination.limit]);

  useEffect(() => {
    if (user?.rol !== "admin") {
      setError("No tienes permisos para acceder a esta página");
      setLoading(false);
      return;
    }
    fetchUsers();
  }, [user, pagination.page, fetchUsers]);

  const handlePageChange = (event: React.ChangeEvent<unknown>, newPage: number) => {
    setPagination(prev => ({ ...prev, page: newPage }));
  };

  const handleOpenDialog = (mode: "create" | "update", user?: User) => {
    setFormMode(mode);
    setSelectedUser(user || null);
    setFormData(
      user
        ? {
          email: user.email,
          username: user.username,
          ciudad: user.ciudad || "",
          website: user.website || ""
        }
        : {
          email: "",
          username: "",
          password: "",
          ciudad: "",
          website: ""
        }
    );
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    if (formMode === 'update' && name === 'password') return;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSaveUser = async () => {
    try {
      if (formMode === "create") {
        await createUser(formData as RegisterRequest);
      } else if (selectedUser) {
        await updateUser(selectedUser.id, formData as UpdateProfileRequest);
      }
      fetchUsers();
      handleCloseDialog();
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al guardar usuario");
    }
  };

  const handleDeleteUser = async (userId: number) => {
    if (confirm("¿Estás seguro de eliminar este usuario?")) {
      try {
        await deleteUser(userId);
        fetchUsers();
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al eliminar usuario");
      }
    }
  };

  const columns: GridColDef[] = [
    { 
      field: "id", 
      headerName: "ID", 
      width: 90,
      renderCell: (params) => (
        <Typography variant="body2" color="textSecondary">
          #{params.value}
        </Typography>
      )
    },
    { 
      field: "email", 
      headerName: "Email", 
      width: 220,
      renderCell: (params) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Email color="primary" sx={{ fontSize: 16 }} />
          <Typography variant="body2">
            {params.value}
          </Typography>
        </Box>
      )
    },
    { 
      field: "username", 
      headerName: "Usuario", 
      width: 160,
      renderCell: (params) => (
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Avatar sx={{ width: 24, height: 24, bgcolor: theme.palette.primary.main }}>
            <Person sx={{ fontSize: 14 }} />
          </Avatar>
          <Typography variant="body2">
            {params.value}
          </Typography>
        </Box>
      )
    },
    { 
      field: "rol", 
      headerName: "Rol", 
      width: 120,
      renderCell: (params) => (
        <StatusChip 
          label={params.value} 
          color={params.value === 'admin' ? 'secondary' : 'primary'}
          size="small"
          icon={params.value === 'admin' ? <VerifiedUser sx={{ fontSize: 14 }} /> : undefined}
        />
      )
    },
    { 
      field: "credits", 
      headerName: "Créditos", 
      width: 120,
      renderCell: (params) => (
        <Chip 
          label={params.value} 
          color="primary" 
          variant="outlined"
          size="small"
        />
      )
    },
    { 
      field: "activo", 
      headerName: "Estado", 
      width: 120,
      renderCell: (params) => (
        <StatusChip 
          label={params.value ? 'Activo' : 'Inactivo'} 
          color={params.value ? 'success' : 'error'}
          size="small"
        />
      )
    },
    {
      field: "actions",
      headerName: "Acciones",
      width: 150,
      renderCell: (params) => (
        <Box sx={{ display: 'flex', gap: 1 }}>
          <IconButton 
            onClick={() => handleOpenDialog("update", params.row)}
            sx={{ 
              backgroundColor: theme.palette.primary.light,
              '&:hover': { backgroundColor: theme.palette.primary.main }
            }}
          >
            <Edit sx={{ color: theme.palette.primary.contrastText }} />
          </IconButton>
          <IconButton 
            onClick={() => handleDeleteUser(params.row.id)}
            sx={{ 
              backgroundColor: theme.palette.error.light,
              '&:hover': { backgroundColor: theme.palette.error.main }
            }}
          >
            <Delete sx={{ color: theme.palette.error.contrastText }} />
          </IconButton>
        </Box>
      ),
    },
  ];

  if (loading && users.length === 0) {
    return (
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '80vh',
        background: 'rgba(255, 255, 255, 0.1)',
        backdropFilter: 'blur(10px)',
        borderRadius: '16px'
      }}>
        <CircularProgress size={60} thickness={4} />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 4 }}>
        <Alert severity="error" sx={{ borderRadius: '12px' }}>
          {error}
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 4 }}>
      <Box sx={{ mb: 6 }}>
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Typography 
            variant="h3" 
            sx={{ 
              fontWeight: 'bold', 
              mb: 1,
              background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              display: 'inline-block'
            }}
          >
            Gestión de Usuarios
          </Typography>
          <Typography variant="subtitle1" color="textSecondary">
            Administra todos los usuarios del sistema
          </Typography>
        </motion.div>
      </Box>

      <AdminGlassCard>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
          <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
            Total de usuarios: {pagination.totalItems}
          </Typography>
          <Button
            variant="contained"
            color="primary"
            onClick={() => handleOpenDialog("create")}
            startIcon={<Add />}
            sx={{
              borderRadius: '12px',
              px: 4,
              py: 1.5,
              fontWeight: 'bold'
            }}
          >
            Nuevo Usuario
          </Button>
        </Box>

        <Divider sx={{ mb: 4 }} />

        <Box sx={{ height: 600, width: '100%', mb: 2 }}>
          <StyledDataGrid
            rows={users}
            columns={columns}
            loading={loading}
            pageSizeOptions={[pagination.limit]}
            disableRowSelectionOnClick
            autoHeight
            rowCount={pagination.totalItems}
            paginationMode="server"
            paginationModel={{
              page: pagination.page - 1,
              pageSize: pagination.limit
            }}
            onPaginationModelChange={(model) => {
              setPagination(prev => ({
                ...prev,
                page: model.page + 1
              }));
            }}
            sx={{
              '& .MuiDataGrid-cell': {
                display: 'flex',
                alignItems: 'center'
              }
            }}
          />
        </Box>

        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
          <Pagination
            count={pagination.totalPages}
            page={pagination.page}
            onChange={handlePageChange}
            color="primary"
            showFirstButton
            showLastButton
            sx={{ 
              '& .MuiPaginationItem-root': {
                borderRadius: '8px'
              }
            }}
          />
        </Box>
      </AdminGlassCard>

      <Dialog 
        open={openDialog} 
        onClose={handleCloseDialog}
        PaperProps={{
          sx: {
            borderRadius: '16px',
            background: 'rgba(255, 255, 255, 0.9)',
            backdropFilter: 'blur(10px)'
          }
        }}
      >
        <DialogTitle sx={{ 
          fontWeight: 'bold',
          background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
          color: 'white',
          borderRadius: '16px 16px 0 0'
        }}>
          {formMode === "create" ? "Crear Nuevo Usuario" : "Editar Usuario"}
        </DialogTitle>
        <DialogContent sx={{ pt: 3 }}>
          <TextField
            label="Email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
            required={formMode === "create"}
            InputProps={{
              startAdornment: <Email color="action" sx={{ mr: 1 }} />
            }}
            sx={{ mb: 3 }}
          />
          <TextField
            label="Username"
            name="username"
            value={formData.username}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
            required={formMode === "create"}
            InputProps={{
              startAdornment: <Person color="action" sx={{ mr: 1 }} />
            }}
            sx={{ mb: 3 }}
          />
          {formMode === "create" && (
            <TextField
              label="Password"
              name="password"
              type="password"
              value={(formData as RegisterRequest).password || ""}
              onChange={handleInputChange}
              fullWidth
              margin="normal"
              required
              InputProps={{
                startAdornment: <Lock color="action" sx={{ mr: 1 }} />
              }}
              sx={{ mb: 3 }}
            />
          )}
          <TextField
            label="Ciudad"
            name="ciudad"
            value={formData.ciudad || ""}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
            InputProps={{
              startAdornment: <LocationOn color="action" sx={{ mr: 1 }} />
            }}
            sx={{ mb: 3 }}
          />
          <TextField
            label="Website"
            name="website"
            value={formData.website || ""}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
            InputProps={{
              startAdornment: <Language color="action" sx={{ mr: 1 }} />
            }}
          />
        </DialogContent>
        <DialogActions sx={{ p: 3 }}>
          <Button 
            onClick={handleCloseDialog} 
            variant="outlined"
            sx={{ borderRadius: '12px', px: 3 }}
          >
            Cancelar
          </Button>
          <Button 
            onClick={handleSaveUser} 
            variant="contained" 
            color="primary"
            sx={{ borderRadius: '12px', px: 3 }}
          >
            {formMode === "create" ? "Crear Usuario" : "Guardar Cambios"}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={!!error}
        autoHideDuration={6000}
        onClose={() => setError(null)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
        >
          <Alert 
            severity="error" 
            onClose={() => setError(null)}
            sx={{ 
              borderRadius: '12px',
              boxShadow: theme.shadows[6]
            }}
          >
            {error}
          </Alert>
        </motion.div>
      </Snackbar>
    </Box>
  );
};

export default AdminUsersPage;

// frontend/src/app/page.tsx
"use client";

import { useAuth } from "@/lib/auth/context";
import fetchAPI from "@/lib/api";
import Link from "next/link";
import { useState, useEffect, useCallback } from "react";
import {
  Button,
  Snackbar,
  Alert,
  Card,
  CardContent,
  Typography,
  Box,
  Container,
  Avatar,
  Chip,
  Divider,
  Grid,
  useTheme,
  styled,
  TextField,
  Checkbox,
  FormControlLabel,
} from "@mui/material";
import {
  RocketLaunch,
  Api,
  Security,
  CreditScore,
  CheckCircle,
  ArrowForward,
  Bolt,
  LockOpen,
  Info,
  Cancel,
  Star,
} from "@mui/icons-material";
import { User, Coupon, InfoResponse, Badge } from "@/lib/types";
import { motion, AnimatePresence } from "framer-motion";
import SEO from "@/components/seo/MetaTags";

// Styled Components
const HeroSection = styled(Box)(({ theme }) => ({
  background: `linear-gradient(135deg, ${theme.palette.primary.dark} 0%, ${theme.palette.secondary.main} 100%)`,
  color: theme.palette.primary.contrastText,
  borderRadius: "32px",
  padding: theme.spacing(10),
  textAlign: "center",
  position: "relative",
  overflow: "hidden",
  boxShadow: theme.shadows[15],
  marginBottom: theme.spacing(8),
  "&:before": {
    content: '""',
    position: "absolute",
    top: -100,
    right: -100,
    width: 300,
    height: 300,
    background: "rgba(255, 255, 255, 0.2)",
    borderRadius: "50%",
    zIndex: 0,
  },
}));

const FeatureCard = styled(Card)(({ theme }) => ({
  borderRadius: "16px",
  boxShadow: theme.shadows[8],
  transition: "transform 0.3s ease, box-shadow 0.3s ease",
  "&:hover": {
    transform: "translateY(-8px)",
    boxShadow: theme.shadows[12],
  },
  padding: theme.spacing(4),
  textAlign: "center",
}));

const ActionButton = styled(Button)(({ theme }) => ({
  borderRadius: "12px",
  padding: theme.spacing(2, 4),
  fontWeight: "bold",
  textTransform: "none",
  fontSize: "1.1rem",
  boxShadow: theme.shadows[4],
  "&:hover": {
    boxShadow: theme.shadows[8],
  },
}));

const EndpointButton = styled(Button)(({ theme }) => ({
  borderRadius: "12px",
  padding: theme.spacing(1.5, 3),
  fontWeight: "bold",
  textTransform: "none",
  fontSize: "1rem",
  width: "100%",
}));

const InteractiveCard = styled(Card)(({ theme }) => ({
  borderRadius: "16px",
  boxShadow: theme.shadows[6],
  padding: theme.spacing(4),
  background: "rgba(255, 255, 255, 0.95)",
  backdropFilter: "blur(10px)",
}));

export default function SplashPage() {
  const { user, credits, setCredits, setGamification, coupons, setCoupons } = useAuth();
  const theme = useTheme();

  // Landing Page States
  const [localCredits, setLocalCredits] = useState<number>(0);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState<"success" | "error">("success");

  // Ejemplos Page States
  const [registroFields, setRegistroFields] = useState({ name: "", email: "", phone: "" });
  const [newsletterSubs, setNewsletterSubs] = useState({ tech: false, marketing: false, design: false });
  const [encuestaAnswers, setEncuestaAnswers] = useState<number[]>([]);
  const [checkinDone, setCheckinDone] = useState(false);
  const [icpFields, setIcpFields] = useState({ company: "", role: "", industry: "" });
  const [tutorialLessons, setTutorialLessons] = useState([false, false, false]);
  const [message, setMessage] = useState<string | null>(null);

  // Landing Page Effects
  useEffect(() => {
    if (!user) {
      const storedCredits = localStorage.getItem("anonCredits");
      const initialCredits = storedCredits ? parseInt(storedCredits) : 10;
      setLocalCredits(initialCredits);
      setCredits(initialCredits);
    }
  }, [user, setCredits]);

  // Ejemplos Page Effects
  const updateGamification = useCallback(async () => {
    const { data } = await fetchAPI<InfoResponse>("/whoami");
    if (data?.gamification) {
      const totalPoints = data.gamification.reduce((sum, g) => sum + g.points, 0);
      const badges = data.gamification.map((g) => g.badge).filter((b) => b !== null) as Badge[];
      setGamification({ points: totalPoints, badges });
    }
  }, [setGamification]);

  useEffect(() => {
    updateGamification();
  }, [updateGamification]);

  // Landing Page Handlers
  const handleTestCreditConsumption = async () => {
    try {
      const response = await fetchAPI("/v1/test/test-credit-consumption", { method: "GET" });
      if (response.error) {
        setSnackbarMessage(typeof response.error === "string" ? response.error : "Error desconocido");
        setSnackbarSeverity("error");
        setSnackbarOpen(true);
      } else {
        if (user) {
          const userResponse = await fetchAPI<User>("/v1/users/me");
          if (userResponse.data) {
            setCredits(userResponse.data.credits);
          }
        } else {
          const newCredits = localCredits - 1;
          setLocalCredits(newCredits);
          setCredits(newCredits);
          localStorage.setItem("anonCredits", newCredits.toString());
        }
        setSnackbarMessage("Crédito consumido exitosamente");
        setSnackbarSeverity("success");
        setSnackbarOpen(true);
      }
    } catch (err) {
      console.error("Error al consumir crédito:", err);
      setSnackbarMessage("Error al consumir crédito");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };

  const handleNoLoginTest = async () => {
    try {
      const response = await fetchAPI("/v1/test/no-login/", { method: "GET" });
      if (response.error) {
        setSnackbarMessage(typeof response.error === "string" ? response.error : "Error desconocido");
        setSnackbarSeverity("error");
      } else {
        setSnackbarMessage("Consulta sin login realizada: " + (response.data as { message: string }).message);
        setSnackbarSeverity("success");
        if (!user) {
          const newCredits = localCredits - 1;
          setLocalCredits(newCredits);
          setCredits(newCredits);
          localStorage.setItem("anonCredits", newCredits.toString());
        }
      }
      setSnackbarOpen(true);
    } catch (err) {
      console.error("Error en consulta sin login:", err);
      setSnackbarMessage("Error en consulta sin login");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };

  const handleRestrictedTest = async () => {
    try {
      const response = await fetchAPI("/v1/test/restricted", { method: "GET" });
      if (response.error) {
        setSnackbarMessage(typeof response.error === "string" ? response.error : "Error desconocido");
        setSnackbarSeverity("error");
      } else {
        setSnackbarMessage("Consulta restringida realizada: " + (response.data as { message: string }).message);
        setSnackbarSeverity("success");
      }
      setSnackbarOpen(true);
    } catch (err) {
      console.error("Error en consulta restringida:", err);
      setSnackbarMessage("Error en consulta restringida");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };

  const handleInfo = async () => {
    try {
      const response = await fetchAPI("/whoami", { method: "GET" });
      if (response.error) {
        setSnackbarMessage(typeof response.error === "string" ? response.error : "Error desconocido");
        setSnackbarSeverity("error");
      } else {
        setSnackbarMessage("Información obtenida: " + JSON.stringify(response.data));
        setSnackbarSeverity("success");
      }
      setSnackbarOpen(true);
    } catch (err) {
      console.error("Error al obtener información:", err);
      setSnackbarMessage("Error al obtener información");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };

  const handleProgress = async () => {
    try {
      const response = await fetchAPI("/v1/gamification/me", { method: "GET" });
      if (response.error) {
        setSnackbarMessage(typeof response.error === "string" ? response.error : "Error desconocido");
        setSnackbarSeverity("error");
      } else {
        setSnackbarMessage("Información obtenida: " + JSON.stringify(response.data));
        setSnackbarSeverity("success");
      }
      setSnackbarOpen(true);
    } catch (err) {
      console.error("Error al obtener información:", err);
      setSnackbarMessage("Error al obtener información");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
    setMessage(null);
  };

  // Ejemplos Page Handlers
  const handleGenerateCoupon = async () => {
    try {
      const { data } = await fetchAPI<Coupon>("/v1/coupons/generate-demo-coupon?credits=5", {
        method: "POST",
      });
      if (data) {
        setCoupons([...coupons, data]);
        setMessage("Cupón generado");
      } else {
        setMessage("Error: No se recibió el cupón");
      }
    } catch (err) {
      setMessage("Error al generar cupón");
      console.error(err);
    }
  };

  const handleRegistroChange = async (field: keyof typeof registroFields, value: string) => {
    setRegistroFields((prev) => ({ ...prev, [field]: value }));
    if (value) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 1 } });
      updateGamification();
      setMessage("¡Ganaste 1 punto por completar un campo!");
    }
    if (registroFields.name && registroFields.email && registroFields.phone) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 2 } });
      updateGamification();
      setMessage("¡Completaste el registro y ganaste 10 puntos!");
    }
  };

  const handleNewsletterChange = async (newsletter: keyof typeof newsletterSubs) => {
    setNewsletterSubs((prev) => ({ ...prev, [newsletter]: !prev[newsletter] }));
    if (!newsletterSubs[newsletter]) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 3 } });
      updateGamification();
      setMessage("¡Ganaste 2 puntos por suscribirte a una newsletter!");
    }
    if (newsletterSubs.tech && newsletterSubs.marketing && newsletterSubs.design) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 4 } });
      updateGamification();
      setMessage("¡Te suscribiste a todas las newsletters y ganaste 15 puntos!");
    }
  };

  const handleEncuestaAnswer = async (answer: number) => {
    setEncuestaAnswers((prev) => [...prev, answer]);
    await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 5 } });
    updateGamification();
    setMessage("¡Ganaste 1 punto por responder una pregunta!");
  };

  const handleEncuestaComplete = async () => {
    if (encuestaAnswers.length === 3) {
      try {
        await fetchAPI("/v1/gamification/events", {
          method: "POST",
          data: { event_type_id: 6 },
        });
        updateGamification();
        const { data: coupon } = await fetchAPI<Coupon>("/v1/coupons/", {
          method: "POST",
          data: {
            name: "Recompensa Encuesta",
            description: "Cupón por completar la encuesta",
            credits: 10,
            active: true,
            unique_identifier: `SURVEY-${Date.now()}`,
          },
        });
        if (coupon) {
          setCoupons([...coupons, coupon]);
          setMessage("¡Completaste la encuesta y ganaste 10 puntos + un cupón de 10 créditos!");
        } else {
          setMessage("¡Completaste la encuesta y ganaste 10 puntos!");
        }
      } catch (err) {
        setMessage("Error al procesar la encuesta");
        console.error(err);
      }
    }
  };

  const handleCheckin = async () => {
    setCheckinDone(true);
    await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 7 } });
    updateGamification();
    setMessage("¡Ganaste 5 puntos por hacer check-in!");
  };

  const handleIcpChange = async (field: keyof typeof icpFields, value: string) => {
    setIcpFields((prev) => ({ ...prev, [field]: value }));
    if (value) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 8 } });
      updateGamification();
      setMessage("¡Ganaste 1 punto por completar un campo del ICP!");
    }
    if (icpFields.company && icpFields.role && icpFields.industry) {
      await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 9 } });
      updateGamification();
      setMessage("¡Completaste tu ICP y ganaste 10 puntos!");
    }
  };

  const handleLessonComplete = async (index: number) => {
    setTutorialLessons((prev) => {
      const newLessons = [...prev];
      newLessons[index] = true;
      return newLessons;
    });
    await fetchAPI("/v1/gamification/events", { method: "POST", data: { event_type_id: 10 } });
    updateGamification();
    setMessage("¡Ganaste 3 puntos por completar una lección!");
  };

  return (
    <>
      <SEO
        title="Neptuno - Potencia tu Negocio con APIs y Gamificación"
        description="Construye aplicaciones escalables con Neptuno: gestiona créditos, APIs y gamificación para maximizar el engagement y las conversiones."
        keywords="SaaS, APIs, gamificación, créditos, engagement, escalabilidad"
      />
      <Box sx={{ minHeight: "100vh", background: "linear-gradient(135deg, #f5f7fa 0%, #e3e8f2 100%)", pb: 12 }}>
        <Container maxWidth="lg">
          {/* Hero Section */}
          <HeroSection>
            <motion.div
              initial={{ opacity: 0, y: -30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
            >
              <Typography
                variant="h2"
                component="h1"
                sx={{
                  fontWeight: 800,
                  mb: 3,
                  fontSize: { xs: "2.8rem", md: "4.5rem" },
                  lineHeight: 1.2,
                }}
              >
                Neptuno: Tu SaaS para <br />
                <span style={{ color: theme.palette.secondary.light }}>APIs y Gamificación</span>
              </Typography>
              <Typography
                variant="h5"
                sx={{
                  mb: 5,
                  maxWidth: "900px",
                  mx: "auto",
                  opacity: 0.9,
                  fontWeight: 300,
                }}
              >
                Crea aplicaciones modernas con nuestras APIs robustas, gestiona créditos fácilmente y aumenta el engagement con gamificación integrada. ¡Empieza gratis hoy!
              </Typography>
              {user ? (
                <Link href="/user/dashboard" passHref>
                  <ActionButton
                    variant="contained"
                    color="secondary"
                    size="large"
                    endIcon={<ArrowForward />}
                  >
                    Ir al Dashboard
                  </ActionButton>
                </Link>
              ) : (
                <Box sx={{ display: "flex", gap: 3, justifyContent: "center", flexWrap: "wrap" }}>
                  <Link href="/user/auth/#register" passHref>
                    <ActionButton variant="contained" color="secondary" size="large">
                      Comienza Gratis
                    </ActionButton>
                  </Link>
                  <Link href="/user/auth/#login" passHref>
                    <ActionButton
                      variant="outlined"
                      color="inherit"
                      size="large"
                      sx={{ borderWidth: "2px", "&:hover": { borderWidth: "2px" } }}
                    >
                      Iniciar Sesión
                    </ActionButton>
                  </Link>
                </Box>
              )}
            </motion.div>
          </HeroSection>

          {/* Features Section */}
          <Box sx={{ mb: 12, textAlign: "center" }}>
            <Typography
              variant="h3"
              sx={{ fontWeight: 700, mb: 6, color: theme.palette.text.primary }}
            >
              Todo lo que Necesitas para Escalar
            </Typography>
            <Grid container spacing={4}>
              <Grid item xs={12} md={4}>
                <motion.div whileHover={{ scale: 1.05 }}>
                  <FeatureCard>
                    <Avatar
                      sx={{
                        bgcolor: theme.palette.primary.light,
                        width: 70,
                        height: 70,
                        mb: 3,
                        mx: "auto",
                      }}
                    >
                      <CreditScore sx={{ fontSize: 36 }} />
                    </Avatar>
                    <Typography variant="h5" sx={{ fontWeight: 600, mb: 2 }}>
                      Gestión de Créditos
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      Controla tus créditos con facilidad y prueba nuestras APIs con 10 créditos gratis al registrarte.
                    </Typography>
                  </FeatureCard>
                </motion.div>
              </Grid>
              <Grid item xs={12} md={4}>
                <motion.div whileHover={{ scale: 1.05 }}>
                  <FeatureCard>
                    <Avatar
                      sx={{
                        bgcolor: theme.palette.info.light,
                        width: 70,
                        height: 70,
                        mb: 3,
                        mx: "auto",
                      }}
                    >
                      <Api sx={{ fontSize: 36 }} />
                    </Avatar>
                    <Typography variant="h5" sx={{ fontWeight: 600, mb: 2 }}>
                      APIs de Alto Rendimiento
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      Integra endpoints rápidos y personalizables para potenciar tus aplicaciones.
                    </Typography>
                  </FeatureCard>
                </motion.div>
              </Grid>
              <Grid item xs={12} md={4}>
                <motion.div whileHover={{ scale: 1.05 }}>
                  <FeatureCard>
                    <Avatar
                      sx={{
                        bgcolor: theme.palette.success.light,
                        width: 70,
                        height: 70,
                        mb: 3,
                        mx: "auto",
                      }}
                    >
                      <Security sx={{ fontSize: 36 }} />
                    </Avatar>
                    <Typography variant="h5" sx={{ fontWeight: 600, mb: 2 }}>
                      Escalabilidad Segura
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      Crece sin límites con un framework seguro diseñado para tu éxito.
                    </Typography>
                  </FeatureCard>
                </motion.div>
              </Grid>
            </Grid>
          </Box>

          {/* Interactive Demo Section */}
          <Box sx={{ mb: 12 }}>
            <Typography
              variant="h3"
              sx={{ fontWeight: 700, mb: 6, textAlign: "center", color: theme.palette.text.primary }}
            >
              Prueba Neptuno en Acción
            </Typography>
            <Grid container spacing={4}>
              {/* Credits Demo */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Sistema de Créditos
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Experimenta nuestro sistema de créditos: realiza una acción y consume un crédito en tiempo real.
                  </Typography>
                  <Typography variant="h6" sx={{ mb: 2 }}>
                    <Box component="span" sx={{ color: theme.palette.primary.main }}>
                      {user ? credits : localCredits} créditos
                    </Box>{" "}
                    disponibles
                  </Typography>
                  <ActionButton
                    variant="contained"
                    color="primary"
                    size="large"
                    onClick={handleTestCreditConsumption}
                    startIcon={<Bolt />}
                  >
                    Consumir 1 Crédito
                  </ActionButton>
                </InteractiveCard>
              </Grid>

              {/* API Endpoints Demo */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Explora Nuestros Endpoints
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Interactúa con nuestras APIs en tiempo real. Cada acción consume 1 crédito.
                  </Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <EndpointButton
                        variant="contained"
                        color="info"
                        onClick={handleNoLoginTest}
                        startIcon={<LockOpen />}
                      >
                        /v1/test/no-login/
                      </EndpointButton>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <EndpointButton
                        variant="contained"
                        color="success"
                        onClick={handleRestrictedTest}
                        startIcon={<Security />}
                      >
                        /v1/test/restricted
                      </EndpointButton>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <EndpointButton
                        variant="contained"
                        color="secondary"
                        onClick={handleInfo}
                        startIcon={<Info />}
                      >
                        /v1/test/whoami
                      </EndpointButton>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <EndpointButton
                        variant="contained"
                        color="secondary"
                        onClick={handleProgress}
                        startIcon={<Info />}
                      >
                        /progress
                      </EndpointButton>
                    </Grid>
                  </Grid>
                </InteractiveCard>
              </Grid>

              {/* Gamification Demo */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Gamificación: Registro
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Completa el formulario y gana puntos para desbloquear recompensas.
                  </Typography>
                  <Box component="form" sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                    <TextField
                      label="Nombre"
                      value={registroFields.name}
                      onChange={(e) => handleRegistroChange("name", e.target.value)}
                      variant="outlined"
                    />
                    <TextField
                      label="Email"
                      value={registroFields.email}
                      onChange={(e) => handleRegistroChange("email", e.target.value)}
                      variant="outlined"
                    />
                    <TextField
                      label="Teléfono"
                      value={registroFields.phone}
                      onChange={(e) => handleRegistroChange("phone", e.target.value)}
                      variant="outlined"
                    />
                  </Box>
                </InteractiveCard>
              </Grid>

              {/* Newsletter Subscription */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Suscripción a Newsletters
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Suscríbete y acumula puntos para personalizar tu experiencia.
                  </Typography>
                  <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                    <FormControlLabel
                      control={<Checkbox checked={newsletterSubs.tech} onChange={() => handleNewsletterChange("tech")} />}
                      label="Tecnología"
                    />
                    <FormControlLabel
                      control={
                        <Checkbox
                          checked={newsletterSubs.marketing}
                          onChange={() => handleNewsletterChange("marketing")}
                        />
                      }
                      label="Marketing"
                    />
                    <FormControlLabel
                      control={
                        <Checkbox checked={newsletterSubs.design} onChange={() => handleNewsletterChange("design")} />
                      }
                      label="Diseño"
                    />
                  </Box>
                </InteractiveCard>
              </Grid>

              {/* Survey Demo */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Encuesta Rápida
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Responde preguntas y gana puntos + un cupón al completar.
                  </Typography>
                  <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                    <Button variant="outlined" onClick={() => handleEncuestaAnswer(1)}>
                      Pregunta 1
                    </Button>
                    <Button variant="outlined" onClick={() => handleEncuestaAnswer(2)}>
                      Pregunta 2
                    </Button>
                    <Button variant="outlined" onClick={() => handleEncuestaAnswer(3)}>
                      Pregunta 3
                    </Button>
                    <ActionButton
                      variant="contained"
                      onClick={handleEncuestaComplete}
                      disabled={encuestaAnswers.length !== 3}
                    >
                      Completar Encuesta
                    </ActionButton>
                  </Box>
                </InteractiveCard>
              </Grid>

              {/* Check-in Demo */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Check-in Diario
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Registra tu actividad y gana 5 puntos al instante.
                  </Typography>
                  <ActionButton
                    variant="contained"
                    onClick={handleCheckin}
                    disabled={checkinDone}
                    startIcon={<Star />}
                  >
                    {checkinDone ? "Check-in Realizado" : "Hacer Check-in"}
                  </ActionButton>
                </InteractiveCard>
              </Grid>

              {/* ICP Demo */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Perfil de Cliente Ideal
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Define tu perfil y desbloquea puntos para personalizar tu experiencia.
                  </Typography>
                  <Box component="form" sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                    <TextField
                      label="Empresa"
                      value={icpFields.company}
                      onChange={(e) => handleIcpChange("company", e.target.value)}
                      variant="outlined"
                    />
                    <TextField
                      label="Rol"
                      value={icpFields.role}
                      onChange={(e) => handleIcpChange("role", e.target.value)}
                      variant="outlined"
                    />
                    <TextField
                      label="Industria"
                      value={icpFields.industry}
                      onChange={(e) => handleIcpChange("industry", e.target.value)}
                      variant="outlined"
                    />
                  </Box>
                </InteractiveCard>
              </Grid>

              {/* Tutorial Demo */}
              <Grid item xs={12} md={6}>
                <InteractiveCard>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Tutorial Interactivo
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Completa lecciones y gana 3 puntos por cada una.
                  </Typography>
                  <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                    {tutorialLessons.map((completed, index) => (
                      <Button
                        key={index}
                        variant="outlined"
                        onClick={() => handleLessonComplete(index)}
                        disabled={completed}
                      >
                        {completed ? `Lección ${index + 1} Completada` : `Completar Lección ${index + 1}`}
                      </Button>
                    ))}
                  </Box>
                </InteractiveCard>
              </Grid>

              {/* Coupon Generation Demo */}
              <Grid item xs={12}>
                <InteractiveCard sx={{ textAlign: "center" }}>
                  <Typography variant="h5" sx={{ fontWeight: 600, mb: 2, color: theme.palette.primary.main }}>
                    Genera un Cupón
                  </Typography>
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
                    Crea un cupón de 5 créditos para usar en nuestra plataforma.
                  </Typography>
                  <ActionButton
                    variant="contained"
                    color="secondary"
                    onClick={handleGenerateCoupon}
                    startIcon={<Star />}
                  >
                    Generar Cupón
                  </ActionButton>
                </InteractiveCard>
              </Grid>
            </Grid>
          </Box>

          {/* Final CTA */}
          <Box sx={{ textAlign: "center", mb: 8 }}>
            <Typography
              variant="h3"
              sx={{ fontWeight: 700, mb: 3, color: theme.palette.text.primary }}
            >
              ¿Listo para Transformar tu Negocio?
            </Typography>
            <Typography variant="h6" color="text.secondary" sx={{ mb: 4, maxWidth: "800px", mx: "auto" }}>
              Únete a miles de desarrolladores que ya están creando aplicaciones modernas con Neptuno. Prueba nuestras APIs, gestiona créditos y aumenta el engagement con gamificación. ¡Comienza gratis ahora!
            </Typography>
            <Link href="/user/auth/#register" passHref>
              <ActionButton
                variant="contained"
                color="secondary"
                size="large"
                endIcon={<RocketLaunch />}
              >
                Empieza Gratis
              </ActionButton>
            </Link>
          </Box>
        </Container>

        {/* Snackbar Notifications */}
        <AnimatePresence>
          {(snackbarOpen || message) && (
            <Snackbar
              open={snackbarOpen || !!message}
              autoHideDuration={6000}
              onClose={handleSnackbarClose}
              anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
            >
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 20 }}
              >
                <Alert
                  onClose={handleSnackbarClose}
                  severity={snackbarSeverity || (message?.includes("Error") ? "error" : "success")}
                  sx={{
                    width: "100%",
                    borderRadius: "12px",
                    boxShadow: theme.shadows[6],
                  }}
                  iconMapping={{
                    success: <CheckCircle fontSize="inherit" />,
                    error: <Cancel fontSize="inherit" />,
                  }}
                >
                  {snackbarMessage || message}
                </Alert>
              </motion.div>
            </Snackbar>
          )}
        </AnimatePresence>
      </Box>
    </>
  );
}


// frontend/src/app/layout.tsx
// Página de layout general de la app
"use client";

import { Metadata } from 'next';
import { ReactNode } from "react";
import { usePathname } from "next/navigation";
import { AuthProvider } from "@/lib/auth/context";
import Navbar from "@/components/web/Navbar";
import Footer from "@/components/web/Footer";
import "../app/global.css";

export default function RootLayout({ children }: { children: ReactNode }) {
  const pathname = usePathname();
  const isAuthPage = pathname?.startsWith("/user/auth") || pathname?.startsWith("/(auth)");

  const metadata: Metadata = {
    icons: {
      icon: '/favicon.ico',
      shortcut: '/favicon-16x16.png',
      apple: '/apple-touch-icon.png',
    },
  };

  return (
    <html lang="es">
      <body className="min-h-screen flex flex-col bg-gray-100">
        <AuthProvider>
          {!isAuthPage && <Navbar />}
          <main className="flex-grow w-full pt-20 pb-16 md:pb-0">
          {/* <main className="flex-grow w-full pt-20"> {/* Added pt-16 for navbar spacing */}
            {children}
          </main>
          {!isAuthPage && <Footer />}
        </AuthProvider>
      </body>
    </html>
  );
}

/* src/app/global.css */
/* src/app/global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ========== PALETA DE COLORES Y VARIABLES ========== */
:root {
  /* Colores base */
  --white-soft: #f8f9fa;
  --black-soft: #212529;
  --primary: #0d6efd;
  --primary-hover: #0b5ed7;
  --gray: #adb5bd;
  --gray-light: #dee2e6;
  --gray-dark: #495057;
  
  /* Estados */
  --success: #198754;
  --success-hover: #157347;
  --warning: #ffc107;
  --warning-hover: #ffca2c;
  --danger: #dc3545;
  --danger-hover: #bb2d3b;
  
  /* Variables funcionales */
  --background: var(--white-soft);
  --foreground: var(--black-soft);
  --border: var(--gray-light);
  --secondary: var(--gray);
}

/* Tema oscuro */
[data-theme="dark"] {
  --background: var(--black-soft);
  --foreground: var(--white-soft);
  --border: var(--gray-dark);
  --secondary: var(--gray);
  --primary: #3d8bfd;
  --primary-hover: #4d9cfe;
}

/* ========== ESTILOS BASE ========== */
body {
  background: var(--background);
  color: var(--foreground);
  font-family: 'Inter', system-ui, -apple-system, sans-serif;
  margin: 0;
  padding: 0;
  line-height: 1.5;
}

/* ========== COMPONENTES PRINCIPALES ========== */
/* Tarjetas */
.card {
  background: var(--background);
  border: 1px solid var(--border);
  border-radius: 0.75rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
}

.card:hover {
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.glass-card {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 0.75rem;
}

.gradient-card {
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);
  color: white;
  border-radius: 0.75rem;
}

/* Botones */
.btn {
  padding: 0.5rem 1.25rem;
  border-radius: 0.5rem;
  font-weight: 500;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.btn-primary {
  background-color: var(--primary);
  color: white;
}

.btn-primary:hover {
  background-color: var(--primary-hover);
  transform: translateY(-1px);
}

.btn-outline {
  background: transparent;
  border: 1px solid var(--border);
  color: var(--foreground);
}

.btn-outline:hover {
  background: rgba(0, 0, 0, 0.05);
}

/* Formularios */
.input {
  background: var(--background);
  border: 1px solid var(--border);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  transition: all 0.2s ease;
}

.input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.25);
}

/* Notificaciones */
.alert {
  padding: 1rem;
  border-radius: 0.5rem;
  margin: 0.5rem 0;
}

.alert-success {
  background-color: rgba(25, 135, 84, 0.1);
  border: 1px solid var(--success);
  color: var(--success);
}

.alert-error {
  background-color: rgba(220, 53, 69, 0.1);
  border: 1px solid var(--danger);
  color: var(--danger);
}

/* ========== NAVBAR Y COMPONENTES RELACIONADOS ========== */
.app-logo {
  background: linear-gradient(45deg, var(--primary) 30%, var(--secondary) 90%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.nav-link {
  transition: all 0.2s ease;
  transform-origin: center;
}

.nav-link:hover {
  transform: scale(1.05);
  opacity: 0.9;
}

.active-link {
  position: relative;
  color: var(--primary) !important;
}

.active-link::after {
  content: '';
  position: absolute;
  bottom: -4px;
  left: 0;
  right: 0;
  height: 2px;
  background: var(--primary);
  border-radius: 2px;
}

.notification-icon {
  position: relative;
  padding: 8px;
}

.notification-badge {
  position: absolute;
  top: -4px;
  right: -4px;
  font-size: 0.75rem;
  min-width: 20px;
  height: 20px;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  border: 1px solid;
}

.credits-badge {
  background: rgba(255, 165, 0, 0.2);
  color: #FFA500;
  border-color: #FFA500;
}

.points-badge {
  background: rgba(255, 215, 0, 0.2);
  color: #FFD700;
  border-color: #FFD700;
}

.badges-badge {
  background: rgba(0, 128, 0, 0.2);
  color: #008000;
  border-color: #008000;
}

.user-avatar .MuiAvatar-root {
  transition: transform 0.2s ease;
}

.user-avatar:hover .MuiAvatar-root {
  transform: scale(1.1);
}

.start-button {
  border-radius: 20px;
  padding: 8px 20px;
  text-transform: none;
  font-weight: 600;
}

/* ========== UTILIDADES ========== */
.text-primary {
  color: var(--primary);
}

.bg-primary {
  background-color: var(--primary);
}

.border-primary {
  border-color: var(--primary);
}

/* ========== ANIMACIONES ========== */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.fade-in {
  animation: fadeIn 0.3s ease-out forwards;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-spinner {
  border: 3px solid rgba(0, 0, 0, 0.1);
  border-top: 3px solid var(--primary);
  border-radius: 50%;
  width: 24px;
  height: 24px;
  animation: spin 1s linear infinite;
}

/* ========== RESPONSIVE ========== */
@media (max-width: 768px) {
  .notification-icon {
    padding: 6px;
  }
  
  .notification-badge {
    min-width: 18px;
    height: 18px;
    font-size: 0.65rem;
  }
  
  .nav-link {
    padding: 6px 12px;
    font-size: 0.9rem;
  }
  
  .user-avatar .MuiAvatar-root {
    width: 32px !important;
    height: 32px !important;
  }
}

/* ========== COMPONENTES MUI ========== */
.MuiDrawer-paper {
  width: 250px;
  padding: 16px 0;
  background: rgba(255, 255, 255, 0.95) !important;
}

// src/app/user/dashboard/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { Dialog, DialogTitle, DialogContent, DialogActions, Table, TableBody, TableCell, TableHead, TableRow, Link } from "@mui/material";
import { motion, AnimatePresence } from "framer-motion";
import {
  Box, Grid, Card, CardContent, CardHeader, TextField, Button, Accordion, AccordionSummary, AccordionDetails, Typography, IconButton,
  Snackbar, Alert, MenuItem, Avatar, Chip, Divider, List, ListItem, ListItemAvatar, ListItemText, Badge, Paper, Tabs, Tab, useTheme, styled
} from "@mui/material";
import {
  AccountCircle, Lock, Payment, CreditCard, AddCircle, Delete, ExpandMore, Edit, History, AttachMoney, Security, Logout, Person,
  LocationOn, Language, Star, StarBorder,
  LocalActivity
} from "@mui/icons-material";
import { Integration } from "@/lib/types";

// Styled Components
const GradientCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%)`,
  color: 'white',
  borderRadius: '16px',
  boxShadow: theme.shadows[4]
}));

const GlassCard = styled(Card)(({ theme }) => ({
  background: 'rgba(248, 249, 250, 0.8)',
  backdropFilter: 'blur(10px)',
  border: '1px solid rgba(222, 226, 230, 0.5)',
  borderRadius: '16px',
  boxShadow: theme.shadows[2]
}));

interface PaymentMethod {
  id: number;
  payment_type: string;
  details: string;
  is_default: boolean;
}

interface CreditTransaction {
  id: number;
  amount: number;
  transaction_type: string;
  payment_amount?: number;
  payment_method?: string;
  payment_status: string;
  timestamp: string;
}

interface PaymentProvider {
  id: number;
  name: string;
  active: boolean;
}

export default function UserDashboard() {
  const { user, logout, updateProfile } = useAuth();
  const router = useRouter();
  const theme = useTheme();
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({ email: "", username: "", ciudad: "", website: "" });
  const [transactions, setTransactions] = useState<CreditTransaction[]>([]);
  const [methods, setMethods] = useState<PaymentMethod[]>([]);
  const [newMethod, setNewMethod] = useState({ payment_type: "", details: "", is_default: false });
  const [paymentProviders, setPaymentProviders] = useState<PaymentProvider[]>([]);
  const [credits, setCredits] = useState("");
  const [paymentAmount, setPaymentAmount] = useState("");
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [tabValue, setTabValue] = useState(0);
  const [editMethod, setEditMethod] = useState<PaymentMethod | null>(null);
  const [deleteMethodId, setDeleteMethodId] = useState<number | null>(null);
  const { coupons, setCoupons } = useAuth();
  const [newIntegration, setNewIntegration] = useState({ name: "", webhook_url: "", event_type: "" });
  const [integrations, setIntegrations] = useState<Integration[]>([]);



  // Añadir este useEffect justo después de los useState existentes
  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const { data } = await fetchAPI<any[]>("/v1/coupons/me"); // Ajusta el endpoint según tu API
        setCoupons(data || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al cargar cupones");
      }
    };
    fetchCoupons();
  }, [setCoupons]);

  // Actualizar la función handleRedeem
  const handleRedeem = async (couponId: number) => {
    try {
      const { data } = await fetchAPI<any>(`/v1/coupons/redeem/${couponId}`, {
        method: "POST",
      });
      if (data) {
        setCoupons(coupons.map((c) => (c.id === couponId ? data : c)));
        const { data: info } = await fetchAPI<any>("/whoami");
        setCredits(info.credits);
        setSuccess("Cupón canjeado exitosamente");
      } else {
        setError("No se pudo canjear el cupón");
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al canjear cupón");
    }
  };

  // Actualizar el contenido de la pestaña "Coupons" (tabValue === 2)


  useEffect(() => {
    if (!user) {
      router.push("/");
      return;
    }
    setFormData({
      email: user.email || "",
      username: user.username || "",
      ciudad: user.ciudad || "",
      website: user.website || "",
    });

    const fetchData = async () => {
      try {
        const [transRes, methRes, providersRes, integrationsRes] = await Promise.all([
          fetchAPI<CreditTransaction[]>("/v1/payments/transactions"),
          fetchAPI<PaymentMethod[]>("/v1/payments/methods"),
          fetchAPI<PaymentProvider[]>("/v1/payment-providers"),
          fetchAPI<Integration[]>("/v1/integrations/"),
        ]);
        setTransactions(transRes.data || []);
        setMethods(methRes.data || []);
        setPaymentProviders(providersRes.data?.filter(p => p.active) || []);
        setIntegrations(integrationsRes.data || []);
        if (providersRes.data && providersRes.data.length > 0) {
          setNewMethod(prev => ({ ...prev, payment_type: providersRes.data.find(p => p.active)?.name || "" }));
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al cargar datos");
      }
    };
    fetchData();
  }, [user, router, credits]);

  const handleAddIntegration = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<Integration>("/v1/integrations/", {
        method: "POST",
        data: { name: newIntegration.name, webhook_url: newIntegration.webhook_url, event_type: newIntegration.event_type },
      });
      setIntegrations([...integrations, data!]);
      setNewIntegration({ name: "", webhook_url: "", event_type: "" });
      setSuccess("Integración creada con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al crear integración");
    }
  };

  const handleDeleteIntegration = async (id: number) => {
    try {
      await fetchAPI(`/v1/integrations/${id}`, { method: "DELETE" });
      setIntegrations(integrations.filter((i) => i.id !== id));
      setSuccess("Integración eliminada");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar integración");
    }
  };

  const handleEditMethod = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editMethod) return;
    try {
      const { data } = await fetchAPI<PaymentMethod>(`/v1/payments/methods/${editMethod.id}`, {
        method: "PUT",
        data: editMethod,
      });
      setMethods(methods.map((m) => (m.id === data!.id ? data! : m)));
      setEditMethod(null);
      setSuccess("Método actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar método");
    }
  };

  const handleDeleteMethod = async (id: number) => {
    try {
      await fetchAPI(`/v1/payments/methods/${id}`, { method: "DELETE" });
      setMethods(methods.filter((m) => m.id !== id));
      setDeleteMethodId(null);
      setSuccess("Método eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar método");
    }
  };

  const handleUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await updateProfile(formData);
      setSuccess("Perfil actualizado");
      setEditMode(false);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar perfil");
    }
  };

  const handleChangePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<{ message: string }>("/v1/auth/me/password", {
        method: "PUT",
        data: { current_password: currentPassword, new_password: newPassword },
      });
      setSuccess(data?.message || "Contraseña actualizada");
      setCurrentPassword("");
      setNewPassword("");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al cambiar contraseña");
    }
  };

  const handlePurchase = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<CreditTransaction>("/v1/payments/purchase", {
        method: "POST",
        data: { credits: parseInt(credits), payment_amount: parseFloat(paymentAmount), payment_method: "stripe" },
      });
      setTransactions([data!, ...transactions]);
      setCredits("");
      setPaymentAmount("");
      setSuccess("Créditos comprados");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al comprar créditos");
    }
  };

  const handleAddMethod = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<PaymentMethod>("/v1/payments/methods", {
        method: "POST",
        data: newMethod,
      });
      setMethods([...methods, data!]);
      setNewMethod({ payment_type: paymentProviders[0]?.name || "", details: "", is_default: false });
      setSuccess("Método añadido");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al añadir método");
    }
  };

  const handleSetDefault = async (id: number) => {
    try {
      await fetchAPI(`/v1/payments/methods/${id}/default`, { method: "PUT" });
      setMethods(methods.map((m) => ({ ...m, is_default: m.id === id })));
      setSuccess("Método predeterminado actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al establecer predeterminado");
    }
  };

  const handleDeleteAccount = async () => {
    if (confirm("¿Estás seguro de eliminar tu cuenta? Esta acción es irreversible.")) {
      try {
        await fetchAPI("/v1/users/me", { method: "DELETE" });
        await logout();
        router.push("/user/auth/#login");
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al eliminar cuenta");
      }
    }
  };

  if (!user) return (
    <Box sx={{
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)'
    }}>
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        <Typography variant="h6" color="textSecondary">Cargando tu perfil...</Typography>
      </motion.div>
    </Box>
  );

  return (
    <Box sx={{
      p: { xs: 2, md: 4 },
      minHeight: "100vh",
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)'
    }}>
      <Box sx={{ maxWidth: '1400px', mx: 'auto' }}>
        {/* Header Section */}
        <Box sx={{
          display: 'flex',
          flexDirection: { xs: 'column', md: 'row' },
          justifyContent: 'space-between',
          alignItems: 'center',
          mb: 4,
          gap: 2
        }}>
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Typography
              variant="h3"
              sx={{
                fontWeight: 'bold',
                background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                display: 'inline-block'
              }}
            >
              Hola, {user.username}!
            </Typography>
            <Typography variant="subtitle1" color="textSecondary">
              Bienvenido a tu panel de control
            </Typography>
          </motion.div>

          <Badge
            overlap="circular"
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
            badgeContent={
              <IconButton onClick={() => setEditMode(true)} size="small" sx={{ bgcolor: 'primary.main', color: 'white' }}>
                <Edit fontSize="small" />
              </IconButton>
            }
          >
            <Avatar
              sx={{
                width: 80,
                height: 80,
                bgcolor: theme.palette.primary.main,
                fontSize: '2rem',
                boxShadow: theme.shadows[6]
              }}
            >
              {user.username.charAt(0).toUpperCase()}
            </Avatar>
          </Badge>
        </Box>

        {/* Stats Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Grid container spacing={3} sx={{ mb: 4 }}>
            {/* Credits Card */}
            <Grid item xs={12} md={4}>
              <GradientCard>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                        Tus Créditos
                      </Typography>
                      <Typography variant="h3" sx={{ fontWeight: 'bold' }}>
                        {user.credits ?? 0}
                      </Typography>
                    </Box>
                    <AttachMoney sx={{ fontSize: 48, opacity: 0.8 }} />
                  </Box>
                </CardContent>
              </GradientCard>
            </Grid>

            {/* Transactions Card */}
            <Grid item xs={12} md={4}>
              <GradientCard sx={{ background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)' }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                        Transacciones
                      </Typography>
                      <Typography variant="h3" sx={{ fontWeight: 'bold' }}>
                        {transactions.length}
                      </Typography>
                    </Box>
                    <History sx={{ fontSize: 48, opacity: 0.8 }} />
                  </Box>
                </CardContent>
              </GradientCard>
            </Grid>

            {/* Payment Methods Card */}
            <Grid item xs={12} md={4}>
              <GradientCard sx={{ background: 'linear-gradient(135deg, #a6c1ee 0%, #fbc2eb 100%)' }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                        Métodos de Pago
                      </Typography>
                      <Typography variant="h3" sx={{ fontWeight: 'bold' }}>
                        {methods.length}
                      </Typography>
                    </Box>
                    <Payment sx={{ fontSize: 48, opacity: 0.8 }} />
                  </Box>
                </CardContent>
              </GradientCard>
            </Grid>
          </Grid>
        </motion.div>

        {/* Tabs Navigation */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Paper sx={{ mb: 3, borderRadius: '12px', overflow: 'hidden' }}>
            <Tabs
              value={tabValue}
              onChange={(_, newValue) => setTabValue(newValue)}
              variant="scrollable"
              scrollButtons="auto"
              indicatorColor="primary"
              textColor="primary"
            >
              <Tab label="Perfil" icon={<Person />} iconPosition="start" />
              <Tab label="Seguridad" icon={<Security />} iconPosition="start" />
              <Tab label="Cupones" icon={<LocalActivity />} iconPosition="start" />
              <Tab label="Transacciones" icon={<History />} iconPosition="start" />
              <Tab label="Métodos de Pago" icon={<Payment />} iconPosition="start" />
              <Tab label="Comprar Créditos" icon={<CreditCard />} iconPosition="start" />
              <Tab label="Integraciones" icon={<Link />} iconPosition="start" />
            </Tabs>
          </Paper>
        </motion.div>

        {/* Tab Content */}
        <Box sx={{ mb: 4 }}>
          {/* Profile Tab */}
          {tabValue === 0 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Información Personal"
                      avatar={<AccountCircle color="primary" />}
                      action={
                        <IconButton onClick={() => setEditMode(!editMode)}>
                          <Edit color="primary" />
                        </IconButton>
                      }
                    />
                    <CardContent>
                      <AnimatePresence mode="wait">
                        {editMode ? (
                          <Box
                            component={motion.form}
                            key="edit"
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            onSubmit={handleUpdate}
                            sx={{ display: "flex", flexDirection: "column", gap: 2 }}
                          >
                            <TextField
                              label="Email"
                              type="email"
                              value={formData.email}
                              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                              fullWidth
                              variant="outlined"
                              size="small"
                            />
                            <TextField
                              label="Username"
                              type="text"
                              value={formData.username}
                              onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                              fullWidth
                              variant="outlined"
                              size="small"
                            />
                            <TextField
                              label="Ciudad"
                              type="text"
                              value={formData.ciudad}
                              onChange={(e) => setFormData({ ...formData, ciudad: e.target.value })}
                              fullWidth
                              variant="outlined"
                              size="small"
                              InputProps={{
                                startAdornment: <LocationOn color="action" sx={{ mr: 1 }} />
                              }}
                            />
                            <TextField
                              label="Website"
                              type="text"
                              value={formData.website}
                              onChange={(e) => setFormData({ ...formData, website: e.target.value })}
                              fullWidth
                              variant="outlined"
                              size="small"
                              InputProps={{
                                startAdornment: <Language color="action" sx={{ mr: 1 }} />
                              }}
                            />
                            <Box sx={{ display: "flex", gap: 2, mt: 2 }}>
                              <Button
                                type="submit"
                                variant="contained"
                                color="primary"
                                sx={{ flex: 1 }}
                              >
                                Guardar Cambios
                              </Button>
                              <Button
                                onClick={() => setEditMode(false)}
                                variant="outlined"
                                sx={{ flex: 1 }}
                              >
                                Cancelar
                              </Button>
                            </Box>
                          </Box>
                        ) : (
                          <Box
                            component={motion.div}
                            key="view"
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                          >
                            <List>
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar sx={{ bgcolor: theme.palette.primary.light }}>
                                    <Person />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Username"
                                  secondary={user.username || "No especificado"}
                                  secondaryTypographyProps={{ color: "textPrimary" }}
                                />
                              </ListItem>
                              <Divider variant="inset" component="li" />
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar sx={{ bgcolor: theme.palette.info.light }}>
                                    <AccountCircle />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Email"
                                  secondary={user.email || "No especificado"}
                                  secondaryTypographyProps={{ color: "textPrimary" }}
                                />
                              </ListItem>
                              <Divider variant="inset" component="li" />
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar sx={{ bgcolor: theme.palette.success.light }}>
                                    <LocationOn />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Ciudad"
                                  secondary={user.ciudad || "No especificado"}
                                  secondaryTypographyProps={{ color: "textPrimary" }}
                                />
                              </ListItem>
                              <Divider variant="inset" component="li" />
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar sx={{ bgcolor: theme.palette.warning.light }}>
                                    <Language />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Website"
                                  secondary={user.website || "No especificado"}
                                  secondaryTypographyProps={{ color: "textPrimary" }}
                                />
                              </ListItem>
                            </List>
                          </Box>
                        )}
                      </AnimatePresence>
                    </CardContent>
                  </GlassCard>
                </Grid>

                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Actividad Reciente"
                      avatar={<History color="primary" />}
                    />
                    <CardContent>
                      {transactions.slice(0, 3).length > 0 ? (
                        <List>
                          {transactions.slice(0, 3).map((t) => (
                            <motion.div
                              key={t.id}
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              transition={{ duration: 0.3 }}
                            >
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar sx={{
                                    bgcolor: t.amount > 0 ? theme.palette.success.light : theme.palette.error.light
                                  }}>
                                    {t.amount > 0 ? "+" : "-"}
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary={`${t.transaction_type}`}
                                  secondary={`${new Date(t.timestamp).toLocaleString()} • ${t.payment_status}`}
                                />
                                <Typography variant="body2" color={t.amount > 0 ? "success.main" : "error.main"}>
                                  {t.amount > 0 ? "+" : ""}{t.amount} créditos
                                </Typography>
                              </ListItem>
                              <Divider variant="inset" component="li" />
                            </motion.div>
                          ))}
                        </List>
                      ) : (
                        <Typography variant="body2" color="textSecondary" sx={{ textAlign: 'center', py: 2 }}>
                          No hay actividad reciente
                        </Typography>
                      )}
                      <Button
                        fullWidth
                        variant="outlined"
                        sx={{ mt: 2 }}
                        onClick={() => setTabValue(2)}
                      >
                        Ver todas las transacciones
                      </Button>
                    </CardContent>
                  </GlassCard>
                </Grid>
              </Grid>

              {/* Danger Zone moved to Profile Tab */}
              <GlassCard sx={{ mt: 3 }}>
                <CardHeader
                  title="Zona Peligrosa"
                  avatar={<Security color="error" />}
                />
                <CardContent>
                  <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                    Estas acciones son irreversibles. Por favor, procede con precaución.
                  </Typography>
                  <Box sx={{ display: 'flex', gap: 2 }}>
                    <Button
                      onClick={logout}
                      variant="outlined"
                      color="secondary"
                      startIcon={<Logout />}
                      sx={{ flex: 1 }}
                    >
                      Cerrar Sesión
                    </Button>
                    <Button
                      onClick={handleDeleteAccount}
                      variant="contained"
                      color="error"
                      startIcon={<Delete />}
                      sx={{ flex: 1 }}
                    >
                      Eliminar Cuenta
                    </Button>
                  </Box>
                </CardContent>
              </GlassCard>
            </motion.div>
          )}

          {/* Security Tab */}
          {tabValue === 1 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Cambiar Contraseña"
                      avatar={<Lock color="primary" />}
                    />
                    <CardContent>
                      <Box
                        component="form"
                        onSubmit={handleChangePassword}
                        sx={{ display: "flex", flexDirection: "column", gap: 2 }}
                      >
                        <TextField
                          label="Contraseña Actual"
                          type="password"
                          value={currentPassword}
                          onChange={(e) => setCurrentPassword(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{
                            startAdornment: <Lock color="action" sx={{ mr: 1 }} />
                          }}
                        />
                        <TextField
                          label="Nueva Contraseña"
                          type="password"
                          value={newPassword}
                          onChange={(e) => setNewPassword(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{
                            startAdornment: <Security color="action" sx={{ mr: 1 }} />
                          }}
                        />
                        <Button
                          type="submit"
                          variant="contained"
                          color="primary"
                          sx={{ mt: 1 }}
                        >
                          Actualizar Contraseña
                        </Button>
                      </Box>
                    </CardContent>
                  </GlassCard>
                </Grid>

                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Métodos de Pago"
                      subheader={`${methods.length} configurados`}
                      avatar={<Payment color="primary" />}
                    />
                    <CardContent>
                      {methods.length > 0 ? (
                        <List>
                          {methods.slice(0, 2).map((m) => (
                            <ListItem key={m.id}>
                              <ListItemAvatar>
                                <Avatar sx={{ bgcolor: m.is_default ? theme.palette.success.light : theme.palette.grey[300] }}>
                                  {m.is_default ? <Star /> : <StarBorder />}
                                </Avatar>
                              </ListItemAvatar>
                              <ListItemText
                                primary={m.payment_type}
                                secondary={m.details}
                              />
                            </ListItem>
                          ))}
                        </List>
                      ) : (
                        <Typography variant="body2" color="textSecondary" sx={{ textAlign: 'center', py: 2 }}>
                          No hay métodos de pago configurados
                        </Typography>
                      )}
                      <Button
                        fullWidth
                        variant="outlined"
                        sx={{ mt: 2 }}
                        onClick={() => setTabValue(3)}
                      >
                        {methods.length > 0 ? 'Gestionar métodos' : 'Añadir método'}
                      </Button>
                    </CardContent>
                  </GlassCard>
                </Grid>
              </Grid>
            </motion.div>
          )}

          {/* Coupons Tab */}
          {tabValue === 2 && (

            <Box>
              <Typography variant="h6">Mis Cupones</Typography>
              {(!coupons || coupons.length === 0) ? (
                <Typography>No tienes cupones</Typography>
              ) : (
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Nombre</TableCell>
                      <TableCell>Créditos</TableCell>
                      <TableCell>Estado</TableCell>
                      <TableCell>Acciones</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {coupons.map((coupon) => (
                      <TableRow key={coupon.id}>
                        <TableCell>{coupon.name}</TableCell>
                        <TableCell>{coupon.credits}</TableCell>
                        <TableCell>
                          <Chip
                            label={coupon.status}
                            color={coupon.status === "active" ? "success" : "error"}
                          />
                        </TableCell>
                        <TableCell>
                          {coupon.status === "active" && (
                            <Button
                              variant="contained"
                              onClick={() => handleRedeem(coupon.id)}
                            >
                              Canjear
                            </Button>
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </Box>
          )
          }



          {/* Transactions Tab */}
          {tabValue === 3 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <GlassCard>
                <CardHeader
                  title="Historial de Transacciones"
                  avatar={<History color="primary" />}
                  action={
                    <Chip
                      label={`${transactions.length} transacciones`}
                      color="primary"
                      variant="outlined"
                    />
                  }
                />
                <CardContent>
                  {transactions.length === 0 ? (
                    <Typography variant="body2" color="textSecondary" sx={{ textAlign: 'center', py: 4 }}>
                      No hay transacciones registradas
                    </Typography>
                  ) : (
                    <List sx={{ maxHeight: '500px', overflow: 'auto' }}>
                      {transactions.map((t, index) => (
                        <motion.div
                          key={t.id || index} // Usar `index` como respaldo si `t.id` no está definido
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          transition={{ duration: 0.2 }}
                        >
                          <ListItem>
                            <ListItemAvatar>
                              <Avatar sx={{
                                bgcolor: t.amount > 0 ? theme.palette.success.light : theme.palette.error.light
                              }}>
                                {t.amount > 0 ? "+" : "-"}
                              </Avatar>
                            </ListItemAvatar>
                            <ListItemText
                              primary={t.transaction_type || "N/A"}
                              secondary={`${t.timestamp ? new Date(t.timestamp).toLocaleString() : "N/A"} • ${t.payment_status || "N/A"}`}
                            />
                          </ListItem>
                          <Divider variant="inset" component="li" />
                        </motion.div>
                      ))}
                    </List>
                  )}
                </CardContent>
              </GlassCard>
            </motion.div>
          )}

          {/* Payment Methods Tab */}
          {tabValue === 4 && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }}>
              <GlassCard>
                <CardHeader
                  title="Métodos de Pago"
                  avatar={<Payment color="primary" />}
                  subheader="Gestiona tus métodos de pago asociados"
                />
                <CardContent>
                  {methods.length > 0 && (
                    <List sx={{ mb: 3 }}>
                      {methods.map((m) => (
                        <Paper key={m.id} elevation={2} sx={{ mb: 2, borderRadius: "8px", overflow: "hidden" }}>
                          <ListItem>
                            <ListItemAvatar>
                              <Avatar sx={{ bgcolor: m.is_default ? theme.palette.success.main : theme.palette.grey[300] }}>
                                {m.is_default ? <Star /> : <CreditCard />}
                              </Avatar>
                            </ListItemAvatar>
                            <ListItemText
                              primary={
                                <Box sx={{ display: "flex", alignItems: "center" }}>
                                  <Typography sx={{ mr: 1 }}>{m.payment_type}</Typography>
                                  {m.is_default && (
                                    <Chip label="Predeterminado" size="small" color="success" variant="outlined" />
                                  )}
                                </Box>
                              }
                              secondary={m.details}
                            />
                            <Box sx={{ display: "flex", gap: 1 }}>
                              <IconButton onClick={() => setEditMethod(m)} color="primary">
                                <Edit />
                              </IconButton>
                              <IconButton onClick={() => setDeleteMethodId(m.id)} color="error">
                                <Delete />
                              </IconButton>
                              {!m.is_default && (
                                <Button
                                  onClick={() => handleSetDefault(m.id)}
                                  variant="outlined"
                                  size="small"
                                >
                                  Hacer Predeterminado
                                </Button>
                              )}
                            </Box>
                          </ListItem>
                        </Paper>
                      ))}
                    </List>
                  )}

                  {/* Formulario para añadir método */}
                  <Accordion
                    sx={{
                      background: "rgba(255, 255, 255, 0.05)",
                      boxShadow: "none",
                      border: "1px solid rgba(255, 255, 255, 0.2)",
                    }}
                  >
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Typography>Añadir nuevo método de pago</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Box component="form" onSubmit={handleAddMethod} sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                        <TextField
                          label="Tipo"
                          select
                          value={newMethod.payment_type}
                          onChange={(e) => setNewMethod({ ...newMethod, payment_type: e.target.value })}
                          fullWidth
                          variant="outlined"
                          size="small"
                        >
                          {paymentProviders.map((provider) => (
                            <MenuItem key={provider.id} value={provider.name}>
                              {provider.name}
                            </MenuItem>
                          ))}
                        </TextField>
                        <TextField
                          label="Detalles"
                          value={newMethod.details}
                          onChange={(e) => setNewMethod({ ...newMethod, details: e.target.value })}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          multiline
                          rows={3}
                        />
                        <Button
                          type="submit"
                          variant="contained"
                          color="primary"
                          startIcon={<AddCircle />}
                          sx={{ mt: 1 }}
                        >
                          Añadir Método
                        </Button>
                      </Box>
                    </AccordionDetails>
                  </Accordion>
                </CardContent>
              </GlassCard>

              {/* Diálogo para editar método */}
              <Dialog open={!!editMethod} onClose={() => setEditMethod(null)}>
                <DialogTitle>Editar Método de Pago</DialogTitle>
                <DialogContent>
                  <Box
                    component="form"
                    onSubmit={handleEditMethod}
                    sx={{ display: "flex", flexDirection: "column", gap: 2, mt: 2 }}
                  >
                    <TextField
                      label="Tipo"
                      select
                      value={editMethod?.payment_type || ""}
                      onChange={(e) => setEditMethod({ ...editMethod!, payment_type: e.target.value })}
                      fullWidth
                      variant="outlined"
                      size="small"
                    >
                      {paymentProviders.map((provider) => (
                        <MenuItem key={provider.id} value={provider.name}>
                          {provider.name}
                        </MenuItem>
                      ))}
                    </TextField>
                    <TextField
                      label="Detalles"
                      value={editMethod?.details || ""}
                      onChange={(e) => setEditMethod({ ...editMethod!, details: e.target.value })}
                      fullWidth
                      required
                      variant="outlined"
                      size="small"
                      multiline
                      rows={3}
                    />
                    <DialogActions>
                      <Button onClick={() => setEditMethod(null)} variant="outlined">
                        Cancelar
                      </Button>
                      <Button type="submit" variant="contained" color="primary">
                        Guardar
                      </Button>
                    </DialogActions>
                  </Box>
                </DialogContent>
              </Dialog>

              {/* Diálogo para confirmar eliminación */}
              <Dialog open={!!deleteMethodId} onClose={() => setDeleteMethodId(null)}>
                <DialogTitle>¿Eliminar Método de Pago?</DialogTitle>
                <DialogContent>
                  <Typography>Esta acción es irreversible. ¿Estás seguro de eliminar este método?</Typography>
                </DialogContent>
                <DialogActions>
                  <Button onClick={() => setDeleteMethodId(null)} variant="outlined">
                    Cancelar
                  </Button>
                  <Button
                    onClick={() => handleDeleteMethod(deleteMethodId!)}
                    variant="contained"
                    color="error"
                  >
                    Eliminar
                  </Button>
                </DialogActions>
              </Dialog>
            </motion.div>
          )}

          {/* Buy Credits Tab */}
          {tabValue === 5 && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }}>
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader title="Comprar Créditos" avatar={<AttachMoney color="primary" />} subheader="Recarga tu saldo de créditos" />
                    <CardContent>
                      <Box component="form" onSubmit={handlePurchase} sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                        <TextField
                          label="Cantidad de Créditos"
                          type="number"
                          value={credits}
                          onChange={(e) => setCredits(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{ startAdornment: <AttachMoney color="action" sx={{ mr: 1 }} /> }}
                        />
                        <TextField
                          label="Monto a Pagar (USD)"
                          type="number"
                          inputProps={{ step: "0.01" }}
                          value={paymentAmount}
                          onChange={(e) => setPaymentAmount(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{ startAdornment: <Typography sx={{ mr: 1 }}>$</Typography> }}
                        />
                        <TextField
                          label="Método de Pago"
                          select
                          value={methods.find((m) => m.is_default)?.id || methods[0]?.id || ""}
                          onChange={(e) => {
                            const selectedMethod = methods.find((m) => m.id === parseInt(e.target.value));
                            if (selectedMethod) {
                              handleSetDefault(selectedMethod.id);
                            }
                          }}
                          fullWidth
                          variant="outlined"
                          size="small"
                          disabled={methods.length === 0}
                          helperText={methods.length === 0 ? "No hay métodos de pago disponibles" : "Selecciona un método de pago"}
                        >
                          {methods.map((method) => (
                            <MenuItem key={method.id} value={method.id}>
                              {method.payment_type} - {method.details} {method.is_default ? "(Predeterminado)" : ""}
                            </MenuItem>
                          ))}
                        </TextField>
                        <Button type="submit" variant="contained" color="primary" size="large" sx={{ mt: 2 }} disabled={methods.length === 0}>
                          Comprar Créditos
                        </Button>
                      </Box>
                    </CardContent>
                  </GlassCard>
                </Grid>

                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader title="Tarifas y Beneficios" avatar={<CreditCard color="primary" />} />
                    <CardContent>
                      <List>
                        <ListItem>
                          <ListItemAvatar>
                            <Avatar sx={{ bgcolor: theme.palette.success.light }}>
                              <Star />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText primary="1 crédito = $1 USD" secondary="Tasa de cambio fija" />
                        </ListItem>
                        <Divider variant="inset" component="li" />
                        <ListItem>
                          <ListItemAvatar>
                            <Avatar sx={{ bgcolor: theme.palette.info.light }}>
                              <Payment />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText primary="Múltiples métodos de pago" secondary="Tarjetas, PayPal y más" />
                        </ListItem>
                        <Divider variant="inset" component="li" />
                        <ListItem>
                          <ListItemAvatar>
                            <Avatar sx={{ bgcolor: theme.palette.warning.light }}>
                              <Security />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText primary="Transacciones seguras" secondary="Encriptación SSL" />
                        </ListItem>
                      </List>
                    </CardContent>
                  </GlassCard>
                </Grid>
              </Grid>
            </motion.div>
          )}

          {tabValue === 6 && (
            <Box>
              <Box component="form" onSubmit={handleAddIntegration} sx={{ mb: 2 }}>
                <TextField label="Nombre" value={newIntegration.name} onChange={(e) => setNewIntegration({ ...newIntegration, name: e.target.value })} />
                <TextField label="Webhook URL" value={newIntegration.webhook_url} onChange={(e) => setNewIntegration({ ...newIntegration, webhook_url: e.target.value })} />
                <TextField label="Tipo de Evento" value={newIntegration.event_type} onChange={(e) => setNewIntegration({ ...newIntegration, event_type: e.target.value })} />
                <Button type="submit" variant="contained">Añadir</Button>
              </Box>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Nombre</TableCell>
                    <TableCell>Estado</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {integrations.map((integration) => (
                    <TableRow key={integration.id}>
                      <TableCell>{integration.name}</TableCell>
                      <TableCell>{integration.active ? "Activo (Admin)" : "Pendiente"}</TableCell>
                      <TableCell>
                        <IconButton onClick={() => handleDeleteIntegration(integration.id)} color="error">
                          <Delete />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          )}
        </Box>
      </Box>

      {/* Notifications */}
      <AnimatePresence>
        {error && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setError(null)}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="error"
                onClose={() => setError(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: '12px' }}
              >
                {error}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
        {success && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setSuccess(null)}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="success"
                onClose={() => setSuccess(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: '12px' }}
              >
                {success}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
      </AnimatePresence>
    </Box >
  );
}

// frontend/src/app/admin/dashboard/page.tsx
// Panel de administración principal para configuración y gestión
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { AnimatePresence, motion } from "framer-motion";
import {
  Tabs,
  Tab,
  Card,
  CardContent,
  TextField,
  Button,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  IconButton,
  Snackbar,
  Alert,
  Avatar,
  Chip,
  Divider,
  List,
  ListItem,
  ListItemText,
  Badge as MuiBadge,
  Paper,
  useTheme,
  styled,
  Box,
  Switch,
  FormControlLabel,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Dialog,
  DialogTitle,
  DialogContent,
  Select,
  MenuItem,
} from "@mui/material";
import Grid from "@mui/material/Grid";
import {
  AddCircle,
  Delete,
  ExpandMore,
  Settings,
  Public,
  Link,
  Webhook,
  CheckCircle,
  Cancel,
  Security,
  PersonAdd,
  LockPerson,
  PeopleOutline,
  AttachMoney,
  Edit,
  EmojiEvents,
  MonetizationOn,
  LocalActivity
} from "@mui/icons-material";
import { SiteSetting, Integration, EventType, Badge, PaymentProvider, Coupon, CouponType } from "@/lib/types";
import { AdminGradientCard, ConfigGlassCard, FeatureCard } from '@/components/ui/Styled';

interface AllowedOrigin {
  id: number;
  origin: string;
}

export default function ConfigurePage() {
  const { user } = useAuth();
  const router = useRouter();
  const theme = useTheme();
  const [activeTab, setActiveTab] = useState(0);
  const [settingsByTag, setSettingsByTag] = useState<Record<string, SiteSetting[]>>({});
  const [origins, setOrigins] = useState<string[]>([]); // Inicializar como array vacío
  const [integrations, setIntegrations] = useState<Integration[]>([]);
  const [newOrigin, setNewOrigin] = useState("");
  const [newIntegration, setNewIntegration] = useState({ name: "", webhook_url: "", event_type: "" });
  const [features, setFeatures] = useState({
    enable_registration: true,
    enable_social_login: true,
    disable_anonymous_users: false,
    disable_credits: false,
    enable_payment_methods: true,
    enable_points: true,
    enable_badges: true,
    enable_coupons: true,
  });

  const [eventTypes, setEventTypes] = useState<EventType[]>([]);
  const [badges, setBadges] = useState<Badge[]>([]);
  const [paymentProviders, setPaymentProviders] = useState<PaymentProvider[]>([]);
  const [editEventType, setEditEventType] = useState<EventType | null>(null);
  const [editBadge, setEditBadge] = useState<Badge | null>(null);
  const [editPaymentProvider, setEditPaymentProvider] = useState<PaymentProvider | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [expandedSettings, setExpandedSettings] = useState<Record<string, boolean>>({});
  const [allSettingsExpanded, setAllSettingsExpanded] = useState(false);
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [editCoupon, setEditCoupon] = useState<Coupon | null>(null);
  const [couponTypes, setCouponTypes] = useState<CouponType[]>([]);
  const [editCouponType, setEditCouponType] = useState<CouponType | null>(null);
  const [corsEnabled, setCorsEnabled] = useState<boolean | null>(null); // Inicializamos como null para indicar que aún no se ha cargado el estado.


  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);

  // Agregamos un estado de carga para controlar el renderizado inicial del panel.
  const [loadingPanel, setLoadingPanel] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data } = await fetchAPI<PaymentProvider[]>("/v1/payment-providers");
        setPaymentProviders(data || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al cargar proveedores");
      }
    };
    fetchData();
  }, []);



  useEffect(() => {
    if (!user || user.rol !== "admin") {
      router.push("/");
      return;
    }

    const fetchData = async () => {
      try {
        const settingsRes = await fetchAPI<SiteSetting[]>("/v1/settings/admin/config");
        const grouped = settingsRes.data?.reduce((acc, setting) => {
          const tag = setting.tag || "General";
          if (!acc[tag]) acc[tag] = [];
          acc[tag].push(setting);
          return acc;
        }, {} as Record<string, SiteSetting[]>);
        setSettingsByTag(grouped || {});

        // Initialize expanded state for settings
        if (grouped) {
          const initialExpandedState = Object.keys(grouped).reduce((acc, tag) => {
            acc[tag] = false;
            return acc;
          }, {} as Record<string, boolean>);
          setExpandedSettings(initialExpandedState);
        }

        const originsRes = await fetchAPI<string[]>("/v1/settings/allowed_origins");
        setOrigins(originsRes.data || []);

        const integrationsRes = await fetchAPI<Integration[]>("/v1/integrations/");
        setIntegrations(integrationsRes.data || []);

        const eventTypesRes = await fetchAPI<EventType[]>("/v1/gamification/event-types");
        setEventTypes(eventTypesRes.data || []);

        const badgesRes = await fetchAPI<Badge[]>("/v1/gamification/badges");
        setBadges(badgesRes.data || []);

        const paymentProvidersRes = await fetchAPI<PaymentProvider[]>("/v1/payment-providers");
        setPaymentProviders(paymentProvidersRes.data || []);


        const couponTypesRes = await fetchAPI<CouponType[]>("/v1/coupons/types");
        setCouponTypes(couponTypesRes.data || []);

        const couponsRes = await fetchAPI<Coupon[]>("/v1/coupons/");
        setCoupons(couponsRes.data || []);

        const featuresRes = await Promise.all([
          fetchAPI("/v1/settings/enable_registration"),
          fetchAPI("/v1/settings/enable_social_login"),
          fetchAPI("/v1/settings/disable_anonymous_users"),
          fetchAPI("/v1/settings/disable_credits"),
          fetchAPI("/v1/settings/enable_payment_methods"),
          fetchAPI("/v1/settings/enable_points"),
          fetchAPI("/v1/settings/enable_badges"),
          fetchAPI("/v1/settings/enable_coupons"),
        ]);
        setFeatures({
          enable_registration: featuresRes[0].data === "true",
          enable_social_login: featuresRes[1].data === "true",
          disable_anonymous_users: featuresRes[2].data === "true",
          disable_credits: featuresRes[3].data === "true",
          enable_payment_methods: featuresRes[4].data === "true",
          enable_points: featuresRes[5].data === "true",
          enable_badges: featuresRes[6].data === "true",
          enable_coupons: featuresRes[7].data === "true",
        });
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al cargar datos");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [user, router]);

  useEffect(() => {
    const fetchCorsSettings = async () => {
      try {
        console.log("Fetching CORS settings..."); // Depuración
        const { data: corsEnabledData } = await fetchAPI("/v1/settings/cors_enabled");
        console.log("CORS enabled data:", corsEnabledData); // Depuración
        const enabled = corsEnabledData === "true";
        setCorsEnabled(enabled);

        console.log("Fetching origins..."); // Depuración
        const { data: originsData } = await fetchAPI<AllowedOrigin[]>("/v1/origins");
        console.log("Origins data:", originsData); // Depuración
        setOrigins(Array.isArray(originsData) ? originsData.map(o => o.origin) : []);
      } catch (err) {
        console.error("Error fetching CORS settings or origins:", err); // Depuración
        setError(err instanceof Error ? err.message : "Error al cargar configuración de CORS");
      } finally {
        setLoadingPanel(false); // Finalizamos el estado de carga del panel
      }
    };
    fetchCorsSettings();
  }, []); // Cambiar dependencia a [] para que solo se ejecute una vez al montar el componente

  // Asegurarse de que origins sea siempre un array válido
  useEffect(() => {
    if (!Array.isArray(origins)) {
      setOrigins([]);
    }
  }, [origins]);

  const handleToggleCors = async () => {
    try {
      const { data } = await fetchAPI<{ key: string; value: boolean }>("/v1/settings/admin/config", {
        method: "POST",
        data: { key: "allowed_origins", value: !corsEnabled },
      });
      setCorsEnabled(data!.value);
      setSuccess(`CORS ${data!.value ? "activado" : "desactivado"}`);
      refreshOrigins(); // Asegurar que se refresque la lista de orígenes después de cambiar el estado de CORS
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar CORS");
    }
  };


  //const handleToggleIntegration = async (id: number, active: boolean) => {
  //  await fetchAPI(`/v1/integrations/${id}/toggle`, { method: "PUT" });
  // Actualizar estado local
  //};

  const groupedBadges = badges.reduce((acc, badge) => {
    const key = badge.event_type_id;
    if (!acc[key]) acc[key] = [];
    acc[key].push(badge);
    return acc;
  }, {} as Record<number, Badge[]>);

  const toggleAllSettings = () => {
    const newState = !allSettingsExpanded;
    setAllSettingsExpanded(newState);
    const updatedExpandedSettings = Object.keys(expandedSettings).reduce((acc, tag) => {
      acc[tag] = newState;
      return acc;
    }, {} as Record<string, boolean>);
    setExpandedSettings(updatedExpandedSettings);
  };

  const handleSaveSetting = async (key: string, newValue: string) => {
    try {
      await fetchAPI("/v1/settings/admin/config", { method: "POST", data: { key, value: newValue } });
      setSettingsByTag((prev) => {
        const updated = { ...prev };
        for (const tag in updated) {
          updated[tag] = updated[tag].map((s) => (s.key === key ? { ...s, value: newValue } : s));
        }
        return updated;
      });
      setSuccess("Configuración actualizada");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al guardar configuración");
    }
  };

  const refreshOrigins = async () => {
    try {
      console.log("Refreshing origins..."); // Depuración
      const { data: originsData } = await fetchAPI<AllowedOrigin[]>("/v1/origins");
      console.log("Refreshed origins data:", originsData); // Depuración
      setOrigins(Array.isArray(originsData) ? originsData.map(o => o.origin) : []);
    } catch (err) {
      console.error("Error refreshing origins:", err); // Depuración
      setError(err instanceof Error ? err.message : "Error al refrescar orígenes");
    }
  };

  const handleAddOrigin = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await fetchAPI("/v1/settings/allowed-origins", { method: "POST", data: { origin: newOrigin } });
      setNewOrigin("");
      setSuccess("Origen añadido con éxito");
      refreshOrigins(); // Refrescar la lista de orígenes
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al añadir origen");
    }
  };

  const handleDeleteOrigin = async (origin: string) => {
    try {
      await fetchAPI(`/v1/settings/allowed-origins/${encodeURIComponent(origin)}`, { method: "DELETE" });
      setSuccess("Origen eliminado con éxito");
      refreshOrigins(); // Refrescar la lista de orígenes
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar origen");
    }
  };

  const handleAddIntegration = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<Integration>("/v1/integrations/", {
        method: "POST",
        data: { name: newIntegration.name, webhook_url: newIntegration.webhook_url, event_type: newIntegration.event_type },
      });
      setIntegrations([...integrations, data]);
      setNewIntegration({ name: "", webhook_url: "", event_type: "" });
      setSuccess("Integración creada con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al crear integración");
    }
  };

  const handleToggleIntegration = async (id: number, active: boolean) => {
    try {
      const { data } = await fetchAPI<{ id: number; active: boolean }>(`/v1/integrations/${id}/toggle`, {
        method: "PUT",
      });
      setIntegrations((prev) =>
        prev.map((integration) =>
          integration.id === id ? { ...integration, active: data!.active } : integration
        )
      );
      setSuccess(`Integración ${data!.active ? "activada" : "desactivada"}`);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar integración");
    }
  };

  const handleDeleteIntegration = async (id: number) => {
    try {
      await fetchAPI(`/v1/integrations/${id}`, { method: "DELETE" });
      setIntegrations(integrations.filter(i => i.id !== id));
      setSuccess("Integración eliminada con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar integración");
    }
  };

  const handleToggleFeature = async (feature: string, enabled: boolean) => {
    try {
      await fetchAPI("/v1/settings/admin/config", { method: "POST", data: { key: feature, value: enabled.toString() } });
      setFeatures((prev) => ({ ...prev, [feature]: enabled }));
      setSuccess(`Funcionalidad ${enabled ? "activada" : "desactivada"} con éxito`);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar funcionalidad");
    }
  };

  const handleCreateEventType = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<EventType>("/v1/gamification/event-types", { method: "POST", data: editEventType });
      setEventTypes([...eventTypes, data!]);
      setEditEventType(null);
      setSuccess("Tipo de evento creado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al crear tipo de evento");
    }
  };

  const handleUpdateEventType = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editEventType?.id) return;
    try {
      const { data } = await fetchAPI<EventType>(`/v1/gamification/event-types/${editEventType.id}`, { method: "PUT", data: editEventType });
      setEventTypes(eventTypes.map((et) => (et.id === data!.id ? data! : et)));
      setEditEventType(null);
      setSuccess("Tipo de evento actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar tipo de evento");
    }
  };

  const handleDeleteEventType = async (id: number) => {
    try {
      await fetchAPI(`/v1/gamification/event-types/${id}`, { method: "DELETE" });
      setEventTypes(eventTypes.filter((et) => (et.id !== id)));
      setSuccess("Tipo de evento eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar tipo de evento");
    }
  };

  const handleCreateBadge = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<Badge>("/v1/gamification/badges", { method: "POST", data: editBadge });
      setBadges([...badges, data!]);
      setEditBadge(null);
      setSuccess("Badge creado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al crear badge");
    }
  };

  const handleUpdateBadge = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editBadge?.id) return;
    try {
      const { data } = await fetchAPI<Badge>(`/v1/gamification/badges/${editBadge.id}`, { method: "PUT", data: editBadge });
      setBadges(badges.map((b) => (b.id === data!.id ? data! : b)));
      setEditBadge(null);
      setSuccess("Badge actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar badge");
    }
  };

  const handleDeleteBadge = async (id: number) => {
    try {
      await fetchAPI(`/v1/gamification/badges/${id}`, { method: "DELETE" });
      setBadges(badges.filter((b) => b.id !== id));
      setSuccess("Badge eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar badge");
    }
  };

  const handleTogglePaymentProvider = async (id: number, active: boolean) => {
    try {
      const provider = paymentProviders.find(p => p.id === id);
      if (!provider) throw new Error("Proveedor no encontrado");
      const updatedProvider = { ...provider, active: !active }; // Invertir el estado
      const { data } = await fetchAPI<PaymentProvider>(`/v1/payment-providers/${id}`, {
        method: "PUT",
        data: updatedProvider,
      });
      setPaymentProviders(paymentProviders.map((p) => (p.id === data!.id ? data! : p)));
      setSuccess(`Proveedor ${!active ? "activado" : "desactivado"}`);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar proveedor");
    }
  };

  const handleCreatePaymentProvider = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<PaymentProvider>("/v1/payment-providers", { method: "POST", data: editPaymentProvider });
      setPaymentProviders([...paymentProviders, data!]);
      setEditPaymentProvider(null);
      setSuccess("Proveedor creado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al crear proveedor");
    }
  };

  const handleUpdatePaymentProvider = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editPaymentProvider?.id) return;
    try {
      const { data } = await fetchAPI<PaymentProvider>(`/v1/payment-providers/${editPaymentProvider.id}`, {
        method: "PUT",
        data: editPaymentProvider,
      });
      setPaymentProviders(paymentProviders.map((p) => (p.id === data!.id ? data! : p)));
      setEditPaymentProvider(null);
      setSuccess("Proveedor actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar proveedor");
    }
  };

  const handleDeletePaymentProvider = async (id: number) => {
    try {
      await fetchAPI(`/v1/payment-providers/${id}`, { method: "DELETE" });
      setPaymentProviders(paymentProviders.filter((p) => p.id !== id));
      setSuccess("Proveedor eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar proveedor");
    }
  };


  // Funciones para manejar cupones
  const handleSubmitCouponType = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editCouponType) return;
    try {
      if (editCouponType.id) {
        const { data } = await fetchAPI<CouponType>(`/v1/coupons/types/${editCouponType.id}`, {
          method: "PUT",
          data: editCouponType,
        });
        setCouponTypes(couponTypes.map(ct => ct.id === data!.id ? data! : ct));
      } else {
        const { data } = await fetchAPI<CouponType>("/v1/coupons/types", {
          method: "POST",
          data: editCouponType,
        });
        setCouponTypes([...couponTypes, data!]);
      }
      setEditCouponType(null);
      setSuccess("Tipo de cupón guardado con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al guardar tipo de cupón");
    }
  };

  const handleDeleteCoupon = async (id: number) => {
    try {
      await fetchAPI(`/v1/coupons/${id}`, { method: "DELETE" });
      setCoupons(coupons.filter((c) => c.id !== id));
      setSuccess("Cupón eliminado con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar cupón");
    }
  };

  if (loading) return (
    <Box sx={{
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)'
    }}>
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        <Typography variant="h6" color="textSecondary">Cargando panel de administración...</Typography>
      </motion.div>
    </Box>
  );

  // Modificamos el renderizado del panel para manejar el estado de carga inicial
  if (loadingPanel) {
    return <Typography>Cargando panel de administración...</Typography>;
  }

  return (
    <Box sx={{
      p: { xs: 2, md: 4 },
      minHeight: "100vh",
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)'
    }}>
      <Box sx={{ maxWidth: '1400px', mx: 'auto' }}>
        {/* Header Section */}
        <Box sx={{
          display: 'flex',
          flexDirection: { xs: 'column', md: 'row' },
          justifyContent: 'space-between',
          alignItems: 'center',
          mb: 4,
          gap: 2
        }}>
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Typography
              variant="h3"
              sx={{
                fontWeight: 'bold',
                background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                display: 'inline-block'
              }}
            >
              Panel de Administración
            </Typography>
            <Typography variant="subtitle1" color="textSecondary">
              Gestiona la configuración del sistema
            </Typography>
          </motion.div>

          <MuiBadge
            overlap="circular"
            badgeContent={
              <Chip
                label="Admin"
                size="small"
                color="primary"
                sx={{
                  position: 'absolute',
                  top: -10,
                  right: -10,
                  fontWeight: 'bold'
                }}
              />
            }
          >
            <Avatar
              sx={{
                width: 80,
                height: 80,
                bgcolor: theme.palette.error.main,
                fontSize: '2rem',
                boxShadow: theme.shadows[6]
              }}
            >
              {user?.username?.charAt(0).toUpperCase()}
            </Avatar>
          </MuiBadge>
        </Box>

        {/* Stats Cards */}
        <Box sx={{ display: 'flex', gap: 3, mb: 4, flexWrap: 'wrap' }}>
          <AdminGradientCard sx={{ flex: 1, minWidth: '200px' }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                    Configuraciones
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {Object.values(settingsByTag).flat().length}
                  </Typography>
                </Box>
                <Settings sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: '200px' }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                    Orígenes Permitidos
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {origins.length}
                  </Typography>
                </Box>
                <Public sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: '200px' }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                    Integraciones
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {integrations.length}
                  </Typography>
                </Box>
                <Webhook sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: '200px' }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                    Gamificación
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {eventTypes.length}
                  </Typography>
                </Box>
                <EmojiEvents sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: '200px' }}>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Box>
                  <Typography variant="overline" color="inherit" sx={{ opacity: 0.8 }}>
                    Pagos
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                    {paymentProviders.length}
                  </Typography>
                </Box>
                <MonetizationOn sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>
        </Box>

        {/* Tabs Navigation */}
        <Paper sx={{ mb: 3, borderRadius: '12px', overflow: 'hidden' }}>
          <Tabs
            value={activeTab}
            onChange={(_, newValue) => setActiveTab(newValue)}
            variant="scrollable"
            scrollButtons="auto"
            indicatorColor="primary"
            textColor="primary"
          >
            <Tab label="Funcionalidades" icon={<LockPerson />} iconPosition="start" />
            <Tab label="Orígenes" icon={<Security />} iconPosition="start" />
            <Tab label="Integraciones" icon={<Link />} iconPosition="start" />
            <Tab label="Gamificación" icon={<EmojiEvents />} iconPosition="start" />
            <Tab label="Cupones" icon={<LocalActivity />} iconPosition="start" />
            <Tab label="Pagos" icon={<MonetizationOn />} iconPosition="start" />
            <Tab label="Configuraciones" icon={<Settings />} iconPosition="start" />
          </Tabs>
        </Paper>

        {/* Tab Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          {/* Funcionalidades Tab */}
          {activeTab === 0 && (
            <Box sx={{ mb: 4 }}>
              <ConfigGlassCard>
                <CardContent>
                  <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 3 }}>
                    <LockPerson sx={{ mr: 1, verticalAlign: 'middle' }} />
                    Control de Funcionalidades del Sistema
                  </Typography>

                  <Grid container spacing={3}>
                    {/* Tarjeta para Registro */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.enable_registration ? theme.palette.success.main : theme.palette.error.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <PersonAdd sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.enable_registration ? theme.palette.success.main : theme.palette.error.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Registro de Usuarios</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Controla si los nuevos usuarios pueden registrarse
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.enable_registration ? "Activado" : "Desactivado"}
                                size="small"
                                color={features.enable_registration ? "success" : "error"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_registration}
                              onChange={(e) => handleToggleFeature('enable_registration', e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('enable_registration')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Login Social */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.enable_social_login ? theme.palette.success.main : theme.palette.error.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <PeopleOutline sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.enable_social_login ? theme.palette.success.main : theme.palette.error.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Login Social</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Permite inicio de sesión con redes sociales
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.enable_social_login ? "Activado" : "Desactivado"}
                                size="small"
                                color={features.enable_social_login ? "success" : "error"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_social_login}
                              onChange={(e) => handleToggleFeature('enable_social_login', e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('enable_social_login')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Usuarios Anónimos */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.disable_anonymous_users ? theme.palette.error.main : theme.palette.success.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <Security sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.disable_anonymous_users ? theme.palette.error.main : theme.palette.success.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Usuarios Anónimos</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Controla el acceso de usuarios no registrados
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.disable_anonymous_users ? "Bloqueados" : "Permitidos"}
                                size="small"
                                color={features.disable_anonymous_users ? "error" : "success"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.disable_anonymous_users}
                              onChange={(e) => handleToggleFeature('disable_anonymous_users', e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('disable_anonymous_users')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Sistema de Créditos */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.disable_credits ? theme.palette.error.main : theme.palette.success.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <AttachMoney sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.disable_credits ? theme.palette.error.main : theme.palette.success.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Sistema de Créditos</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Habilita/deshabilita el uso de créditos
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.disable_credits ? "Desactivado" : "Activado"}
                                size="small"
                                color={features.disable_credits ? "error" : "success"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={!features.disable_credits}
                              onChange={(e) => handleToggleFeature('disable_credits', !e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('disable_credits')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Métodos de Pago */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.enable_payment_methods ? theme.palette.success.main : theme.palette.error.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <MonetizationOn sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.enable_payment_methods ? theme.palette.success.main : theme.palette.error.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Métodos de Pago</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Habilita diferentes opciones de pago
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.enable_payment_methods ? "Activado" : "Desactivado"}
                                size="small"
                                color={features.enable_payment_methods ? "success" : "error"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_payment_methods}
                              onChange={(e) => handleToggleFeature('enable_payment_methods', e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('enable_payment_methods')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Sistema de Puntos */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.enable_points ? theme.palette.success.main : theme.palette.error.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <EmojiEvents sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.enable_points ? theme.palette.success.main : theme.palette.error.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Sistema de Puntos</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Activa puntos por actividades
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.enable_points ? "Activado" : "Desactivado"}
                                size="small"
                                color={features.enable_points ? "success" : "error"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_points}
                              onChange={(e) => handleToggleFeature('enable_points', e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('enable_points')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Insignias */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.enable_badges ? theme.palette.success.main : theme.palette.error.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <EmojiEvents sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.enable_badges ? theme.palette.success.main : theme.palette.error.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Sistema de Insignias</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Permite la obtención de insignias
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.enable_badges ? "Activado" : "Desactivado"}
                                size="small"
                                color={features.enable_badges ? "success" : "error"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_badges}
                              onChange={(e) => handleToggleFeature('enable_badges', e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('enable_badges')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Cupones */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard sx={{
                        borderLeft: `4px solid ${features.enable_coupons ? theme.palette.success.main : theme.palette.error.main}`
                      }}>
                        <CardContent>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            <EmojiEvents sx={{
                              fontSize: 40,
                              mr: 2,
                              color: features.enable_coupons ? theme.palette.success.main : theme.palette.error.main
                            }} />
                            <Box>
                              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Cupones</Typography>
                              <Typography variant="body2" color="textSecondary">
                                Habilita el sistema de cupones
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={features.enable_coupons ? "Activado" : "Desactivado"}
                                size="small"
                                color={features.enable_coupons ? "success" : "error"}
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_coupons}
                              onChange={(e) => handleToggleFeature('enable_coupons', e.target.checked)}
                              color="primary"
                            />
                          </Box>
                          <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                            {getFeatureDescription('enable_coupons')}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                  </Grid>
                </CardContent>
              </ConfigGlassCard>
            </Box>
          )}

          {/* Orígenes Permitidos Tab */}
          {activeTab === 1 && (
            <Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                <Typography variant="h6">Orígenes Permitidos</Typography>
                {corsEnabled === null ? (
                  <Typography>Cargando configuración de CORS...</Typography>
                ) : (
                  <Switch checked={corsEnabled} onChange={handleToggleCors} />
                )}
              </Box>
              {corsEnabled && (
                <Box component="form" onSubmit={handleAddOrigin} sx={{ mb: 2 }}>
                  <TextField
                    label="Nuevo Origen"
                    value={newOrigin}
                    onChange={(e) => setNewOrigin(e.target.value)}
                    fullWidth
                    variant="outlined"
                    size="small"
                  />
                  <Button type="submit" variant="contained" color="primary" sx={{ mt: 1 }}>
                    Añadir Origen
                  </Button>
                </Box>
              )}
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Origen</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {(origins || []).map((origin) => (
                    <TableRow key={origin}>
                      <TableCell>{origin}</TableCell>
                      <TableCell>
                        {corsEnabled ? (
                          <IconButton onClick={() => handleDeleteOrigin(origin)} color="error">
                            <Delete />
                          </IconButton>
                        ) : (
                          <Typography color="textSecondary">Desactivado</Typography>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* Integraciones Tab */}
          {activeTab === 2 && (
            <Box>
              <Select
                value={selectedUserId || ""}
                onChange={(e) => setSelectedUserId(e.target.value ? Number(e.target.value) : null)}
                displayEmpty
                fullWidth
                sx={{ mb: 2 }}
              >
                <MenuItem value="">Todos los usuarios</MenuItem>
                {/* Añadir opciones dinámicas de usuarios */}
              </Select>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Nombre</TableCell>
                    <TableCell>Usuario</TableCell>
                    <TableCell>Estado</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {integrations.filter(i => selectedUserId ? i.user_id === selectedUserId : true).map((integration) => (
                    <TableRow key={integration.id}>
                      <TableCell>{integration.name}</TableCell>
                      <TableCell>{integration.user_id}</TableCell>
                      <TableCell>
                        <Switch
                          checked={integration.active}
                          onChange={() => handleToggleIntegration(integration.id, integration.active)}
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton onClick={() => handleDeleteIntegration(integration.id)} color="error">
                          <Delete />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* Gamificación Tab */}
          {activeTab === 3 && (
            <Box sx={{ mb: 4 }}>
              <ConfigGlassCard sx={{ mb: 3 }}>
                <CardContent>
                  <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 3 }}>
                    <EmojiEvents sx={{ mr: 1, verticalAlign: 'middle' }} />
                    Gestión de Gamificación
                  </Typography>

                  {/* Event Types Section */}
                  <ConfigGlassCard sx={{ mb: 4, p: 3 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="h6">Tipos de Evento</Typography>
                      <Button
                        variant="contained"
                        startIcon={<AddCircle />}
                        onClick={() => setEditEventType({ id: 0, name: '', description: '', points_per_event: 0 })}
                      >
                        Nuevo Tipo
                      </Button>
                    </Box>

                    <Table>
                      <TableHead>
                        <TableRow>
                          <TableCell>Nombre</TableCell>
                          <TableCell>Descripción</TableCell>
                          <TableCell>Puntos</TableCell>
                          <TableCell>Acciones</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {eventTypes.map((et) => (
                          <TableRow key={et.id}>
                            <TableCell>{et.name}</TableCell>
                            <TableCell>{et.description}</TableCell>
                            <TableCell>{et.points_per_event}</TableCell>
                            <TableCell>
                              <IconButton onClick={() => setEditEventType(et)} color="primary">
                                <Edit />
                              </IconButton>
                              <IconButton onClick={() => handleDeleteEventType(et.id)} color="error">
                                <Delete />
                              </IconButton>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </ConfigGlassCard>

                  {/* Badges Section */}
                  <ConfigGlassCard sx={{ p: 3 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="h6">Insignias</Typography>
                      <Button
                        variant="contained"
                        startIcon={<AddCircle />}
                        onClick={() => setEditBadge({
                          id: 0,
                          name: '',
                          description: '',
                          event_type_id: eventTypes[0]?.id || 0,
                          required_points: 0,
                          user_type: 'both'
                        })}
                        disabled={eventTypes.length === 0}
                      >
                        Nueva Insignia
                      </Button>
                    </Box>

                    {eventTypes.map((eventType) => (
                      <Accordion key={eventType.id} sx={{ background: 'transparent', boxShadow: 'none' }}>
                        <AccordionSummary expandIcon={<ExpandMore />}>
                          <Typography>{eventType.name} (ID: {eventType.id})</Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                          <Table>
                            <TableHead>
                              <TableRow>
                                <TableCell>Nombre</TableCell>
                                <TableCell>Puntos Requeridos</TableCell>
                                <TableCell>Tipo Usuario</TableCell>
                                <TableCell>Acciones</TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {(groupedBadges[eventType.id] || []).map((badge) => (
                                <TableRow key={badge.id}>
                                  <TableCell>{badge.name}</TableCell>
                                  <TableCell>{badge.required_points}</TableCell>
                                  <TableCell>{badge.user_type}</TableCell>
                                  <TableCell>
                                    <IconButton onClick={() => setEditBadge(badge)} color="primary">
                                      <Edit />
                                    </IconButton>
                                    <IconButton onClick={() => handleDeleteBadge(badge.id)} color="error">
                                      <Delete />
                                    </IconButton>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </AccordionDetails>
                      </Accordion>
                    ))}
                  </ConfigGlassCard>
                </CardContent>
              </ConfigGlassCard>

              {/* Event Type Dialog */}
              <Dialog open={!!editEventType} onClose={() => setEditEventType(null)}>
                <DialogTitle>{editEventType?.id ? 'Editar Tipo de Evento' : 'Nuevo Tipo de Evento'}</DialogTitle>
                <DialogContent>
                  <Box component="form" onSubmit={editEventType?.id ? handleUpdateEventType : handleCreateEventType} sx={{ mt: 2 }}>
                    <TextField
                      label="Nombre"
                      fullWidth
                      value={editEventType?.name || ''}
                      onChange={(e) => setEditEventType({ ...editEventType!, name: e.target.value })}
                      margin="normal"
                    />
                    <TextField
                      label="Descripción"
                      fullWidth
                      value={editEventType?.description || ''}
                      onChange={(e) => setEditEventType({ ...editEventType!, description: e.target.value })}
                      margin="normal"
                    />
                    <TextField
                      label="Puntos por evento"
                      type="number"
                      fullWidth
                      value={editEventType?.points_per_event || 0}
                      onChange={(e) => setEditEventType({ ...editEventType!, points_per_event: parseInt(e.target.value) || 0 })}
                      margin="normal"
                    />
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      fullWidth
                      sx={{ mt: 2 }}
                    >
                      {editEventType?.id ? 'Actualizar' : 'Crear'}
                    </Button>
                  </Box>
                </DialogContent>
              </Dialog>

              {/* Badge Dialog */}
              <Dialog open={!!editBadge} onClose={() => setEditBadge(null)}>
                <DialogTitle>{editBadge?.id ? 'Editar Insignia' : 'Nueva Insignia'}</DialogTitle>
                <DialogContent>
                  <Box component="form" onSubmit={editBadge?.id ? handleUpdateBadge : handleCreateBadge} sx={{ mt: 2 }}>
                    <TextField
                      label="Nombre"
                      fullWidth
                      value={editBadge?.name || ''}
                      onChange={(e) => setEditBadge({ ...editBadge!, name: e.target.value })}
                      margin="normal"
                    />
                    <TextField
                      label="Descripción"
                      fullWidth
                      value={editBadge?.description || ''}
                      onChange={(e) => setEditBadge({ ...editBadge!, description: e.target.value })}
                      margin="normal"
                    />
                    <TextField
                      label="Puntos Requeridos"
                      type="number"
                      fullWidth
                      value={editBadge?.required_points || 0}
                      onChange={(e) => setEditBadge({ ...editBadge!, required_points: parseInt(e.target.value) || 0 })}
                      margin="normal"
                    />
                    <TextField
                      label="Tipo de Evento"
                      select
                      fullWidth
                      value={editBadge?.event_type_id || 0}
                      onChange={(e) => setEditBadge({ ...editBadge!, event_type_id: parseInt(e.target.value) })}
                      margin="normal"
                      SelectProps={{ native: true }}
                    >
                      {eventTypes.map((et) => (
                        <option key={et.id} value={et.id}>{et.name}</option>
                      ))}
                    </TextField>
                    <TextField
                      label="Tipo de Usuario"
                      select
                      fullWidth
                      value={editBadge?.user_type || 'both'}
                      onChange={(e) => setEditBadge({ ...editBadge!, user_type: e.target.value as any })}
                      margin="normal"
                      SelectProps={{ native: true }}
                    >
                      <option value="anonymous">Anónimo</option>
                      <option value="registered">Registrado</option>
                      <option value="both">Ambos</option>
                    </TextField>
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      fullWidth
                      sx={{ mt: 2 }}
                    >
                      {editBadge?.id ? 'Actualizar' : 'Crear'}
                    </Button>
                  </Box>
                </DialogContent>
              </Dialog>
            </Box>
          )}

          {/* CUpones Tab */}

          {activeTab === 4 && (
            <Box sx={{ mb: 4 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>Tipos de Cupones</Typography>
              <Button
                variant="contained"
                startIcon={<AddCircle />}
                onClick={() => setEditCouponType({ id: 0, name: '', description: '', credits: 0, active: true })}
              >
                Nuevo Tipo de Cupón
              </Button>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Nombre</TableCell>
                    <TableCell>Descripción</TableCell>
                    <TableCell>Créditos</TableCell>
                    <TableCell>Activo</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {couponTypes.map((ct) => (
                    <TableRow key={ct.id}>
                      <TableCell>{ct.name}</TableCell>
                      <TableCell>{ct.description || 'Sin descripción'}</TableCell>
                      <TableCell>{ct.credits}</TableCell>
                      <TableCell>
                        <Chip label={ct.active ? "Activo" : "Inactivo"} color={ct.active ? "success" : "error"} />
                      </TableCell>
                      <TableCell>
                        <IconButton onClick={() => setEditCouponType(ct)} color="primary">
                          <Edit />
                        </IconButton>
                        <Button
                          variant="outlined"
                          size="small"
                          startIcon={<LocalActivity />}
                          onClick={async () => {
                            try {
                              const { data } = await fetchAPI<Coupon>("/v1/coupons/test", {
                                method: "POST",
                                data: { coupon_type_id: ct.id },
                              });
                              if (data) {
                                setCoupons([...coupons, data]);
                                setSuccess("Cupón de prueba generado con éxito");
                                setTimeout(() => setSuccess(null), 3000);
                              }
                            } catch (err) {
                              setError(err instanceof Error ? err.message : "Error al generar cupón de prueba");
                            }
                          }}
                        >
                          Generar Prueba
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* Pagos Tab */}
          {activeTab === 5 && (
            <Box sx={{ mb: 4 }}>
              <ConfigGlassCard>
                <CardContent>
                  <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 3 }}>
                    <MonetizationOn sx={{ mr: 1, verticalAlign: 'middle' }} />
                    Gestión de Pagos
                  </Typography>

                  <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
                    <Button
                      variant="contained"
                      startIcon={<AddCircle />}
                      onClick={() => setEditPaymentProvider({ id: 0, name: '', active: true })}
                    >
                      Nuevo Proveedor
                    </Button>
                  </Box>

                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>Nombre</TableCell>
                        <TableCell>Estado</TableCell>
                        <TableCell>Acciones</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {paymentProviders.map((provider) => (
                        <TableRow key={provider.id}>
                          <TableCell>{provider.name}</TableCell>
                          <TableCell>
                            <Switch
                              checked={provider.active}
                              onChange={(e) => handleTogglePaymentProvider(provider.id, provider.active)}
                            />
                          </TableCell>
                          <TableCell>
                            <IconButton onClick={() => setEditPaymentProvider(provider)} color="primary">
                              <Edit />
                            </IconButton>
                            <IconButton onClick={() => handleDeletePaymentProvider(provider.id)} color="error">
                              <Delete />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </ConfigGlassCard>

              {/* Payment Provider Dialog */}
              <Dialog open={!!editPaymentProvider} onClose={() => setEditPaymentProvider(null)}>
                <DialogTitle>{editPaymentProvider?.id ? 'Editar Proveedor' : 'Nuevo Proveedor'}</DialogTitle>
                <DialogContent>
                  <Box component="form" onSubmit={editPaymentProvider?.id ? handleUpdatePaymentProvider : handleCreatePaymentProvider} sx={{ mt: 2 }}>
                    <TextField
                      label="Nombre"
                      fullWidth
                      value={editPaymentProvider?.name || ''}
                      onChange={(e) => setEditPaymentProvider({ ...editPaymentProvider!, name: e.target.value })}
                      margin="normal"
                    />
                    <FormControlLabel
                      control={
                        <Switch
                          checked={editPaymentProvider?.active || false}
                          onChange={(e) => setEditPaymentProvider({ ...editPaymentProvider!, active: e.target.checked })}
                          color="primary"
                        />
                      }
                      label="Activo"
                      sx={{ mt: 2 }}
                    />
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      fullWidth
                      sx={{ mt: 2 }}
                    >
                      {editPaymentProvider?.id ? 'Actualizar' : 'Crear'}
                    </Button>
                  </Box>
                </DialogContent>
              </Dialog>
            </Box>
          )}

          {/* Configuraciones Tab */}
          {activeTab === 6 && (
            <Box sx={{ mb: 4 }}>
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
                <Button
                  variant="outlined"
                  onClick={toggleAllSettings}
                  startIcon={<ExpandMore />}
                  sx={{ borderRadius: '12px' }}
                >
                  {allSettingsExpanded ? 'Contraer Todo' : 'Expandir Todo'}
                </Button>
              </Box>

              {Object.entries(settingsByTag).map(([tag, settings]) => (
                <ConfigGlassCard key={tag} sx={{ mb: 2 }}>
                  <Accordion
                    sx={{ background: 'transparent', boxShadow: 'none' }}
                    expanded={expandedSettings[tag] || false}
                    onChange={() => setExpandedSettings(prev => ({ ...prev, [tag]: !prev[tag] }))}
                  >
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <Avatar sx={{ bgcolor: theme.palette.primary.main, width: 32, height: 32 }}>
                          <Settings sx={{ fontSize: 16 }} />
                        </Avatar>
                        <Typography variant="h6">{tag}</Typography>
                        <Chip label={`${settings.length} configs`} size="small" color="primary" variant="outlined" />
                      </Box>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Grid container spacing={2}>
                        {settings.map((setting) => (
                          <Grid item xs={12} md={6} key={setting.key}>
                            <TextField
                              label={setting.key}
                              defaultValue={setting.value}
                              onBlur={(e) => handleSaveSetting(setting.key, e.target.value)}
                              fullWidth
                              variant="outlined"
                              size="small"
                              helperText={setting.description}
                              InputProps={{ sx: { borderRadius: '12px' } }}
                            />
                          </Grid>
                        ))}
                      </Grid>
                    </AccordionDetails>
                  </Accordion>
                </ConfigGlassCard>
              ))}
            </Box>
          )}
        </motion.div>
      </Box>

      {/* Notificaciones */}
      <AnimatePresence>
        {error && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setError(null)}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="error"
                onClose={() => setError(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: '12px' }}
              >
                {error}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
        {success && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setSuccess(null)}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="success"
                onClose={() => setSuccess(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: '12px' }}
              >
                {success}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
      </AnimatePresence>
    </Box>
  );
}

// Función auxiliar para descripciones de características
const getFeatureDescription = (key: string) => {
  const descriptions: Record<string, string> = {
    enable_registration: 'Permite a nuevos usuarios registrarse en la plataforma. Si se desactiva, solo los administradores podrán crear cuentas.',
    enable_social_login: 'Permite el inicio de sesión con proveedores sociales como Google, Facebook, etc. Requiere configuración previa de las APIs.',
    disable_anonymous_users: 'Impide el acceso a usuarios no registrados. Todos los visitantes deberán iniciar sesión para usar la plataforma.',
    disable_credits: 'Deshabilita el sistema de créditos en la plataforma. Los usuarios no podrán comprar ni gastar créditos.',
    enable_payment_methods: 'Habilita diferentes métodos de pago como tarjetas, PayPal, etc. Requiere configuración previa de cada proveedor.',
    enable_points: 'Activa el sistema de puntos por actividades. Los usuarios ganarán puntos por completar acciones en la plataforma.',
    enable_badges: 'Permite la obtención de insignias al alcanzar ciertos logros. Configura los requisitos en la pestaña de Gamificación.',
    enable_coupons: 'Permite la creación y uso de cupones de descuento. Los usuarios podrán canjear cupones para obtener descuentos en compras.'
  };
  return descriptions[key] || 'Funcionalidad del sistema';
};

// Renderización de la tabla de orígenes
const renderOriginsTable = () => {
  return (
    <Table>
      <TableHead>
        <TableRow>
          <TableCell>Origen</TableCell>
          <TableCell>Acciones</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {(origins || []).map((origin) => (
          <TableRow key={origin}>
            <TableCell>{origin}</TableCell>
            <TableCell>
              {corsEnabled ? (
                <IconButton onClick={() => handleDeleteOrigin(origin)} color="error">
                  <Delete />
                </IconButton>
              ) : (
                <Typography color="textSecondary">Desactivado</Typography>
              )}
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

// Asegurar que las variables y funciones estén definidas
const corsEnabled = true; // Valor por defecto para evitar errores

const handleDeleteOrigin = (origin: string) => {
  console.error(`handleDeleteOrigin no implementado. Intentando eliminar: ${origin}`);
};

const origins: string[] = []; // Inicializar como un array vacío para evitar errores

// frontend/src/app/admin/gamification/page.tsx
"use client";

import { useState, useEffect } from "react";
import { Box, Typography, Grid, CardContent } from "@mui/material";
import { useAuth } from "@/lib/auth/context";
import fetchAPI from "@/lib/api";
import { GradientCard, GlassCard } from "@/components/ui/Styled";
import { BarChart, Bar, XAxis, YAxis, Tooltip, PieChart, Pie, Cell } from "recharts";

interface GamificationKPIs {
  total_events: number;
  active_users: number;
  total_badges: number;
  total_points: number;
  rankings: { username: string; points: number; badges: number }[];
  badge_distribution: { name: string; count: number }[];
  event_distribution: { name: string; count: number }[];
}

export default function GamificationDashboard() {
  const { user } = useAuth();
  const [kpis, setKpis] = useState<GamificationKPIs | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchKPIs = async () => {
      if (user?.rol !== "admin") {
        setError("No autorizado");
        setLoading(false);
        return;
      }
      try {
        const { data } = await fetchAPI<GamificationKPIs>("/v1/gamification/kpis");
        setKpis(data);
      } catch (err) {
        setError("Error al cargar los KPIs");
      } finally {
        setLoading(false);
      }
    };
    fetchKPIs();
  }, [user]);

  if (loading) return <div>Cargando...</div>;
  if (error) return <div>{error}</div>;

  const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"];

  return (
    <Box sx={{ p: 4 }}>
      <Typography variant="h4" gutterBottom>Gamification Dashboard</Typography>

      {/* Resumen General */}
      <Grid container spacing={3}>
        <Grid item xs={12} sm={6} md={3}>
          <GradientCard>
            <CardContent>
              <Typography variant="h6">Eventos Registrados</Typography>
              <Typography variant="h4">{kpis?.total_events}</Typography>
            </CardContent>
          </GradientCard>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <GradientCard>
            <CardContent>
              <Typography variant="h6">Usuarios Activos</Typography>
              <Typography variant="h4">{kpis?.active_users}</Typography>
            </CardContent>
          </GradientCard>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <GradientCard>
            <CardContent>
              <Typography variant="h6">Badges Otorgados</Typography>
              <Typography variant="h4">{kpis?.total_badges}</Typography>
            </CardContent>
          </GradientCard>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <GradientCard>
            <CardContent>
              <Typography variant="h6">Puntos Totales</Typography>
              <Typography variant="h4">{kpis?.total_points}</Typography>
            </CardContent>
          </GradientCard>
        </Grid>
      </Grid>

      {/* Gráficos */}
      <Grid container spacing={3} sx={{ mt: 4 }}>
        <Grid item xs={12} md={6}>
          <GlassCard>
            <CardContent>
              <Typography variant="h6">Distribución de Badges</Typography>
              <PieChart width={400} height={300}>
                <Pie
                  data={kpis?.badge_distribution}
                  dataKey="count"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                  fill="#8884d8"
                >
                  {kpis?.badge_distribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </CardContent>
          </GlassCard>
        </Grid>
        <Grid item xs={12} md={6}>
          <GlassCard>
            <CardContent>
              <Typography variant="h6">Actividad por Tipo de Evento</Typography>
              <BarChart width={400} height={300} data={kpis?.event_distribution}>
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="#8884d8" />
              </BarChart>
            </CardContent>
          </GlassCard>
        </Grid>
      </Grid>
    </Box>
  );
}

// frontend/src/app/user/transactions/page.tsx
// Página de historial y detalles de transacciones de créditos

"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { motion, AnimatePresence } from "framer-motion";
import {
  Box,
  Typography,
  Avatar,
  Tab,
  Divider
} from "@mui/material";
import { styled, useTheme } from '@mui/material/styles';
import {
  History,
  ArrowUpward,
  ArrowDownward,
  Paid,
  CreditCard,
  AccountBalance,
  CheckCircle,
  Pending,
  Error
} from "@mui/icons-material";
import FeatureDisabled from '@/components/ui/FeatureDisabled';
import { StyledTabs, StatusChip } from '@/components/ui/Styled';
import { CreditTransaction } from '@/lib/types';

const TransactionCard = styled(Box)(({ theme }) => ({
  background: 'rgba(255, 255, 255, 0.85)',
  borderRadius: '16px',
  padding: theme.spacing(3),
  boxShadow: theme.shadows[4],
  border: '1px solid rgba(222, 226, 230, 0.5)',
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-4px)',
    boxShadow: theme.shadows[6],
  },
}));

export default function TransactionsPage() {
  const { user } = useAuth();
  const router = useRouter();
  const theme = useTheme();
  const [transactions, setTransactions] = useState<CreditTransaction[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [typeFilter, setTypeFilter] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [enableCredits, setEnableCredits] = useState<boolean | null>(null);

  useEffect(() => {
    const checkSettingsAndFetchTransactions = async () => {
      try {
        const { data: settingsData } = await fetchAPI("/v1/settings/disable_credits");
        const isEnabled = settingsData !== "true" && settingsData !== true;
        setEnableCredits(isEnabled);

        if (!isEnabled) {
          return;
        }

        const { data } = await fetchAPI<CreditTransaction[]>("/v1/payments/transactions");
        setTransactions(data || []);
      } catch (err) {
        setError((err as Error)?.message || "Error al cargar transacciones");
      }
    };
    checkSettingsAndFetchTransactions();
  }, [router]);

  const filtered = transactions.filter(t => {
    // Filtro por tipo (entrada/salida)
    if (typeFilter === 'in') return t.amount > 0;
    if (typeFilter === 'out') return t.amount < 0;
    if (typeFilter !== 'all') return false;
    
    // Filtro por estado
    if (statusFilter === 'completed') return t.payment_status === 'completed';
    if (statusFilter === 'pending') return t.payment_status === 'pending';
    if (statusFilter === 'failed') return t.payment_status === 'failed';
    
    // Todos
    return true;
  });

  const getPaymentMethodIcon = (method?: string) => {
    switch (method?.toLowerCase()) {
      case 'card':
        return <CreditCard fontSize="small" />;
      case 'bank':
        return <AccountBalance fontSize="small" />;
      default:
        return <Paid fontSize="small" />;
    }
  };

  if (enableCredits === null) return null;

  return (
    <FeatureDisabled message="Esta funcionalidad no está habilitada en este momento." isEnabled={enableCredits}>
      <Box sx={{
        minHeight: "100vh",
        background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
        p: { xs: 2, md: 4 },
        color: 'text.primary'
      }}>
        <Box sx={{ 
          maxWidth: "1200px", 
          mx: "auto",
          position: 'relative'
        }}>
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Typography
              variant="h3"
              sx={{
                mb: 4,
                fontWeight: "bold",
                background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                display: 'inline-block',
                letterSpacing: '-0.5px'
              }}
            >
              Historial de Transacciones
            </Typography>
          </motion.div>

          <Box sx={{ display: 'flex', gap: 2, mb: 4, flexDirection: { xs: 'column', sm: 'row' } }}>
            <StyledTabs
              value={typeFilter}
              onChange={(e, newValue) => {
                setTypeFilter(newValue);
                setStatusFilter('all'); // Reset status filter when changing type
              }}
              textColor="primary"
              indicatorColor="primary"
              variant="scrollable"
              scrollButtons="auto"
              sx={{ 
                background: 'rgba(255, 255, 255, 0.7)',
                borderRadius: '12px',
                padding: '4px',
                boxShadow: theme.shadows[1]
              }}
            >
              <Tab label="Todas" value="all" />
              <Tab label="Entradas" value="in" icon={<ArrowDownward fontSize="small" />} iconPosition="start" />
              <Tab label="Salidas" value="out" icon={<ArrowUpward fontSize="small" />} iconPosition="start" />
            </StyledTabs>

            <StyledTabs
              value={statusFilter}
              onChange={(e, newValue) => {
                setStatusFilter(newValue);
                setTypeFilter('all'); // Reset type filter when changing status
              }}
              textColor="primary"
              indicatorColor="primary"
              variant="scrollable"
              scrollButtons="auto"
              sx={{ 
                background: 'rgba(255, 255, 255, 0.7)',
                borderRadius: '12px',
                padding: '4px',
                boxShadow: theme.shadows[1]
              }}
            >
              <Tab label="Todos estados" value="all" />
              <Tab label="Completadas" value="completed" icon={<CheckCircle fontSize="small" />} iconPosition="start" />
              <Tab label="Pendientes" value="pending" icon={<Pending fontSize="small" />} iconPosition="start" />
              <Tab label="Fallidas" value="failed" icon={<Error fontSize="small" />} iconPosition="start" />
            </StyledTabs>
          </Box>

          {filtered.length === 0 ? (
            <Box sx={{
              textAlign: 'center',
              py: 6,
              background: 'rgba(255, 255, 255, 0.7)',
              borderRadius: '24px',
              backdropFilter: 'blur(12px)',
              border: '1px solid rgba(222, 226, 230, 0.5)',
              boxShadow: theme.shadows[2]
            }}>
              <History sx={{ 
                fontSize: 48, 
                color: 'text.secondary', 
                mb: 2,
                opacity: 0.5
              }} />
              <Typography variant="h6" color="text.secondary">
                No hay transacciones registradas
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                {user ? 'Todas tus transacciones aparecerán aquí' : 'Las transacciones de créditos aparecerán aquí'}
              </Typography>
            </Box>
          ) : (
            <AnimatePresence>
              <Box
                sx={{
                  display: 'grid',
                  gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', lg: 'repeat(3, 1fr)' },
                  gap: 3
                }}
              >
                {filtered.map((t) => (
                  <motion.div
                    key={t.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                    whileHover={{ scale: 1.02 }}
                  >
                    <TransactionCard>
                      <Box sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 2, 
                        mb: 2 
                      }}>
                        <Avatar
                          sx={{
                            bgcolor: t.amount > 0 ? 'success.main' : 'error.main',
                            color: 'white',
                            width: 48,
                            height: 48,
                            boxShadow: theme.shadows[2]
                          }}
                        >
                          {t.amount > 0 ? <ArrowDownward /> : <ArrowUpward />}
                        </Avatar>
                        <Box sx={{ overflow: 'hidden' }}>
                          <Typography 
                            variant="h6" 
                            fontWeight="bold"
                            noWrap
                            color="text.primary"
                          >
                            {t.transaction_type}
                          </Typography>
                          <Box sx={{ 
                            display: 'flex', 
                            alignItems: 'center', 
                            gap: 1,
                            mt: 0.5
                          }}>
                            <Typography 
                              variant="body2" 
                              color="text.secondary"
                              fontSize="0.75rem"
                            >
                              {new Date(t.timestamp).toLocaleString()}
                            </Typography>
                            <StatusChip 
                              label={t.payment_status} 
                              size="small"
                              color={
                                t.payment_status === 'completed' ? 'success' : 
                                t.payment_status === 'pending' ? 'warning' : 'error'
                              }
                            />
                          </Box>
                        </Box>
                      </Box>
                      <Divider sx={{ 
                        mb: 2, 
                        borderColor: 'rgba(0,0,0,0.1)' 
                      }} />
                      <Typography
                        variant="h5"
                        color={t.amount > 0 ? "success.dark" : "error.dark"}
                        fontWeight="bold"
                        sx={{ mb: 1 }}
                      >
                        {t.amount > 0 ? '+' : ''}{t.amount} créditos
                      </Typography>
                      {user && t.payment_amount && (
                        <Box sx={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: 1,
                          mt: 2
                        }}>
                          <Box sx={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: 0.5,
                            color: 'text.secondary'
                          }}>
                            {getPaymentMethodIcon(t.payment_method)}
                            <Typography variant="body2">
                              ${t.payment_amount.toFixed(2)}
                            </Typography>
                          </Box>
                          {t.payment_method && (
                            <Typography 
                              variant="caption" 
                              color="text.secondary"
                              sx={{ ml: 0.5 }}
                            >
                              • {t.payment_method}
                            </Typography>
                          )}
                        </Box>
                      )}
                    </TransactionCard>
                  </motion.div>
                ))}
              </Box>
            </AnimatePresence>
          )}
        </Box>
      </Box>
    </FeatureDisabled>
  );
}

// frontend/src/app/user/points/page.tsx
// Página de historial y progreso de puntos y gamificación

"use client";

import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { GlassCard, GradientText, TimelineIcon, EmptyState } from "@/components/ui";
import { Box, Typography, Tabs, Tab, styled, Chip, useTheme } from "@mui/material";

const TimelineItemContainer = styled(motion.div)(({ theme }) => ({
  display: "flex",
  gap: theme.spacing(3),
  position: "relative",
  paddingLeft: theme.spacing(6),
  paddingBottom: theme.spacing(4),
  borderLeft: `2px solid ${theme.palette.divider}`,
  "&:last-child": {
    borderLeft: "none",
    paddingBottom: 0,
  },
  "&::before": {
    content: '""',
    position: "absolute",
    left: "-9px",
    top: 0,
    width: "16px",
    height: "16px",
    borderRadius: "50%",
    background: theme.palette.primary.main,
    boxShadow: `0 0 0 4px ${theme.palette.primary.light}33`,
  },
}));

const StyledTabs = styled(Tabs)(({ theme }) => ({
  "& .MuiTabs-indicator": {
    backgroundColor: theme.palette.primary.main,
    height: 3,
    borderRadius: 3,
  },
  "& .MuiTab-root": {
    color: theme.palette.text.secondary,
    opacity: 0.8,
    fontSize: "0.875rem",
    fontWeight: 500,
    textTransform: "capitalize",
    minWidth: "auto",
    padding: "6px 16px",
    "&.Mui-selected": {
      color: theme.palette.primary.main,
      opacity: 1,
    },
    "&:hover": {
      color: theme.palette.primary.main,
      opacity: 1,
    },
  },
}));

const StyledGlassCard = styled(GlassCard)(({ theme }) => ({
  position: "relative",
  overflow: "hidden",
  background: "rgba(255, 255, 255, 0.9)",
  backdropFilter: "blur(12px)",
  border: `1px solid ${theme.palette.divider}`,
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
  "& > div": {
    position: "relative",
    zIndex: 1,
  },
}));

const PointsBadge = styled(Chip)(({ theme }) => ({
  fontSize: "1rem",
  fontWeight: "bold",
  padding: theme.spacing(1, 2),
  background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,
  color: theme.palette.common.white,
}));

export default function PointsPage() {
  const theme = useTheme();
  const { user } = useAuth();
  const router = useRouter();
  const [pointsHistory, setPointsHistory] = useState<any[]>([]);
  const [enablePoints, setEnablePoints] = useState<boolean | null>(null);
  const [groupedPoints, setGroupedPoints] = useState<Record<string, any[]>>({});
  const [selectedTab, setSelectedTab] = useState("all");

  useEffect(() => {
    const checkSettingsAndFetchPoints = async () => {
      try {
        const { data: settingsData } = await fetchAPI("/v1/settings/enable_points");
        const isEnabled = settingsData === "true" || settingsData === true;
        setEnablePoints(isEnabled);

        if (!isEnabled) {
          return;
        }

        const { data }: { data: any[] } = await fetchAPI("/v1/gamification/me");
        if (data) {
          setPointsHistory(Array.isArray(data) ? data : []);

          const grouped = data.reduce((acc, entry) => {
            const key = entry.event_type.name;
            if (!acc[key]) acc[key] = [];
            acc[key].push(entry);
            return acc;
          }, {} as Record<string, any[]>);

          setGroupedPoints(grouped);
        }
      } catch (err) {
        console.error("Error al obtener historial de puntos:", err);
      }
    };
    checkSettingsAndFetchPoints();
  }, [router]);

  if (enablePoints === null) return null;

  if (!enablePoints) {
    return (
      <Box
        sx={{
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          p: 8,
        }}
      >
        <Typography variant="h6" color="textSecondary">
          Esta funcionalidad no está habilitada en este momento.
        </Typography>
      </Box>
    );
  }

  const eventTypes = Object.keys(groupedPoints);
  const filteredPoints = selectedTab === "all" ? pointsHistory : groupedPoints[selectedTab] || [];
  const totalPoints = pointsHistory.reduce((sum, entry) => sum + entry.points, 0);

  return (
    <Box
      sx={{
        minHeight: "100vh",
        background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
        py: { xs: 4, md: 8 },
        px: { xs: 2, md: 8 },
      }}
    >
      <Box sx={{ maxWidth: "1200px", mx: "auto" }}>
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Box sx={{ mb: 6, textAlign: "center" }}>
            <Typography variant="h3" sx={{ fontWeight: "bold", mb: 1 }}>
              <GradientText>Historial de Puntos</GradientText>
            </Typography>
            <Typography variant="subtitle1" color="text.secondary">
              Tu progreso y logros en la plataforma
            </Typography>
          </Box>
        </motion.div>

        <StyledTabs
          value={selectedTab}
          onChange={(_, val) => setSelectedTab(val)}
          variant="scrollable"
          scrollButtons="auto"
          sx={{ 
            mb: 4,
            "& .MuiTabs-scroller": {
              padding: "0 16px",
            },
            background: "rgba(255, 255, 255, 0.7)",
            borderRadius: theme.shape.borderRadius,
            px: 2,
            py: 1,
          }}
        >
          <Tab label="Todos" value="all" />
          {eventTypes.map((type) => (
            <Tab 
              key={type} 
              label={type.replace(/_/g, " ")} 
              value={type} 
              icon={<TimelineIcon type={type} />}
              iconPosition="start"
            />
          ))}
        </StyledTabs>

        <StyledGlassCard sx={{ p: { xs: 4, md: 6 } }}>
          <Box
            sx={{
              display: "flex",
              flexDirection: { xs: "column", md: "row" },
              alignItems: { xs: "flex-start", md: "center" },
              justifyContent: "space-between",
              mb: 6,
              gap: 3,
            }}
          >
            <Box>
              <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
                Puntos Totales
              </Typography>
              <Typography 
                variant="h3" 
                sx={{ 
                  fontWeight: "bold",
                  background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  display: 'inline-block'
                }}
              >
                {totalPoints}
              </Typography>
            </Box>
            {user && (
              <Box sx={{ textAlign: { xs: "left", md: "right" } }}>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                  Nivel Actual
                </Typography>
                <PointsBadge
                  label="Experto"
                />
              </Box>
            )}
          </Box>

          <Box sx={{ "& > * + *": { mt: 4 } }}>
            <AnimatePresence>
              {filteredPoints.map((entry, index) => (
                <TimelineItemContainer
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <TimelineIcon type={entry.event_type.name} />
                  <Box sx={{ flex: 1 }}>
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: { xs: "column", sm: "row" },
                        justifyContent: "space-between",
                        alignItems: { xs: "flex-start", sm: "center" },
                        mb: 2,
                        gap: 1,
                      }}
                    >
                      <Typography variant="h6" sx={{ color: "text.primary", fontWeight: "semibold" }}>
                        +{entry.points} puntos
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {new Date(entry.created_at).toLocaleDateString("es-ES", {
                          day: "numeric",
                          month: "short",
                          year: "numeric",
                        })}
                      </Typography>
                    </Box>
                    <Typography variant="body1" sx={{ color: "text.primary", mb: 2 }}>
                      {entry.event_type.description}
                    </Typography>
                    <Chip
                      label={entry.event_type.name}
                      size="small"
                      sx={{ 
                        background: theme.palette.action.selected,
                        color: theme.palette.text.primary,
                      }}
                    />
                  </Box>
                </TimelineItemContainer>
              ))}
            </AnimatePresence>

            {filteredPoints.length === 0 && (
              <EmptyState
                icon="📊"
                title="Aún no tienes puntos"
                description="Realiza actividades en la plataforma para ganar puntos"
              />
            )}
          </Box>
        </StyledGlassCard>
      </Box>
    </Box>
  );
}

// frontend/src/app/user/coupon/page.tsx
// Página de gestión y canjeo de cupones del usuario

"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { motion, AnimatePresence } from "framer-motion";
import {
  Box,
  Typography,
  Button,
  Chip,
  Snackbar,
  Alert,
  useTheme,
  styled,
  Tabs,
  Tab,
  Paper,
  Avatar,
  Divider,
  Grid
} from "@mui/material";
import {
  LocalOffer,
  CheckCircle,
  Pending,
  ErrorOutline,
  Block,
  Redeem
} from "@mui/icons-material";

// Styled Components
const CouponCard = styled(Paper)(({ theme }) => ({
  background: 'rgba(248, 249, 250, 0.85)',
  backdropFilter: 'blur(10px)',
  borderRadius: '16px',
  padding: theme.spacing(3),
  boxShadow: theme.shadows[4],
  border: '1px solid rgba(222, 226, 230, 0.5)',
  transition: 'all 0.3s ease',
  '&:hover': {
    transform: 'translateY(-4px)',
    boxShadow: theme.shadows[6],
    background: 'rgba(248, 249, 250, 0.95)'
  }
}));

const StatusChip = styled(Chip)(({ theme }) => ({
  borderRadius: '8px',
  fontWeight: 600,
  fontSize: '0.75rem',
  padding: '2px 8px',
  height: 'auto',
  color: 'white',
  '&.MuiChip-colorSuccess': {
    backgroundColor: theme.palette.success.main
  },
  '&.MuiChip-colorWarning': {
    backgroundColor: theme.palette.warning.main
  },
  '&.MuiChip-colorError': {
    backgroundColor: theme.palette.error.main
  },
  '&.MuiChip-colorDefault': {
    backgroundColor: theme.palette.grey[500]
  }
}));

const StyledTabs = styled(Tabs)(({ theme }) => ({
  '& .MuiTabs-indicator': {
    backgroundColor: theme.palette.primary.main,
    height: 3,
    borderRadius: '2px'
  },
  '& .MuiTab-root': {
    color: theme.palette.text.primary,
    opacity: 0.8,
    fontSize: '0.875rem',
    fontWeight: 500,
    textTransform: 'capitalize',
    padding: '12px 16px',
    minHeight: 'auto',
    '&.Mui-selected': {
      color: theme.palette.primary.main,
      opacity: 1,
      fontWeight: 600
    },
    '&:hover': {
      opacity: 1,
      color: theme.palette.primary.dark
    }
  }
}));

export default function CouponPage() {
  const { coupons, setCoupons, setCredits } = useAuth();
  const router = useRouter();
  const theme = useTheme();
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [enableCoupons, setEnableCoupons] = useState<boolean | null>(null);
  const [statusFilter, setStatusFilter] = useState<string>('active');

  useEffect(() => {
    if (!coupons) router.push("/");
  }, [coupons, router]);

  const handleRedeem = async (couponId: number) => {
    try {
      const { data } = await fetchAPI<any>(`/v1/coupons/redeem/${couponId}`, {
        method: "POST",
      });
      if (data) {
        setCoupons(coupons.map((c) => (c.id === couponId ? data : c)));
        const { data: info } = await fetchAPI<any>("/whoami");
        setCredits(info.credits);
        setSuccess("Cupón canjeado exitosamente");
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al canjear cupón");
    }
  };

  const filteredCoupons = coupons.filter(coupon => {
    if (statusFilter === 'all') return true;
    return coupon.status === statusFilter;
  });

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <CheckCircle fontSize="small" />;
      case 'pending': return <Pending fontSize="small" />;
      case 'expired': return <ErrorOutline fontSize="small" />;
      case 'disabled': return <Block fontSize="small" />;
      case 'redeemed': return <Redeem fontSize="small" />;
      default: return <LocalOffer fontSize="small" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'success';
      case 'pending': return 'warning';
      case 'redeemed': return 'primary';
      case 'expired':
      case 'disabled': 
      default: return 'error';
    }
  };

  //if (enableCoupons === null) return null;

 /* if (!enableCoupons) {
    return (
      <Box sx={{
        minHeight: "100vh",
        background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        p: 4
      }}>
        <Typography variant="h6" color="text.secondary">
          Esta funcionalidad no está habilitada en este momento.
        </Typography>
      </Box>
    );
  }
*/
  return (
    <Box sx={{
      minHeight: "100vh",
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      p: { xs: 2, md: 4 },
      color: 'text.primary'
    }}>
      <Box sx={{ 
        maxWidth: "1200px", 
        mx: "auto",
        position: 'relative'
      }}>
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Typography
            variant="h3"
            sx={{
              mb: 4,
              fontWeight: "bold",
              background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              display: 'inline-block',
              letterSpacing: '-0.5px'
            }}
          >
            Mis Cupones
          </Typography>
        </motion.div>

        <Paper sx={{ mb: 4, borderRadius: '12px', overflow: 'hidden' }}>
          <StyledTabs
            value={statusFilter}
            onChange={(e, newValue) => setStatusFilter(newValue)}
            variant="scrollable"
            scrollButtons="auto"
          >
            
            <Tab label="Activos" value="active" icon={<CheckCircle fontSize="small" />} iconPosition="start" />
            <Tab label="Canjeados" value="redeemed" icon={<Redeem fontSize="small" />} iconPosition="start" />
            <Tab label="Pendientes" value="pending" icon={<Pending fontSize="small" />} iconPosition="start" />
            <Tab label="Expirados" value="expired" icon={<ErrorOutline fontSize="small" />} iconPosition="start" />
            <Tab label="Desactivados" value="disabled" icon={<Block fontSize="small" />} iconPosition="start" />
          </StyledTabs>
        </Paper>

        {filteredCoupons.length === 0 ? (
          <Box sx={{
            textAlign: 'center',
            py: 6,
            background: 'rgba(255, 255, 255, 0.7)',
            borderRadius: '24px',
            backdropFilter: 'blur(12px)',
            border: '1px solid rgba(222, 226, 230, 0.5)',
            boxShadow: theme.shadows[2]
          }}>
            <LocalOffer sx={{ 
              fontSize: 48, 
              color: 'text.secondary', 
              mb: 2,
              opacity: 0.5
            }} />
            <Typography variant="h6" color="text.secondary">
              No hay cupones disponibles
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              {statusFilter === 'all' 
                ? 'No tienes cupones registrados' 
                : `No tienes cupones con estado ${statusFilter}`}
            </Typography>
          </Box>
        ) : (
          <AnimatePresence>
            <Grid container spacing={3}>
              {filteredCoupons.map((coupon) => (
                <Grid item xs={12} sm={6} md={4} key={coupon.id}>
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.3 }}
                    whileHover={{ scale: 1.02 }}
                  >
                    <CouponCard>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                        <Avatar
                          sx={{
                            bgcolor: theme.palette.primary.main,
                            color: 'white',
                            width: 48,
                            height: 48,
                            boxShadow: theme.shadows[2]
                          }}
                        >
                          {getStatusIcon(coupon.status)}
                        </Avatar>
                        <Box>
                          <Typography variant="h6" fontWeight="bold">
                            {coupon.name}
                          </Typography>
                          <StatusChip 
                            label={coupon.status} 
                            size="small"
                            color={getStatusColor(coupon.status)}
                            sx={{ mt: 0.5 }}
                          />
                        </Box>
                      </Box>
                      
                      <Divider sx={{ my: 2, borderColor: 'rgba(0,0,0,0.1)' }} />
                      
                      <Typography variant="body1" sx={{ mb: 2 }}>
                        {coupon.description || "Sin descripción"}
                      </Typography>
                      
                      <Box sx={{ 
                        display: 'flex', 
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        mt: 3
                      }}>
                        <Typography variant="h5" color="primary.main" fontWeight="bold">
                          {coupon.credits} créditos
                        </Typography>
                        
                        {coupon.status === 'active' && (
                          <Button
                            variant="contained"
                            color="primary"
                            onClick={() => handleRedeem(coupon.id)}
                            startIcon={<Redeem />}
                          >
                            Canjear
                          </Button>
                        )}
                      </Box>
                    </CouponCard>
                  </motion.div>
                </Grid>
              ))}
            </Grid>
          </AnimatePresence>
        )}
      </Box>

      <Snackbar
        open={!!error}
        autoHideDuration={3000}
        onClose={() => setError(null)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert severity="error" sx={{ boxShadow: theme.shadows[6], borderRadius: '12px' }}>
          {error}
        </Alert>
      </Snackbar>
      
      <Snackbar
        open={!!success}
        autoHideDuration={3000}
        onClose={() => setSuccess(null)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert severity="success" sx={{ boxShadow: theme.shadows[6], borderRadius: '12px' }}>
          {success}
        </Alert>
      </Snackbar>
    </Box>
  );
}



que tal? bien? Estas preparado para ampliar el backend con nuevos modelos? o mejorar el frontend? estas preparado ya para hincarle
el diente a neptuno y colaborar en nuestro proyecto? revisa bien todo lo que te he pasado:
- archivos de configuración
- archivos del backend
- archivos del frontend

