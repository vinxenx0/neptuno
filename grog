Excelente, vamos a perfilar algunos cambios que tienen que ver
con el flujo de usuario y los escenarios que va pasando,
vamos afinar un poco la usabilidad y accesiblidad en el proceso de compra,
siguiendo las pautas de implantar un modulo de marketplace basico 
de manera robusta y escalable.

Haz las siguientes mejoras en esta implantación:


En el navbar haremos estos cambios:

- eliminamos el icono de marketplace
- ponemos el enlace "MARKETPLACE" en texto en la sección {/* Enlaces desktop */}
- pondremos tambien el enlace "MARKETPLACE" en text en  {/* Menú hamburguesa */} despues de INICIO
- cuando no hay creditos (0) que tb salga el icono

A la hora de pagar el sistema debe darte dos opciones:

- pagar con los creditos disponibles
- pagar con medio de pago (niciando sesion)
- hacer una pagina de checkout mas descriptiva y usable

aqui tienes el archivo:

// frontend/src/components/web/Navbar.tsx
// Barra de navegación principal con estado de usuario y notificaciones
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/lib/auth/context";
import Link from "next/link";
import { usePathname } from "next/navigation";
import fetchAPI from "@/lib/api";
import StoreIcon from "@mui/icons-material/Store";
import {
  Button,
  Avatar,
  IconButton,
  Menu,
  MenuItem,
  useTheme,
  styled,
  Box,
  Typography,
  Snackbar,
  Alert,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Tooltip,
  Badge,
} from "@mui/material";
import {
  MonetizationOn,
  Settings,
  ListAlt,
  People,
  Dashboard,
  Login,
  PersonAdd,
  Person,
  Home,
  Star,
  EmojiEvents,
  Leaderboard,
  School,
  Menu as MenuIcon,
  ContactMail,
  Close,
  Key,
  LocalActivity,
  Mail,
  Favorite,
} from "@mui/icons-material";
import Image from "next/image";
import ShoppingCartIcon from "@mui/icons-material/ShoppingCart";
import { CartItem } from "@/lib/types";

const MobileBottomNav = styled(Box)(({ theme }) => ({
  position: "fixed",
  bottom: 0,
  left: 0,
  right: 0,
  background: "rgba(255, 255, 255, 0.1)",
  backdropFilter: "blur(10px)",
  borderTop: `1px solid ${theme.palette.divider}`,
  padding: theme.spacing(1),
  zIndex: 999,
  justifyContent: "space-around",
  alignItems: "center",
  display: "flex",
  [theme.breakpoints.up("md")]: {
    display: "none",
  },
}));

const GlassNavbar = styled("nav")(({ theme }) => ({
  background: "rgba(255, 255, 255, 0.1)",
  backdropFilter: "blur(10px)",
  borderBottom: `1px solid ${theme.palette.divider}`,
  padding: theme.spacing(1, 2),
  position: "fixed",
  top: 0,
  left: 0,
  right: 0,
  zIndex: 1000,
}));

const NavContainer = styled(Box)(({ theme }) => ({
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
  maxWidth: "1200px",
  margin: "0 auto",
  [theme.breakpoints.down("md")]: {
    flexDirection: "row",
    alignItems: "center",
    gap: 1,
  },
}));

export default function Navbar() {
  const theme = useTheme();
  const pathname = usePathname();
  const {
    user,
    credits,
    gamification,
    coupons,
    setCredits,
    setGamification,
    logout,
  } = useAuth();
  const [settingsAnchorEl, setSettingsAnchorEl] = useState<null | HTMLElement>(
    null
  );
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [disableCredits, setDisableCredits] = useState(false);
  const [enableRegistration, setEnableRegistration] = useState(true);
  const [enablePoints, setEnablePoints] = useState(true);
  const [enableCoupons, setEnableCoupons] = useState(true);
  const [enableBadges, setEnableBadges] = useState(true);
  const [enablePaymentMethods, setEnablePaymentMethods] = useState(true);
  const [anonUsername, setAnonUsername] = useState<string | null>(null);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [newBadge, setNewBadge] = useState<string | null>(null);
  const [cartItemsCount, setCartItemsCount] = useState(0);

  useEffect(() => {
    const fetchCartCount = async () => {
      const { data } = await fetchAPI<CartItem[]>("/v1/marketplace/cart");
      setCartItemsCount(data?.length || 0);
    };
    fetchCartCount();
  }, []);

  useEffect(() => {
    const storedAnonUsername = localStorage.getItem("anonUsername");
    setAnonUsername(storedAnonUsername);
  }, []);

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const [
          disableCreditsRes,
          enableRegistrationRes,
          enablePointsRes,
          enableCouponsRes,
          enableBadgesRes,
          enablePaymentMethodsRes,
        ] = await Promise.all([
          fetchAPI("/v1/settings/disable_credits"),
          fetchAPI("/v1/settings/enable_registration"),
          fetchAPI("/v1/settings/enable_points"),
          fetchAPI("/v1/settings/enable_coupons"),
          fetchAPI("/v1/settings/enable_badges"),
          fetchAPI("/v1/settings/enable_payment_methods"),
        ]);
        setDisableCredits(
          disableCreditsRes.data === "true" || disableCreditsRes.data === true
        );
        setEnableRegistration(
          enableRegistrationRes.data === "true" ||
            enableRegistrationRes.data === true
        );
        setEnablePoints(
          enablePointsRes.data === "true" || enablePointsRes.data === true
        );
        setEnableCoupons(
          enableCouponsRes.data === "true" || enableCouponsRes.data === true
        );
        setEnableBadges(
          enableBadgesRes.data === "true" || enableBadgesRes.data === true
        );
        setEnablePaymentMethods(
          enablePaymentMethodsRes.data === "true" ||
            enablePaymentMethodsRes.data === true
        );
      } catch (err) {
        console.error("Error al obtener configuraciones:", err);
      }
    };
    fetchSettings();
  }, []);

  interface InfoData {
    credits: number;
  }

  useEffect(() => {
    if (!enablePoints && !enableBadges) return;

    const interval = setInterval(async () => {
      try {
        const { data: infoData } = await fetchAPI<InfoData>("/whoami");
        if (infoData) {
          setCredits(infoData.credits);
        }

        const { data: gamificationData } = await fetchAPI(
          "/v1/gamification/me"
        );
        if (gamificationData && Array.isArray(gamificationData)) {
          const totalPoints = enablePoints
            ? gamificationData.reduce((sum, g) => sum + g.points, 0)
            : 0;
          const badges = enableBadges
            ? gamificationData.map((g) => g.badge).filter((b) => b !== null)
            : [];

          const previousBadges = JSON.parse(
            localStorage.getItem("badges") || "[]"
          );
          const currentBadgeIds = badges.map((b) => b.id);
          const newBadges = currentBadgeIds.filter(
            (id) => !previousBadges.includes(id)
          );
          if (newBadges.length > 0 && enableBadges) {
            const badge = badges.find((b) => b.id === newBadges[0]);
            setNewBadge(badge?.name || "Nuevo badge");
            setSnackbarOpen(true);
            localStorage.setItem("badges", JSON.stringify(currentBadgeIds));
          }

          setGamification({ points: totalPoints, badges });
        }
      } catch (err) {
        console.error("Error al actualizar datos:", err);
      }
    }, 30000);

    return () => clearInterval(interval);
  }, [setCredits, setGamification, enablePoints, enableBadges]);

  const handleSettingsMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setSettingsAnchorEl(event.currentTarget);
  };

  const handleSettingsMenuClose = () => {
    setSettingsAnchorEl(null);
  };

  const handleDrawerOpen = () => {
    setDrawerOpen(true);
  };

  const handleDrawerClose = () => {
    setDrawerOpen(false);
  };

  const availableCoupons = (coupons || []).filter(
    (coupon) =>
      coupon &&
      coupon.status === "active" &&
      (!coupon.expires_at || new Date(coupon.expires_at) > new Date())
  ).length;

  return (
    <>
      <GlassNavbar>
        <NavContainer>
          {/* Sección izquierda: Logo y menú hamburguesa */}
          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <IconButton
              onClick={handleDrawerOpen}
              sx={{ display: { xs: "block", md: "none" } }}
            >
              <MenuIcon />
            </IconButton>

            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              <Link href="/" passHref>
                <Box
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    gap: 1,
                    cursor: "pointer",
                  }}
                >
                  <Image
                    src="/logo.png"
                    alt="Logo Neptuno"
                    width={40}
                    height={40}
                    style={{ borderRadius: "50%" }}
                  />
                  <Typography
                    variant="h6"
                    component="span"
                    className="app-logo"
                    sx={{
                      fontWeight: "bold",
                      display: {
                        xs: "none",
                        md: "block",
                      },
                    }}
                  >
                    Neptuno
                  </Typography>
                </Box>
              </Link>
            </Box>
          </Box>

          {/* Sección derecha: Elementos específicos para móvil */}
          <Box
            sx={{
              display: { xs: "flex", md: "none" },
              alignItems: "center",
              gap: 1,
            }}
          >
            {/* Mensajes */}
            <Tooltip title="Mensajes (próximamente)">
              <IconButton sx={{ color: theme.palette.text.disabled }}>
                <Mail />
              </IconButton>
            </Tooltip>

            {/* Favoritos */}
            <Tooltip title="Likes (próximamente)">
              <IconButton sx={{ color: theme.palette.text.disabled }}>
                <Favorite />
              </IconButton>
            </Tooltip>

            {/* Marketplace */}
            <Tooltip title="Marketplace">
              <Link href="/checkout" passHref>
              <IconButton sx={{ color: theme.palette.text.disabled }}>
                <ShoppingCartIcon />
              </IconButton>
              </Link>
            </Tooltip>

            {/* Settings solo para admin */}
            {user?.rol === "admin" && (
              <IconButton
                onClick={handleSettingsMenuOpen}
                sx={{ color: "inherit" }}
              >
                <Settings />
              </IconButton>
            )}
          </Box>

          {/* Sección derecha: Versión desktop */}
          <Box
            sx={{
              display: { xs: "none", md: "flex" },
              alignItems: "center",
              gap: 2,
            }}
          >
            {/* Enlaces desktop */}
            <Box sx={{ display: "flex", gap: 2, mr: 1 }}>
              <Button
                component={Link}
                href="/ejemplos"
                className={pathname === "/ejemplos" ? "active-link" : ""}
              >
                Ejemplos
              </Button>
              <Button
                component={Link}
                href="/rankings"
                className={pathname === "/rankings" ? "active-link" : ""}
              >
                Rankings
              </Button>
            </Box>

            {/* Iconos de notificaciones - Orden modificado */}
            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              {/* Nuevo orden: corazón primero */}
              <Tooltip title="Likes (próximamente)">
                <IconButton sx={{ color: theme.palette.text.disabled }}>
                  <Favorite />
                </IconButton>
              </Tooltip>

              {/* Mensaje segundo */}
              <Tooltip title="Mensajes (próximamente)">
                <IconButton sx={{ color: theme.palette.text.disabled }}>
                  <Mail />
                </IconButton>
              </Tooltip>

              <Tooltip title="Marketplace">
              <Link href="/marketplace" passHref>
                <IconButton sx={{ color: theme.palette.text.primary }}>
                  <StoreIcon />
                </IconButton>
              </Link>
            </Tooltip>
            {/* Carrito existente */}
            <Link href="/checkout" passHref>
              <IconButton className="notification-icon">
                <Badge badgeContent={cartItemsCount} color="secondary">
                  <ShoppingCartIcon />
                </Badge>
              </IconButton>
            </Link>

              {/* Créditos tercero */}
              {!disableCredits && credits > 0 && (
                <Link href="/user/transactions" passHref>
                  <IconButton className="notification-icon">
                    <MonetizationOn />
                    <span className="notification-badge credits-badge">
                      {credits}
                    </span>
                  </IconButton>
                </Link>
              )}

              {enableCoupons && (
                <Link href="/user/coupon" passHref>
                  <Tooltip title="Tus cupones">
                    <IconButton className="notification-icon">
                      <Badge badgeContent={availableCoupons} color="secondary">
                        <LocalActivity />
                      </Badge>
                    </IconButton>
                  </Tooltip>
                </Link>
              )}

              {gamification && (
                <>
                  {enablePoints && (
                    <Link href="/user/points" passHref>
                      <IconButton className="notification-icon">
                        <Star />
                        <span className="notification-badge points-badge">
                          {gamification.points}
                        </span>
                      </IconButton>
                    </Link>
                  )}
                  {enableBadges && (
                    <Link href="/user/badges" passHref>
                      <IconButton className="notification-icon">
                        <EmojiEvents />
                        <span className="notification-badge badges-badge">
                          {gamification.badges.length}
                        </span>
                      </IconButton>
                    </Link>
                  )}
                </>
              )}
            </Box>

            {/* Menú admin y usuario */}
            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              {user?.rol === "admin" && (
                <>
                  <IconButton
                    onClick={handleSettingsMenuOpen}
                    sx={{ color: "inherit" }}
                  >
                    <Settings />
                  </IconButton>
                  <Menu
                    anchorEl={settingsAnchorEl}
                    open={Boolean(settingsAnchorEl)}
                    onClose={handleSettingsMenuClose}
                    PaperProps={{
                      sx: {
                        background: "rgba(255, 255, 255, 0.9)",
                        backdropFilter: "blur(10px)",
                        borderRadius: "12px",
                        mt: 1,
                        minWidth: "200px",
                      },
                    }}
                  >
                    <MenuItem
                      onClick={handleSettingsMenuClose}
                      component={Link}
                      href="/admin/dashboard"
                    >
                      <Dashboard sx={{ mr: 1 }} /> Config
                    </MenuItem>
                    <MenuItem
                      onClick={handleSettingsMenuClose}
                      component={Link}
                      href="/admin/gamification"
                    >
                      <EmojiEvents sx={{ mr: 1 }} /> Gamification
                    </MenuItem>
                    <MenuItem
                      onClick={handleSettingsMenuClose}
                      component={Link}
                      href="/admin/revenues"
                    >
                      <MonetizationOn sx={{ mr: 1 }} /> Revenues
                    </MenuItem>
                    <MenuItem
                      onClick={handleSettingsMenuClose}
                      component={Link}
                      href="/admin/registry"
                    >
                      <ListAlt sx={{ mr: 1 }} /> Registros
                    </MenuItem>
                    <MenuItem
                      onClick={handleSettingsMenuClose}
                      component={Link}
                      href="/admin/users"
                    >
                      <People sx={{ mr: 1 }} /> Usuarios
                    </MenuItem>
                  </Menu>
                </>
              )}

              {user ? (
                <Tooltip title={user.username} arrow>
                  <IconButton
                    component={Link}
                    href="/user/dashboard"
                    className="user-avatar"
                  >
                    <Avatar
                      sx={{
                        bgcolor: theme.palette.primary.main,
                        width: 40,
                        height: 40,
                        fontSize: "1rem",
                      }}
                    >
                      {user.username[0].toUpperCase()}
                    </Avatar>
                  </IconButton>
                </Tooltip>
              ) : (
                <Tooltip
                  title={anonUsername ? "Iniciar sesión" : "Registrarse"}
                  arrow
                >
                  <Box sx={{ position: "relative" }}>
                    <IconButton
                      component={Link}
                      href={
                        anonUsername
                          ? "/user/auth/#login"
                          : "/user/auth/#register"
                      }
                      className="user-avatar"
                    >
                      <Avatar
                        sx={{
                          bgcolor: theme.palette.grey[500],
                          width: 40,
                          height: 40,
                          color: theme.palette.common.white,
                        }}
                      >
                        {anonUsername ? <Person /> : <Key />}
                      </Avatar>
                    </IconButton>
                    {anonUsername && (
                      <Box
                        sx={{
                          position: "absolute",
                          top: 0,
                          right: 0,
                          backgroundColor: theme.palette.secondary.main,
                          borderRadius: "50%",
                          width: 20,
                          height: 20,
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          border: `2px solid ${theme.palette.background.paper}`,
                        }}
                      >
                        <Key
                          sx={{
                            fontSize: 12,
                            color: theme.palette.common.white,
                          }}
                        />
                      </Box>
                    )}
                  </Box>
                </Tooltip>
              )}
            </Box>
          </Box>

          {/* Menú hamburguesa */}
          <Drawer anchor="left" open={drawerOpen} onClose={handleDrawerClose}>
            <List>
              <Box
                sx={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "space-between",
                  p: 2,
                  borderBottom: `1px solid ${theme.palette.divider}`,
                }}
              >
                <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                  <Image
                    src="/logo.png"
                    alt="Logo Neptuno"
                    width={40}
                    height={40}
                    style={{ borderRadius: "50%" }}
                  />
                  <Typography
                    variant="h6"
                    sx={{
                      fontWeight: "bold",
                      background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                      WebkitBackgroundClip: "text",
                      WebkitTextFillColor: "transparent",
                      display: "inline-block",
                    }}
                  >
                    Neptuno
                  </Typography>
                </Box>
                <IconButton onClick={handleDrawerClose}>
                  <Close />
                </IconButton>
              </Box>

              <ListItem component={Link} href="/">
                <ListItemIcon>
                  <Home />
                </ListItemIcon>
                <ListItemText primary="Inicio" />
              </ListItem>
              <ListItem component={Link} href="/ejemplos">
                <ListItemIcon>
                  <School />
                </ListItemIcon>
                <ListItemText primary="Ejemplos" />
              </ListItem>
              <ListItem component={Link} href="/rankings">
                <ListItemIcon>
                  <Leaderboard />
                </ListItemIcon>
                <ListItemText primary="Rankings" />
              </ListItem>
              <ListItem component={Link} href="/about/contact">
                <ListItemIcon>
                  <ContactMail />
                </ListItemIcon>
                <ListItemText primary="Contacto" />
              </ListItem>

              {user?.rol === "admin" && (
                <>
                  <ListItem component={Link} href="/admin/dashboard">
                    <ListItemIcon>
                      <Dashboard />
                    </ListItemIcon>
                    <ListItemText primary="Dashboard" />
                  </ListItem>
                  <ListItem component={Link} href="/admin/registry">
                    <ListItemIcon>
                      <ListAlt />
                    </ListItemIcon>
                    <ListItemText primary="Registros" />
                  </ListItem>
                  <ListItem component={Link} href="/admin/users">
                    <ListItemIcon>
                      <People />
                    </ListItemIcon>
                    <ListItemText primary="Usuarios" />
                  </ListItem>
                </>
              )}
              {user ? (
                <ListItem component={Link} href="/user/dashboard">
                  <ListItemIcon>
                    <Person />
                  </ListItemIcon>
                  <ListItemText primary={user.username} />
                </ListItem>
              ) : (
                <>
                  <ListItem component={Link} href="/user/auth/#login">
                    <ListItemIcon>
                      <Login />
                    </ListItemIcon>
                    <ListItemText primary="Iniciar Sesión" />
                  </ListItem>
                  {enableRegistration && (
                    <ListItem component={Link} href="/user/auth/#register">
                      <ListItemIcon>
                        <PersonAdd />
                      </ListItemIcon>
                      <ListItemText primary="Registrarse" />
                    </ListItem>
                  )}
                </>
              )}
            </List>
          </Drawer>
        </NavContainer>

        <Snackbar
          open={snackbarOpen}
          autoHideDuration={6000}
          onClose={() => setSnackbarOpen(false)}
        >
          <Alert
            onClose={() => setSnackbarOpen(false)}
            severity="success"
            sx={{ width: "100%" }}
          >
            ¡Felicidades! Has obtenido el badge: {newBadge}
          </Alert>
        </Snackbar>
      </GlassNavbar>

      <MobileBottomNav>
        {!disableCredits && credits > 0 && (
          <Link href="/user/transactions" passHref>
            <IconButton className="notification-icon">
              <MonetizationOn />
              <span className="notification-badge credits-badge">
                {credits}
              </span>
            </IconButton>
          </Link>
        )}

        {enableCoupons && (
          <Link href="/user/coupon" passHref>
            <Tooltip title="Tus cupones">
              <IconButton className="notification-icon">
                <Badge badgeContent={availableCoupons} color="secondary">
                  <LocalActivity />
                </Badge>
              </IconButton>
            </Tooltip>
          </Link>
        )}

        {user ? (
          <Tooltip title={user.username} arrow>
            <IconButton component={Link} href="/user/dashboard">
              <Avatar
                sx={{
                  bgcolor: theme.palette.primary.main,
                  width: 32,
                  height: 32,
                  fontSize: "0.9rem",
                }}
              >
                {user.username[0].toUpperCase()}
              </Avatar>
            </IconButton>
          </Tooltip>
        ) : (
          <Tooltip
            title={anonUsername ? "Iniciar sesión" : "Registrarse"}
            arrow
          >
            <IconButton
              component={Link}
              href={anonUsername ? "/user/auth/#login" : "/user/auth/#register"}
            >
              <Avatar
                sx={{
                  bgcolor: theme.palette.grey[500],
                  width: 32,
                  height: 32,
                  color: theme.palette.common.white,
                }}
              >
                {anonUsername ? (
                  <Person fontSize="small" />
                ) : (
                  <Key fontSize="small" />
                )}
              </Avatar>
            </IconButton>
          </Tooltip>
        )}

        {/* Mostrar icono de puntos incluso cuando es 0 */}
        {enablePoints && gamification && (
          <Link href="/user/points" passHref>
            <IconButton className="notification-icon">
              <Star />
              <span className="notification-badge points-badge">
                {gamification.points || 0}
              </span>
            </IconButton>
          </Link>
        )}

        {gamification?.badges && enableBadges && (
          <Link href="/user/badges" passHref>
            <IconButton className="notification-icon">
              <EmojiEvents />
              <span className="notification-badge badges-badge">
                {gamification.badges.length}
              </span>
            </IconButton>
          </Link>
        )}
      </MobileBottomNav>
    </>
  );
}


En el flujo de compra hay algunos fallos de usabilidad:

Cuando pulsamos en pagar y se produce la compra, redirige al dashboard de usuario

- en vez de dirigir al dashboard, añade un mensaje de sucess o pagina intermedia, algo mas usable.

aqui tienes las paginas implicadas:

// frontend/src/app/checkout/page.tsx
// frontend/src/app/checkout/page.tsx
"use client";
import { useEffect, useState } from "react";
import { useAuth } from "@/lib/auth/context";
import fetchAPI from "@/lib/api";
import { CartItem, Order } from "@/lib/types";
import { Box, Typography, Button, List, ListItem, ListItemText } from "@mui/material";
import { motion } from "framer-motion";

export default function CheckoutPage() {
  const { user, credits } = useAuth();
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [total, setTotal] = useState(0);

  useEffect(() => {
    const fetchCart = async () => {
      const { data } = await fetchAPI<CartItem[]>("/v1/marketplace/cart");
      setCartItems(data || []);
      const totalAmount = data?.reduce((sum, item) => sum + item.product.price * item.quantity, 0) || 0;
      setTotal(totalAmount);
    };
    fetchCart();
  }, []);

  const handleCheckout = async () => {
    const hasPaidItems = cartItems.some(item => !item.product.is_free);
    if (hasPaidItems && !user) {
      alert("Debes registrarte para comprar productos de pago");
      return;
    }
    if (hasPaidItems && credits < total) {
      alert("No tienes suficientes créditos");
      return;
    }
    const order = { items: cartItems.map(item => ({ product_id: item.product_id, quantity: item.quantity })) };
    const { data } = await fetchAPI<Order>("/v1/marketplace/orders", { method: "POST", data: order });
    if (data) {
      window.location.href = "/user/dashboard";
    }
  };

  return (
    <Box sx={{ p: 4, minHeight: "100vh", background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)" }}>
      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
        <Typography variant="h4" sx={{ mb: 3 }}>Carrito de Compras</Typography>
        <List>
          {cartItems.map(item => (
            <ListItem key={item.id}>
              <ListItemText
                primary={item.product.name}
                secondary={`Cantidad: ${item.quantity} - Precio: ${item.product.price} créditos`}
              />
            </ListItem>
          ))}
        </List>
        <Typography variant="h6" sx={{ mt: 2 }}>Total: {total} créditos</Typography>
        <Button
          variant="contained"
          onClick={handleCheckout}
          sx={{ mt: 2 }}
        >
          {cartItems.every(item => item.product.is_free) ? "Obtener Gratis" : "Pagar"}
        </Button>
      </motion.div>
    </Box>
  );
}

// frontend/src/components/marketplace/Marketplace.tsx
import { useEffect, useState } from "react";
import fetchAPI from "@/lib/api";
import { Category, Product } from "@/lib/types";
import { Box, Typography, Grid, Card, CardContent, Button, FormControl, InputLabel, Select, MenuItem } from "@mui/material";
import { useAuth } from "@/lib/auth/context";
import { motion } from "framer-motion";

export default function Marketplace() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<number | "all">("all");
  const { user } = useAuth();

  useEffect(() => {
    const fetchData = async () => {
      const { data: catData } = await fetchAPI<Category[]>("/v1/marketplace/categories");
      setCategories(catData || []);
      const { data: prodData } = await fetchAPI<Product[]>("/v1/marketplace/products");
      setProducts(prodData || []);
    };
    fetchData();
  }, []);

  const handleAddToCart = async (productId: number) => {
    try {
      await fetchAPI("/v1/marketplace/cart", { method: "POST", data: { product_id: productId, quantity: 1 } });
      alert("Producto añadido al carrito");
    } catch (error) {
      alert("Error al añadir al carrito");
    }
  };

  const filteredProducts = selectedCategory === "all"
    ? products
    : products.filter(product => product.category_id === selectedCategory);

  return (
    <Box sx={{ p: 4, minHeight: "100vh", background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)" }}>
      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
        <Typography variant="h4" sx={{ mb: 3, fontWeight: "bold" }}>Marketplace</Typography>
        <FormControl fullWidth sx={{ mb: 3, maxWidth: 300 }}>
          <InputLabel>Categoría</InputLabel>
          <Select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value as number | "all")}
          >
            <MenuItem value="all">Todas</MenuItem>
            {categories.map((cat) => (
              <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>
            ))}
          </Select>
        </FormControl>
        <Grid container spacing={3}>
          {filteredProducts.map((product) => (
            <Grid item xs={12} sm={6} md={4} key={product.id}>
              <Card sx={{ borderRadius: "12px", boxShadow: 3 }}>
                <CardContent>
                  <Typography variant="h6">{product.name}</Typography>
                  <Typography color="textSecondary">{product.description}</Typography>
                  <Typography sx={{ mt: 1 }}>Precio: {product.price} créditos</Typography>
                  <Button
                    variant="contained"
                    onClick={() => handleAddToCart(product.id)}
                    disabled={!product.is_free && !user}
                    sx={{ mt: 2 }}
                  >
                    {product.is_free ? "Obtener Gratis" : "Añadir al Carrito"}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </motion.div>
    </Box>
  );
}

// frontend/src/app/marketplace/page.tsx
"use client";
import Marketplace from "@/components/marketplace/Marketplace";

export default function MarketplacePage() {
  return <Marketplace />;
}

Por otro lado hay algunos fallos en consola:

cuando añado una nueva descarga digital, la api me da este error:

añadir nueva descarga digital
INFO:     127.0.0.1:59186 - "POST /v1/marketplace/products HTTP/1.1" 422 Unprocessable Entity


# backend/api/v1/marketplace.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from core.database import get_db
from services.marketplace_service import (
    create_category, get_categories, update_category, delete_category,
    create_product, get_products, update_product, delete_product
)
from services.cart_service import add_to_cart, get_cart
from services.order_service import create_order, get_orders
from schemas.marketplace import (
    CategoryCreate, CategoryResponse, ProductCreate, ProductResponse,
    CartItemCreate, CartItemResponse, OrderCreate, OrderResponse
)
from dependencies.auth import get_user_context, UserContext
from typing import List

router = APIRouter(tags=["Marketplace"])

# Categorías
@router.post("/categories", response_model=CategoryResponse)
def create_category_route(category: CategoryCreate, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    if user_context.rol != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")
    return create_category(db, category)

@router.get("/categories", response_model=List[CategoryResponse])
def get_categories_route(db: Session = Depends(get_db)):
    return get_categories(db)

@router.put("/categories/{category_id}", response_model=CategoryResponse)
def update_category_route(category_id: int, category: CategoryCreate, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    if user_context.rol != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")
    return update_category(db, category_id, category)

@router.delete("/categories/{category_id}")
def delete_category_route(category_id: int, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    if user_context.rol != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")
    delete_category(db, category_id)
    return {"message": "Categoría eliminada"}

# Productos
@router.post("/products", response_model=ProductResponse)
def create_product_route(product: ProductCreate, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    if user_context.rol != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")
    return create_product(db, product)

@router.get("/products", response_model=List[ProductResponse])
def get_products_route(db: Session = Depends(get_db)):
    return get_products(db)

@router.put("/products/{product_id}", response_model=ProductResponse)
def update_product_route(product_id: int, product: ProductCreate, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    if user_context.rol != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")
    return update_product(db, product_id, product)

@router.delete("/products/{product_id}")
def delete_product_route(product_id: int, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    if user_context.rol != "admin":
        raise HTTPException(status_code=403, detail="No autorizado")
    delete_product(db, product_id)
    return {"message": "Producto eliminado"}

# Carrito
@router.post("/cart", response_model=CartItemResponse)
def add_to_cart_route(cart_item: CartItemCreate, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    user_id = int(user_context.user_id) if user_context.user_type == "registered" else None
    session_id = user_context.session_id if user_context.user_type == "anonymous" else None
    return add_to_cart(db, user_id, session_id, cart_item)

@router.get("/cart", response_model=List[CartItemResponse])
def get_cart_route(db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    user_id = int(user_context.user_id) if user_context.user_type == "registered" else None
    session_id = user_context.session_id if user_context.user_type == "anonymous" else None
    return get_cart(db, user_id, session_id)

# Órdenes
@router.post("/orders", response_model=OrderResponse)
def create_order_route(order: OrderCreate, db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    user_id = int(user_context.user_id) if user_context.user_type == "registered" else None
    session_id = user_context.session_id if user_context.user_type == "anonymous" else None
    return create_order(db, user_id, session_id, order)

@router.get("/orders", response_model=List[OrderResponse])
def get_orders_route(db: Session = Depends(get_db), user_context: UserContext = Depends(get_user_context)):
    user_id = int(user_context.user_id) if user_context.user_type == "registered" else None
    session_id = user_context.session_id if user_context.user_type == "anonymous" else None
    return get_orders(db, user_id, session_id)


En el panel de alta de nuevos productos, sería mas usable utilizar toggles para mejorar
la usabalidad, por ejemplo: añadir un toggle si es un producto gratuito

// frontend/src/app/admin/dashboard/page.tsx
// Panel de administración principal para configuración y gestión
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { AnimatePresence, motion } from "framer-motion";
import {
  Tabs,
  Tab,
  Card,
  CardContent,
  TextField,
  Button,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  IconButton,
  Snackbar,
  Alert,
  Avatar,
  Chip,
  Divider,
  List,
  ListItem,
  ListItemText,
  Badge as MuiBadge,
  Paper,
  useTheme,
  styled,
  Box,
  Switch,
  FormControlLabel,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Dialog,
  DialogTitle,
  DialogContent,
  Select,
  MenuItem,
} from "@mui/material";
import { ShoppingCart } from "@mui/icons-material";
import Grid from "@mui/material/Grid";
import {
  AddCircle,
  Delete,
  ExpandMore,
  Settings,
  Public,
  Link,
  Webhook,
  CheckCircle,
  Cancel,
  Security,
  PersonAdd,
  LockPerson,
  PeopleOutline,
  AttachMoney,
  Edit,
  EmojiEvents,
  MonetizationOn,
  LocalActivity,
} from "@mui/icons-material";
import {
  SiteSetting,
  Integration,
  EventType,
  Badge,
  PaymentProvider,
  Coupon,
  CouponType,
  Category,
  Product,
} from "@/lib/types";
import {
  AdminGradientCard,
  ConfigGlassCard,
  FeatureCard,
} from "@/components/ui/Styled";
import MarketplaceManagement from "@/components/admin/MarketplaceManagement";

interface AllowedOrigin {
  id: number;
  origin: string;
}

export default function ConfigurePage() {
  const { user } = useAuth();
  const router = useRouter();
  const theme = useTheme();
  const [activeTab, setActiveTab] = useState(0);
  const [settingsByTag, setSettingsByTag] = useState<
    Record<string, SiteSetting[]>
  >({});
  const [origins, setOrigins] = useState<string[]>([]); // Inicializar como array vacío
  const [integrations, setIntegrations] = useState<Integration[]>([]);
  const [newOrigin, setNewOrigin] = useState("");
  const [newIntegration, setNewIntegration] = useState({
    name: "",
    webhook_url: "",
    event_type: "",
  });
  const [features, setFeatures] = useState({
    enable_registration: true,
    enable_social_login: true,
    disable_anonymous_users: false,
    disable_credits: false,
    enable_payment_methods: true,
    enable_points: true,
    enable_badges: true,
    enable_coupons: true,
    enable_marketplace: true,
  });

  const [eventTypes, setEventTypes] = useState<EventType[]>([]);
  const [badges, setBadges] = useState<Badge[]>([]);
  const [paymentProviders, setPaymentProviders] = useState<PaymentProvider[]>(
    []
  );
  const [editEventType, setEditEventType] = useState<EventType | null>(null);
  const [editBadge, setEditBadge] = useState<Badge | null>(null);
  const [editPaymentProvider, setEditPaymentProvider] =
    useState<PaymentProvider | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [expandedSettings, setExpandedSettings] = useState<
    Record<string, boolean>
  >({});
  const [allSettingsExpanded, setAllSettingsExpanded] = useState(false);
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [editCoupon, setEditCoupon] = useState<Coupon | null>(null);
  const [couponTypes, setCouponTypes] = useState<CouponType[]>([]);
  const [editCouponType, setEditCouponType] = useState<CouponType | null>(null);
  const [corsEnabled, setCorsEnabled] = useState<boolean | null>(null); // Inicializamos como null para indicar que aún no se ha cargado el estado.

  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);

  // Agregamos un estado de carga para controlar el renderizado inicial del panel.
  const [loadingPanel, setLoadingPanel] = useState(true);
  const [categories, setCategories] = useState<Category[]>([]);
  const [products, setProducts] = useState<Product[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      const { data: catData } = await fetchAPI<Category[]>(
        "/v1/marketplace/categories"
      );
      setCategories(catData || []);
      const { data: prodData } = await fetchAPI<Product[]>(
        "/v1/marketplace/products"
      );
      setProducts(prodData || []);
    };
    fetchData();
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data } = await fetchAPI<PaymentProvider[]>(
          "/v1/payment-providers"
        );
        setPaymentProviders(data || []);
      } catch (err) {
        setError(
          err instanceof Error ? err.message : "Error al cargar proveedores"
        );
      }
    };
    fetchData();
  }, []);

  useEffect(() => {
    if (!user || user.rol !== "admin") {
      router.push("/");
      return;
    }

    const fetchData = async () => {
      try {
        const settingsRes = await fetchAPI<SiteSetting[]>(
          "/v1/settings/admin/config"
        );
        const grouped = settingsRes.data?.reduce((acc, setting) => {
          const tag = setting.tag || "General";
          if (!acc[tag]) acc[tag] = [];
          acc[tag].push(setting);
          return acc;
        }, {} as Record<string, SiteSetting[]>);
        setSettingsByTag(grouped || {});

        // Initialize expanded state for settings
        if (grouped) {
          const initialExpandedState = Object.keys(grouped).reduce(
            (acc, tag) => {
              acc[tag] = false;
              return acc;
            },
            {} as Record<string, boolean>
          );
          setExpandedSettings(initialExpandedState);
        }

        const originsRes = await fetchAPI<string[]>(
          "/v1/settings/allowed_origins"
        );
        setOrigins(originsRes.data || []);

        const integrationsRes = await fetchAPI<Integration[]>(
          "/v1/integrations/"
        );
        setIntegrations(integrationsRes.data || []);

        const eventTypesRes = await fetchAPI<EventType[]>(
          "/v1/gamification/event-types"
        );
        setEventTypes(eventTypesRes.data || []);

        const badgesRes = await fetchAPI<Badge[]>("/v1/gamification/badges");
        setBadges(badgesRes.data || []);

        const paymentProvidersRes = await fetchAPI<PaymentProvider[]>(
          "/v1/payment-providers"
        );
        setPaymentProviders(paymentProvidersRes.data || []);

        const couponTypesRes = await fetchAPI<CouponType[]>(
          "/v1/coupons/types"
        );
        setCouponTypes(couponTypesRes.data || []);

        const couponsRes = await fetchAPI<Coupon[]>("/v1/coupons/");
        setCoupons(couponsRes.data || []);

        const featuresRes = await Promise.all([
          fetchAPI("/v1/settings/enable_registration"),
          fetchAPI("/v1/settings/enable_social_login"),
          fetchAPI("/v1/settings/disable_anonymous_users"),
          fetchAPI("/v1/settings/disable_credits"),
          fetchAPI("/v1/settings/enable_payment_methods"),
          fetchAPI("/v1/settings/enable_points"),
          fetchAPI("/v1/settings/enable_badges"),
          fetchAPI("/v1/settings/enable_coupons"),
          fetchAPI("/v1/settings/enable_marketplace"),
        ]);
        setFeatures({
          enable_registration: featuresRes[0]?.data === "true",
          enable_social_login: featuresRes[1]?.data === "true",
          disable_anonymous_users: featuresRes[2]?.data === "true",
          disable_credits: featuresRes[3]?.data === "true",
          enable_payment_methods: featuresRes[4]?.data === "true",
          enable_points: featuresRes[5]?.data === "true",
          enable_badges: featuresRes[6]?.data === "true",
          enable_coupons: featuresRes[7]?.data === "true",
          enable_marketplace: featuresRes[8]?.data === "true",
        });
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al cargar datos");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [user, router]);

  useEffect(() => {
    const fetchCorsSettings = async () => {
      try {
        console.log("Fetching CORS settings..."); // Depuración
        const { data: corsEnabledData } = await fetchAPI(
          "/v1/settings/cors_enabled"
        );
        console.log("CORS enabled data:", corsEnabledData); // Depuración
        const enabled = corsEnabledData === "true";
        setCorsEnabled(enabled);

        console.log("Fetching origins..."); // Depuración
        const { data: originsData } = await fetchAPI<AllowedOrigin[]>(
          "/v1/origins"
        );
        console.log("Origins data:", originsData); // Depuración
        setOrigins(
          Array.isArray(originsData) ? originsData.map((o) => o.origin) : []
        );
      } catch (err) {
        console.error("Error fetching CORS settings or origins:", err); // Depuración
        setError(
          err instanceof Error
            ? err.message
            : "Error al cargar configuración de CORS"
        );
      } finally {
        setLoadingPanel(false); // Finalizamos el estado de carga del panel
      }
    };
    fetchCorsSettings();
  }, []); // Cambiar dependencia a [] para que solo se ejecute una vez al montar el componente

  // Asegurarse de que origins sea siempre un array válido
  useEffect(() => {
    if (!Array.isArray(origins)) {
      setOrigins([]);
    }
  }, [origins]);

  const handleToggleCors = async () => {
    try {
      const { data } = await fetchAPI<{ key: string; value: boolean }>(
        "/v1/settings/admin/config",
        {
          method: "POST",
          data: { key: "allowed_origins", value: !corsEnabled },
        }
      );
      setCorsEnabled(data!.value);
      setSuccess(`CORS ${data!.value ? "activado" : "desactivado"}`);
      refreshOrigins(); // Asegurar que se refresque la lista de orígenes después de cambiar el estado de CORS
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al actualizar CORS");
    }
  };

  //const handleToggleIntegration = async (id: number, active: boolean) => {
  //  await fetchAPI(`/v1/integrations/${id}/toggle`, { method: "PUT" });
  // Actualizar estado local
  //};

  const groupedBadges = badges.reduce((acc, badge) => {
    const key = badge.event_type_id;
    if (!acc[key]) acc[key] = [];
    acc[key].push(badge);
    return acc;
  }, {} as Record<number, Badge[]>);

  const toggleAllSettings = () => {
    const newState = !allSettingsExpanded;
    setAllSettingsExpanded(newState);
    const updatedExpandedSettings = Object.keys(expandedSettings).reduce(
      (acc, tag) => {
        acc[tag] = newState;
        return acc;
      },
      {} as Record<string, boolean>
    );
    setExpandedSettings(updatedExpandedSettings);
  };

  const handleSaveSetting = async (key: string, newValue: string) => {
    try {
      await fetchAPI("/v1/settings/admin/config", {
        method: "POST",
        data: { key, value: newValue },
      });
      setSettingsByTag((prev) => {
        const updated = { ...prev };
        for (const tag in updated) {
          updated[tag] = updated[tag].map((s) =>
            s.key === key ? { ...s, value: newValue } : s
          );
        }
        return updated;
      });
      setSuccess("Configuración actualizada");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al guardar configuración"
      );
    }
  };

  const refreshOrigins = async () => {
    try {
      console.log("Refreshing origins..."); // Depuración
      const { data: originsData } = await fetchAPI<AllowedOrigin[]>(
        "/v1/origins"
      );
      console.log("Refreshed origins data:", originsData); // Depuración
      setOrigins(
        Array.isArray(originsData) ? originsData.map((o) => o.origin) : []
      );
    } catch (err) {
      console.error("Error refreshing origins:", err); // Depuración
      setError(
        err instanceof Error ? err.message : "Error al refrescar orígenes"
      );
    }
  };

  const handleAddOrigin = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await fetchAPI("/v1/settings/allowed-origins", {
        method: "POST",
        data: { origin: newOrigin },
      });
      setNewOrigin("");
      setSuccess("Origen añadido con éxito");
      refreshOrigins(); // Refrescar la lista de orígenes
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al añadir origen");
    }
  };

  const handleDeleteOrigin = async (origin: string) => {
    try {
      await fetchAPI(
        `/v1/settings/allowed-origins/${encodeURIComponent(origin)}`,
        { method: "DELETE" }
      );
      setSuccess("Origen eliminado con éxito");
      refreshOrigins(); // Refrescar la lista de orígenes
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar origen");
    }
  };

  const handleAddIntegration = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<Integration>("/v1/integrations/", {
        method: "POST",
        data: {
          name: newIntegration.name,
          webhook_url: newIntegration.webhook_url,
          event_type: newIntegration.event_type,
        },
      });
      setIntegrations([...integrations, data]);
      setNewIntegration({ name: "", webhook_url: "", event_type: "" });
      setSuccess("Integración creada con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al crear integración"
      );
    }
  };

  const handleToggleIntegration = async (id: number, active: boolean) => {
    try {
      const { data } = await fetchAPI<{ id: number; active: boolean }>(
        `/v1/integrations/${id}/toggle`,
        {
          method: "PUT",
        }
      );
      setIntegrations((prev) =>
        prev.map((integration) =>
          integration.id === id
            ? { ...integration, active: data!.active }
            : integration
        )
      );
      setSuccess(`Integración ${data!.active ? "activada" : "desactivada"}`);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al actualizar integración"
      );
    }
  };

  const handleDeleteIntegration = async (id: number) => {
    try {
      await fetchAPI(`/v1/integrations/${id}`, { method: "DELETE" });
      setIntegrations(integrations.filter((i) => i.id !== id));
      setSuccess("Integración eliminada con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al eliminar integración"
      );
    }
  };

  const handleToggleFeature = async (feature: string, enabled: boolean) => {
    try {
      await fetchAPI("/v1/settings/admin/config", {
        method: "POST",
        data: { key: feature, value: enabled.toString() },
      });
      setFeatures((prev) => ({ ...prev, [feature]: enabled }));
      setSuccess(
        `Funcionalidad ${enabled ? "activada" : "desactivada"} con éxito`
      );
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al actualizar funcionalidad"
      );
    }
  };

  const handleCreateEventType = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<EventType>(
        "/v1/gamification/event-types",
        { method: "POST", data: editEventType }
      );
      setEventTypes([...eventTypes, data!]);
      setEditEventType(null);
      setSuccess("Tipo de evento creado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al crear tipo de evento"
      );
    }
  };

  const handleUpdateEventType = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editEventType?.id) return;
    try {
      const { data } = await fetchAPI<EventType>(
        `/v1/gamification/event-types/${editEventType.id}`,
        { method: "PUT", data: editEventType }
      );
      setEventTypes(eventTypes.map((et) => (et.id === data!.id ? data! : et)));
      setEditEventType(null);
      setSuccess("Tipo de evento actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error
          ? err.message
          : "Error al actualizar tipo de evento"
      );
    }
  };

  const handleDeleteEventType = async (id: number) => {
    try {
      await fetchAPI(`/v1/gamification/event-types/${id}`, {
        method: "DELETE",
      });
      setEventTypes(eventTypes.filter((et) => et.id !== id));
      setSuccess("Tipo de evento eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al eliminar tipo de evento"
      );
    }
  };

  const handleCreateBadge = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<Badge>("/v1/gamification/badges", {
        method: "POST",
        data: editBadge,
      });
      setBadges([...badges, data!]);
      setEditBadge(null);
      setSuccess("Badge creado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al crear badge");
    }
  };

  const handleUpdateBadge = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editBadge?.id) return;
    try {
      const { data } = await fetchAPI<Badge>(
        `/v1/gamification/badges/${editBadge.id}`,
        { method: "PUT", data: editBadge }
      );
      setBadges(badges.map((b) => (b.id === data!.id ? data! : b)));
      setEditBadge(null);
      setSuccess("Badge actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al actualizar badge"
      );
    }
  };

  const handleDeleteBadge = async (id: number) => {
    try {
      await fetchAPI(`/v1/gamification/badges/${id}`, { method: "DELETE" });
      setBadges(badges.filter((b) => b.id !== id));
      setSuccess("Badge eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar badge");
    }
  };

  const handleTogglePaymentProvider = async (id: number, active: boolean) => {
    try {
      const provider = paymentProviders.find((p) => p.id === id);
      if (!provider) throw new Error("Proveedor no encontrado");
      const updatedProvider = { ...provider, active: !active }; // Invertir el estado
      const { data } = await fetchAPI<PaymentProvider>(
        `/v1/payment-providers/${id}`,
        {
          method: "PUT",
          data: updatedProvider,
        }
      );
      setPaymentProviders(
        paymentProviders.map((p) => (p.id === data!.id ? data! : p))
      );
      setSuccess(`Proveedor ${!active ? "activado" : "desactivado"}`);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al actualizar proveedor"
      );
    }
  };

  const handleCreatePaymentProvider = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<PaymentProvider>(
        "/v1/payment-providers",
        { method: "POST", data: editPaymentProvider }
      );
      setPaymentProviders([...paymentProviders, data!]);
      setEditPaymentProvider(null);
      setSuccess("Proveedor creado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al crear proveedor");
    }
  };

  const handleUpdatePaymentProvider = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editPaymentProvider?.id) return;
    try {
      const { data } = await fetchAPI<PaymentProvider>(
        `/v1/payment-providers/${editPaymentProvider.id}`,
        {
          method: "PUT",
          data: editPaymentProvider,
        }
      );
      setPaymentProviders(
        paymentProviders.map((p) => (p.id === data!.id ? data! : p))
      );
      setEditPaymentProvider(null);
      setSuccess("Proveedor actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al actualizar proveedor"
      );
    }
  };

  const handleDeletePaymentProvider = async (id: number) => {
    try {
      await fetchAPI(`/v1/payment-providers/${id}`, { method: "DELETE" });
      setPaymentProviders(paymentProviders.filter((p) => p.id !== id));
      setSuccess("Proveedor eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al eliminar proveedor"
      );
    }
  };

  // Funciones para manejar cupones
  const handleSubmitCouponType = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editCouponType) return;
    try {
      if (editCouponType.id) {
        const { data } = await fetchAPI<CouponType>(
          `/v1/coupons/types/${editCouponType.id}`,
          {
            method: "PUT",
            data: editCouponType,
          }
        );
        setCouponTypes(
          couponTypes.map((ct) => (ct.id === data!.id ? data! : ct))
        );
      } else {
        const { data } = await fetchAPI<CouponType>("/v1/coupons/types", {
          method: "POST",
          data: editCouponType,
        });
        setCouponTypes([...couponTypes, data!]);
      }
      setEditCouponType(null);
      setSuccess("Tipo de cupón guardado con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al guardar tipo de cupón"
      );
    }
  };

  const handleDeleteCoupon = async (id: number) => {
    try {
      await fetchAPI(`/v1/coupons/${id}`, { method: "DELETE" });
      setCoupons(coupons.filter((c) => c.id !== id));
      setSuccess("Cupón eliminado con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar cupón");
    }
  };

  if (loading)
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
        }}
      >
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <Typography variant="h6" color="textSecondary">
            Cargando panel de administración...
          </Typography>
        </motion.div>
      </Box>
    );

  // Modificamos el renderizado del panel para manejar el estado de carga inicial
  if (loadingPanel) {
    return <Typography>Cargando panel de administración...</Typography>;
  }

  return (
    <Box
      sx={{
        p: { xs: 2, md: 4 },
        minHeight: "100vh",
        background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
      }}
    >
      <Box sx={{ maxWidth: "1400px", mx: "auto" }}>
        {/* Header Section */}
        <Box
          sx={{
            display: "flex",
            flexDirection: { xs: "column", md: "row" },
            justifyContent: "space-between",
            alignItems: "center",
            mb: 4,
            gap: 2,
          }}
        >
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Typography
              variant="h3"
              sx={{
                fontWeight: "bold",
                background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                WebkitBackgroundClip: "text",
                WebkitTextFillColor: "transparent",
                display: "inline-block",
              }}
            >
              Panel de Administración
            </Typography>
            <Typography variant="subtitle1" color="textSecondary">
              Gestiona la configuración del sistema
            </Typography>
          </motion.div>

          <MuiBadge
            overlap="circular"
            badgeContent={
              <Chip
                label="Admin"
                size="small"
                color="primary"
                sx={{
                  position: "absolute",
                  top: -10,
                  right: -10,
                  fontWeight: "bold",
                }}
              />
            }
          >
            <Avatar
              sx={{
                width: 80,
                height: 80,
                bgcolor: theme.palette.error.main,
                fontSize: "2rem",
                boxShadow: theme.shadows[6],
              }}
            >
              {user?.username?.charAt(0).toUpperCase()}
            </Avatar>
          </MuiBadge>
        </Box>

        {/* Stats Cards */}
        <Box sx={{ display: "flex", gap: 3, mb: 4, flexWrap: "wrap" }}>
          <AdminGradientCard sx={{ flex: 1, minWidth: "200px" }}>
            <CardContent>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Box>
                  <Typography
                    variant="overline"
                    color="inherit"
                    sx={{ opacity: 0.8 }}
                  >
                    Configuraciones
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: "bold" }}>
                    {Object.values(settingsByTag).flat().length}
                  </Typography>
                </Box>
                <Settings sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: "200px" }}>
            <CardContent>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Box>
                  <Typography
                    variant="overline"
                    color="inherit"
                    sx={{ opacity: 0.8 }}
                  >
                    Orígenes Permitidos
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: "bold" }}>
                    {origins.length}
                  </Typography>
                </Box>
                <Public sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: "200px" }}>
            <CardContent>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Box>
                  <Typography
                    variant="overline"
                    color="inherit"
                    sx={{ opacity: 0.8 }}
                  >
                    Integraciones
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: "bold" }}>
                    {integrations.length}
                  </Typography>
                </Box>
                <Webhook sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: "200px" }}>
            <CardContent>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Box>
                  <Typography
                    variant="overline"
                    color="inherit"
                    sx={{ opacity: 0.8 }}
                  >
                    Gamificación
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: "bold" }}>
                    {eventTypes.length}
                  </Typography>
                </Box>
                <EmojiEvents sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>

          <AdminGradientCard sx={{ flex: 1, minWidth: "200px" }}>
            <CardContent>
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Box>
                  <Typography
                    variant="overline"
                    color="inherit"
                    sx={{ opacity: 0.8 }}
                  >
                    Pagos
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: "bold" }}>
                    {paymentProviders.length}
                  </Typography>
                </Box>
                <MonetizationOn sx={{ fontSize: 40, opacity: 0.8 }} />
              </Box>
            </CardContent>
          </AdminGradientCard>
        </Box>

        {/* Tabs Navigation */}
        <Paper sx={{ mb: 3, borderRadius: "12px", overflow: "hidden" }}>
          <Tabs
            value={activeTab}
            onChange={(_, newValue) => setActiveTab(newValue)}
            variant="scrollable"
            scrollButtons="auto"
            indicatorColor="primary"
            textColor="primary"
          >
            <Tab
              label="Funcionalidades"
              icon={<LockPerson />}
              iconPosition="start"
            />
            <Tab label="Orígenes" icon={<Security />} iconPosition="start" />
            <Tab label="Integraciones" icon={<Link />} iconPosition="start" />
            <Tab
              label="Gamificación"
              icon={<EmojiEvents />}
              iconPosition="start"
            />
            <Tab
              label="Cupones"
              icon={<LocalActivity />}
              iconPosition="start"
            />
            <Tab label="Pagos" icon={<MonetizationOn />} iconPosition="start" />
            <Tab
              label="Configuraciones"
              icon={<Settings />}
              iconPosition="start"
            />
            <Tab
              label="Marketplace"
              icon={<ShoppingCart />}
              iconPosition="start"
            />
          </Tabs>
        </Paper>

        {/* Tab Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          {/* Funcionalidades Tab */}
          {activeTab === 0 && (
            <Box sx={{ mb: 4 }}>
              <ConfigGlassCard>
                <CardContent>
                  <Typography variant="h5" sx={{ fontWeight: "bold", mb: 3 }}>
                    <LockPerson sx={{ mr: 1, verticalAlign: "middle" }} />
                    Control de Funcionalidades del Sistema
                  </Typography>

                  <Grid container spacing={3}>
                    {/* Tarjeta para Registro */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.enable_registration
                              ? theme.palette.success.main
                              : theme.palette.error.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <PersonAdd
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.enable_registration
                                  ? theme.palette.success.main
                                  : theme.palette.error.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Registro de Usuarios
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Controla si los nuevos usuarios pueden
                                registrarse
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.enable_registration
                                    ? "Activado"
                                    : "Desactivado"
                                }
                                size="small"
                                color={
                                  features.enable_registration
                                    ? "success"
                                    : "error"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_registration}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "enable_registration",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("enable_registration")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Login Social */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.enable_social_login
                              ? theme.palette.success.main
                              : theme.palette.error.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <PeopleOutline
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.enable_social_login
                                  ? theme.palette.success.main
                                  : theme.palette.error.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Login Social
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Permite inicio de sesión con redes sociales
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.enable_social_login
                                    ? "Activado"
                                    : "Desactivado"
                                }
                                size="small"
                                color={
                                  features.enable_social_login
                                    ? "success"
                                    : "error"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_social_login}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "enable_social_login",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("enable_social_login")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Usuarios Anónimos */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.disable_anonymous_users
                              ? theme.palette.error.main
                              : theme.palette.success.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <Security
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.disable_anonymous_users
                                  ? theme.palette.error.main
                                  : theme.palette.success.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Usuarios Anónimos
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Controla el acceso de usuarios no registrados
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.disable_anonymous_users
                                    ? "Bloqueados"
                                    : "Permitidos"
                                }
                                size="small"
                                color={
                                  features.disable_anonymous_users
                                    ? "error"
                                    : "success"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.disable_anonymous_users}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "disable_anonymous_users",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("disable_anonymous_users")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Sistema de Créditos */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.disable_credits
                              ? theme.palette.error.main
                              : theme.palette.success.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <AttachMoney
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.disable_credits
                                  ? theme.palette.error.main
                                  : theme.palette.success.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Sistema de Créditos
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Habilita/deshabilita el uso de créditos
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.disable_credits
                                    ? "Desactivado"
                                    : "Activado"
                                }
                                size="small"
                                color={
                                  features.disable_credits ? "error" : "success"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={!features.disable_credits}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "disable_credits",
                                  !e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("disable_credits")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Métodos de Pago */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.enable_payment_methods
                              ? theme.palette.success.main
                              : theme.palette.error.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <MonetizationOn
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.enable_payment_methods
                                  ? theme.palette.success.main
                                  : theme.palette.error.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Métodos de Pago
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Habilita diferentes opciones de pago
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.enable_payment_methods
                                    ? "Activado"
                                    : "Desactivado"
                                }
                                size="small"
                                color={
                                  features.enable_payment_methods
                                    ? "success"
                                    : "error"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_payment_methods}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "enable_payment_methods",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("enable_payment_methods")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Sistema de Puntos */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.enable_points
                              ? theme.palette.success.main
                              : theme.palette.error.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <EmojiEvents
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.enable_points
                                  ? theme.palette.success.main
                                  : theme.palette.error.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Sistema de Puntos
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Activa puntos por actividades
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.enable_points
                                    ? "Activado"
                                    : "Desactivado"
                                }
                                size="small"
                                color={
                                  features.enable_points ? "success" : "error"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_points}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "enable_points",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("enable_points")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Insignias */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.enable_badges
                              ? theme.palette.success.main
                              : theme.palette.error.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <EmojiEvents
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.enable_badges
                                  ? theme.palette.success.main
                                  : theme.palette.error.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Sistema de Insignias
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Permite la obtención de insignias
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.enable_badges
                                    ? "Activado"
                                    : "Desactivado"
                                }
                                size="small"
                                color={
                                  features.enable_badges ? "success" : "error"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_badges}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "enable_badges",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("enable_badges")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Cupones */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.enable_coupons
                              ? theme.palette.success.main
                              : theme.palette.error.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <EmojiEvents
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.enable_coupons
                                  ? theme.palette.success.main
                                  : theme.palette.error.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Cupones
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Habilita el sistema de cupones
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.enable_coupons
                                    ? "Activado"
                                    : "Desactivado"
                                }
                                size="small"
                                color={
                                  features.enable_coupons ? "success" : "error"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_coupons}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "enable_coupons",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            {getFeatureDescription("enable_coupons")}
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>

                    {/* Tarjeta para Marketplace */}
                    <Grid item xs={12} md={6} lg={4}>
                      <FeatureCard
                        sx={{
                          borderLeft: `4px solid ${
                            features.enable_marketplace
                              ? theme.palette.success.main
                              : theme.palette.error.main
                          }`,
                        }}
                      >
                        <CardContent>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              mb: 2,
                            }}
                          >
                            <ShoppingCart
                              sx={{
                                fontSize: 40,
                                mr: 2,
                                color: features.enable_marketplace
                                  ? theme.palette.success.main
                                  : theme.palette.error.main,
                              }}
                            />
                            <Box>
                              <Typography
                                variant="h6"
                                sx={{ fontWeight: "bold" }}
                              >
                                Marketplace
                              </Typography>
                              <Typography variant="body2" color="textSecondary">
                                Habilita el sistema de marketplace
                              </Typography>
                            </Box>
                          </Box>
                          <Divider sx={{ my: 2 }} />
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                              }}
                            >
                              <Typography variant="body2" component="span">
                                Estado actual:
                              </Typography>
                              <Chip
                                label={
                                  features.enable_marketplace
                                    ? "Activado"
                                    : "Desactivado"
                                }
                                size="small"
                                color={
                                  features.enable_marketplace
                                    ? "success"
                                    : "error"
                                }
                                sx={{ ml: 1 }}
                              />
                            </Box>
                            <Switch
                              checked={features.enable_marketplace}
                              onChange={(e) =>
                                handleToggleFeature(
                                  "enable_marketplace",
                                  e.target.checked
                                )
                              }
                              color="primary"
                            />
                          </Box>
                          <Typography
                            variant="caption"
                            color="textSecondary"
                            sx={{ mt: 1, display: "block" }}
                          >
                            Permite a los usuarios comprar productos físicos,
                            digitales o suscripciones.
                          </Typography>
                        </CardContent>
                      </FeatureCard>
                    </Grid>
                  </Grid>
                </CardContent>
              </ConfigGlassCard>
            </Box>
          )}

          {/* Orígenes Permitidos Tab */}
          {activeTab === 1 && (
            <Box>
              <Box
                sx={{ display: "flex", justifyContent: "space-between", mb: 2 }}
              >
                <Typography variant="h6">Orígenes Permitidos</Typography>
                {corsEnabled === null ? (
                  <Typography>Cargando configuración de CORS...</Typography>
                ) : (
                  <Switch checked={corsEnabled} onChange={handleToggleCors} />
                )}
              </Box>
              {corsEnabled && (
                <Box component="form" onSubmit={handleAddOrigin} sx={{ mb: 2 }}>
                  <TextField
                    label="Nuevo Origen"
                    value={newOrigin}
                    onChange={(e) => setNewOrigin(e.target.value)}
                    fullWidth
                    variant="outlined"
                    size="small"
                  />
                  <Button
                    type="submit"
                    variant="contained"
                    color="primary"
                    sx={{ mt: 1 }}
                  >
                    Añadir Origen
                  </Button>
                </Box>
              )}
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Origen</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {(origins || []).map((origin) => (
                    <TableRow key={origin}>
                      <TableCell>{origin}</TableCell>
                      <TableCell>
                        {corsEnabled ? (
                          <IconButton
                            onClick={() => handleDeleteOrigin(origin)}
                            color="error"
                          >
                            <Delete />
                          </IconButton>
                        ) : (
                          <Typography color="textSecondary">
                            Desactivado
                          </Typography>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* Integraciones Tab */}
          {activeTab === 2 && (
            <Box>
              <Select
                value={selectedUserId || ""}
                onChange={(e) =>
                  setSelectedUserId(
                    e.target.value ? Number(e.target.value) : null
                  )
                }
                displayEmpty
                fullWidth
                sx={{ mb: 2 }}
              >
                <MenuItem value="">Todos los usuarios</MenuItem>
                {/* Añadir opciones dinámicas de usuarios */}
              </Select>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Nombre</TableCell>
                    <TableCell>Usuario</TableCell>
                    <TableCell>Estado</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {integrations
                    .filter((i) =>
                      selectedUserId ? i.user_id === selectedUserId : true
                    )
                    .map((integration) => (
                      <TableRow key={integration.id}>
                        <TableCell>{integration.name}</TableCell>
                        <TableCell>{integration.user_id}</TableCell>
                        <TableCell>
                          <Switch
                            checked={integration.active}
                            onChange={() =>
                              handleToggleIntegration(
                                integration.id,
                                integration.active
                              )
                            }
                          />
                        </TableCell>
                        <TableCell>
                          <IconButton
                            onClick={() =>
                              handleDeleteIntegration(integration.id)
                            }
                            color="error"
                          >
                            <Delete />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* Gamificación Tab */}
          {activeTab === 3 && (
            <Box sx={{ mb: 4 }}>
              <ConfigGlassCard sx={{ mb: 3 }}>
                <CardContent>
                  <Typography variant="h5" sx={{ fontWeight: "bold", mb: 3 }}>
                    <EmojiEvents sx={{ mr: 1, verticalAlign: "middle" }} />
                    Gestión de Gamificación
                  </Typography>

                  {/* Event Types Section */}
                  <ConfigGlassCard sx={{ mb: 4, p: 3 }}>
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        mb: 2,
                      }}
                    >
                      <Typography variant="h6">Tipos de Evento</Typography>
                      <Button
                        variant="contained"
                        startIcon={<AddCircle />}
                        onClick={() =>
                          setEditEventType({
                            id: 0,
                            name: "",
                            description: "",
                            points_per_event: 0,
                          })
                        }
                      >
                        Nuevo Tipo
                      </Button>
                    </Box>

                    <Table>
                      <TableHead>
                        <TableRow>
                          <TableCell>Nombre</TableCell>
                          <TableCell>Descripción</TableCell>
                          <TableCell>Puntos</TableCell>
                          <TableCell>Acciones</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {eventTypes.map((et) => (
                          <TableRow key={et.id}>
                            <TableCell>{et.name}</TableCell>
                            <TableCell>{et.description}</TableCell>
                            <TableCell>{et.points_per_event}</TableCell>
                            <TableCell>
                              <IconButton
                                onClick={() => setEditEventType(et)}
                                color="primary"
                              >
                                <Edit />
                              </IconButton>
                              <IconButton
                                onClick={() => handleDeleteEventType(et.id)}
                                color="error"
                              >
                                <Delete />
                              </IconButton>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </ConfigGlassCard>

                  {/* Badges Section */}
                  <ConfigGlassCard sx={{ p: 3 }}>
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        mb: 2,
                      }}
                    >
                      <Typography variant="h6">Insignias</Typography>
                      <Button
                        variant="contained"
                        startIcon={<AddCircle />}
                        onClick={() =>
                          setEditBadge({
                            id: 0,
                            name: "",
                            description: "",
                            event_type_id: eventTypes[0]?.id || 0,
                            required_points: 0,
                            user_type: "both",
                          })
                        }
                        disabled={eventTypes.length === 0}
                      >
                        Nueva Insignia
                      </Button>
                    </Box>

                    {eventTypes.map((eventType) => (
                      <Accordion
                        key={eventType.id}
                        sx={{ background: "transparent", boxShadow: "none" }}
                      >
                        <AccordionSummary expandIcon={<ExpandMore />}>
                          <Typography>
                            {eventType.name} (ID: {eventType.id})
                          </Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                          <Table>
                            <TableHead>
                              <TableRow>
                                <TableCell>Nombre</TableCell>
                                <TableCell>Puntos Requeridos</TableCell>
                                <TableCell>Tipo Usuario</TableCell>
                                <TableCell>Acciones</TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {(groupedBadges[eventType.id] || []).map(
                                (badge) => (
                                  <TableRow key={badge.id}>
                                    <TableCell>{badge.name}</TableCell>
                                    <TableCell>
                                      {badge.required_points}
                                    </TableCell>
                                    <TableCell>{badge.user_type}</TableCell>
                                    <TableCell>
                                      <IconButton
                                        onClick={() => setEditBadge(badge)}
                                        color="primary"
                                      >
                                        <Edit />
                                      </IconButton>
                                      <IconButton
                                        onClick={() =>
                                          handleDeleteBadge(badge.id)
                                        }
                                        color="error"
                                      >
                                        <Delete />
                                      </IconButton>
                                    </TableCell>
                                  </TableRow>
                                )
                              )}
                            </TableBody>
                          </Table>
                        </AccordionDetails>
                      </Accordion>
                    ))}
                  </ConfigGlassCard>
                </CardContent>
              </ConfigGlassCard>

              {/* Event Type Dialog */}
              <Dialog
                open={!!editEventType}
                onClose={() => setEditEventType(null)}
              >
                <DialogTitle>
                  {editEventType?.id
                    ? "Editar Tipo de Evento"
                    : "Nuevo Tipo de Evento"}
                </DialogTitle>
                <DialogContent>
                  <Box
                    component="form"
                    onSubmit={
                      editEventType?.id
                        ? handleUpdateEventType
                        : handleCreateEventType
                    }
                    sx={{ mt: 2 }}
                  >
                    <TextField
                      label="Nombre"
                      fullWidth
                      value={editEventType?.name || ""}
                      onChange={(e) =>
                        setEditEventType({
                          ...editEventType!,
                          name: e.target.value,
                        })
                      }
                      margin="normal"
                    />
                    <TextField
                      label="Descripción"
                      fullWidth
                      value={editEventType?.description || ""}
                      onChange={(e) =>
                        setEditEventType({
                          ...editEventType!,
                          description: e.target.value,
                        })
                      }
                      margin="normal"
                    />
                    <TextField
                      label="Puntos por evento"
                      type="number"
                      fullWidth
                      value={editEventType?.points_per_event || 0}
                      onChange={(e) =>
                        setEditEventType({
                          ...editEventType!,
                          points_per_event: parseInt(e.target.value) || 0,
                        })
                      }
                      margin="normal"
                    />
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      fullWidth
                      sx={{ mt: 2 }}
                    >
                      {editEventType?.id ? "Actualizar" : "Crear"}
                    </Button>
                  </Box>
                </DialogContent>
              </Dialog>

              {/* Badge Dialog */}
              <Dialog open={!!editBadge} onClose={() => setEditBadge(null)}>
                <DialogTitle>
                  {editBadge?.id ? "Editar Insignia" : "Nueva Insignia"}
                </DialogTitle>
                <DialogContent>
                  <Box
                    component="form"
                    onSubmit={
                      editBadge?.id ? handleUpdateBadge : handleCreateBadge
                    }
                    sx={{ mt: 2 }}
                  >
                    <TextField
                      label="Nombre"
                      fullWidth
                      value={editBadge?.name || ""}
                      onChange={(e) =>
                        setEditBadge({ ...editBadge!, name: e.target.value })
                      }
                      margin="normal"
                    />
                    <TextField
                      label="Descripción"
                      fullWidth
                      value={editBadge?.description || ""}
                      onChange={(e) =>
                        setEditBadge({
                          ...editBadge!,
                          description: e.target.value,
                        })
                      }
                      margin="normal"
                    />
                    <TextField
                      label="Puntos Requeridos"
                      type="number"
                      fullWidth
                      value={editBadge?.required_points || 0}
                      onChange={(e) =>
                        setEditBadge({
                          ...editBadge!,
                          required_points: parseInt(e.target.value) || 0,
                        })
                      }
                      margin="normal"
                    />
                    <TextField
                      label="Tipo de Evento"
                      select
                      fullWidth
                      value={editBadge?.event_type_id || 0}
                      onChange={(e) =>
                        setEditBadge({
                          ...editBadge!,
                          event_type_id: parseInt(e.target.value),
                        })
                      }
                      margin="normal"
                      SelectProps={{ native: true }}
                    >
                      {eventTypes.map((et) => (
                        <option key={et.id} value={et.id}>
                          {et.name}
                        </option>
                      ))}
                    </TextField>
                    <TextField
                      label="Tipo de Usuario"
                      select
                      fullWidth
                      value={editBadge?.user_type || "both"}
                      onChange={(e) =>
                        setEditBadge({
                          ...editBadge!,
                          user_type: e.target.value as any,
                        })
                      }
                      margin="normal"
                      SelectProps={{ native: true }}
                    >
                      <option value="anonymous">Anónimo</option>
                      <option value="registered">Registrado</option>
                      <option value="both">Ambos</option>
                    </TextField>
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      fullWidth
                      sx={{ mt: 2 }}
                    >
                      {editBadge?.id ? "Actualizar" : "Crear"}
                    </Button>
                  </Box>
                </DialogContent>
              </Dialog>
            </Box>
          )}

          {/* CUpones Tab */}

          {activeTab === 4 && (
            <Box sx={{ mb: 4 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>
                Tipos de Cupones
              </Typography>
              <Button
                variant="contained"
                startIcon={<AddCircle />}
                onClick={() =>
                  setEditCouponType({
                    id: 0,
                    name: "",
                    description: "",
                    credits: 0,
                    active: true,
                  })
                }
              >
                Nuevo Tipo de Cupón
              </Button>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Nombre</TableCell>
                    <TableCell>Descripción</TableCell>
                    <TableCell>Créditos</TableCell>
                    <TableCell>Activo</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {couponTypes.map((ct) => (
                    <TableRow key={ct.id}>
                      <TableCell>{ct.name}</TableCell>
                      <TableCell>
                        {ct.description || "Sin descripción"}
                      </TableCell>
                      <TableCell>{ct.credits}</TableCell>
                      <TableCell>
                        <Chip
                          label={ct.active ? "Activo" : "Inactivo"}
                          color={ct.active ? "success" : "error"}
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton
                          onClick={() => setEditCouponType(ct)}
                          color="primary"
                        >
                          <Edit />
                        </IconButton>
                        <Button
                          variant="outlined"
                          size="small"
                          startIcon={<LocalActivity />}
                          onClick={async () => {
                            try {
                              const { data } = await fetchAPI<Coupon>(
                                "/v1/coupons/test",
                                {
                                  method: "POST",
                                  data: { coupon_type_id: ct.id },
                                }
                              );
                              if (data) {
                                setCoupons([...coupons, data]);
                                setSuccess(
                                  "Cupón de prueba generado con éxito"
                                );
                                setTimeout(() => setSuccess(null), 3000);
                              }
                            } catch (err) {
                              setError(
                                err instanceof Error
                                  ? err.message
                                  : "Error al generar cupón de prueba"
                              );
                            }
                          }}
                        >
                          Generar Prueba
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* Pagos Tab */}
          {activeTab === 5 && (
            <Box sx={{ mb: 4 }}>
              <ConfigGlassCard>
                <CardContent>
                  <Typography variant="h5" sx={{ fontWeight: "bold", mb: 3 }}>
                    <MonetizationOn sx={{ mr: 1, verticalAlign: "middle" }} />
                    Gestión de Pagos
                  </Typography>

                  <Box
                    sx={{ display: "flex", justifyContent: "flex-end", mb: 2 }}
                  >
                    <Button
                      variant="contained"
                      startIcon={<AddCircle />}
                      onClick={() =>
                        setEditPaymentProvider({
                          id: 0,
                          name: "",
                          active: true,
                        })
                      }
                    >
                      Nuevo Proveedor
                    </Button>
                  </Box>

                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>Nombre</TableCell>
                        <TableCell>Estado</TableCell>
                        <TableCell>Acciones</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {paymentProviders.map((provider) => (
                        <TableRow key={provider.id}>
                          <TableCell>{provider.name}</TableCell>
                          <TableCell>
                            <Switch
                              checked={provider.active}
                              onChange={(e) =>
                                handleTogglePaymentProvider(
                                  provider.id,
                                  provider.active
                                )
                              }
                            />
                          </TableCell>
                          <TableCell>
                            <IconButton
                              onClick={() => setEditPaymentProvider(provider)}
                              color="primary"
                            >
                              <Edit />
                            </IconButton>
                            <IconButton
                              onClick={() =>
                                handleDeletePaymentProvider(provider.id)
                              }
                              color="error"
                            >
                              <Delete />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </ConfigGlassCard>

              {/* Payment Provider Dialog */}
              <Dialog
                open={!!editPaymentProvider}
                onClose={() => setEditPaymentProvider(null)}
              >
                <DialogTitle>
                  {editPaymentProvider?.id
                    ? "Editar Proveedor"
                    : "Nuevo Proveedor"}
                </DialogTitle>
                <DialogContent>
                  <Box
                    component="form"
                    onSubmit={
                      editPaymentProvider?.id
                        ? handleUpdatePaymentProvider
                        : handleCreatePaymentProvider
                    }
                    sx={{ mt: 2 }}
                  >
                    <TextField
                      label="Nombre"
                      fullWidth
                      value={editPaymentProvider?.name || ""}
                      onChange={(e) =>
                        setEditPaymentProvider({
                          ...editPaymentProvider!,
                          name: e.target.value,
                        })
                      }
                      margin="normal"
                    />
                    <FormControlLabel
                      control={
                        <Switch
                          checked={editPaymentProvider?.active || false}
                          onChange={(e) =>
                            setEditPaymentProvider({
                              ...editPaymentProvider!,
                              active: e.target.checked,
                            })
                          }
                          color="primary"
                        />
                      }
                      label="Activo"
                      sx={{ mt: 2 }}
                    />
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      fullWidth
                      sx={{ mt: 2 }}
                    >
                      {editPaymentProvider?.id ? "Actualizar" : "Crear"}
                    </Button>
                  </Box>
                </DialogContent>
              </Dialog>
            </Box>
          )}

          {/* Configuraciones Tab */}
          {activeTab === 6 && (
            <Box sx={{ mb: 4 }}>
              <Box sx={{ display: "flex", justifyContent: "flex-end", mb: 2 }}>
                <Button
                  variant="outlined"
                  onClick={toggleAllSettings}
                  startIcon={<ExpandMore />}
                  sx={{ borderRadius: "12px" }}
                >
                  {allSettingsExpanded ? "Contraer Todo" : "Expandir Todo"}
                </Button>
              </Box>

              {Object.entries(settingsByTag).map(([tag, settings]) => (
                <ConfigGlassCard key={tag} sx={{ mb: 2 }}>
                  <Accordion
                    sx={{ background: "transparent", boxShadow: "none" }}
                    expanded={expandedSettings[tag] || false}
                    onChange={() =>
                      setExpandedSettings((prev) => ({
                        ...prev,
                        [tag]: !prev[tag],
                      }))
                    }
                  >
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Box
                        sx={{ display: "flex", alignItems: "center", gap: 2 }}
                      >
                        <Avatar
                          sx={{
                            bgcolor: theme.palette.primary.main,
                            width: 32,
                            height: 32,
                          }}
                        >
                          <Settings sx={{ fontSize: 16 }} />
                        </Avatar>
                        <Typography variant="h6">{tag}</Typography>
                        <Chip
                          label={`${settings.length} configs`}
                          size="small"
                          color="primary"
                          variant="outlined"
                        />
                      </Box>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Grid container spacing={2}>
                        {settings.map((setting) => (
                          <Grid item xs={12} md={6} key={setting.key}>
                            <TextField
                              label={setting.key}
                              defaultValue={setting.value}
                              onBlur={(e) =>
                                handleSaveSetting(setting.key, e.target.value)
                              }
                              fullWidth
                              variant="outlined"
                              size="small"
                              helperText={setting.description}
                              InputProps={{ sx: { borderRadius: "12px" } }}
                            />
                          </Grid>
                        ))}
                      </Grid>
                    </AccordionDetails>
                  </Accordion>
                </ConfigGlassCard>
              ))}
            </Box>
          )}

          {activeTab === 7 && ( // Ajustar índice según posición
              <MarketplaceManagement />
          )}
        </motion.div>
      </Box>

      {/* Notificaciones */}
      <AnimatePresence>
        {error && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setError(null)}
            anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="error"
                onClose={() => setError(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: "12px" }}
              >
                {error}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
        {success && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setSuccess(null)}
            anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="success"
                onClose={() => setSuccess(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: "12px" }}
              >
                {success}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
      </AnimatePresence>
    </Box>
  );
}

// Función auxiliar para descripciones de características
const getFeatureDescription = (key: string) => {
  const descriptions: Record<string, string> = {
    enable_registration:
      "Permite a nuevos usuarios registrarse en la plataforma. Si se desactiva, solo los administradores podrán crear cuentas.",
    enable_social_login:
      "Permite el inicio de sesión con proveedores sociales como Google, Facebook, etc. Requiere configuración previa de las APIs.",
    disable_anonymous_users:
      "Impide el acceso a usuarios no registrados. Todos los visitantes deberán iniciar sesión para usar la plataforma.",
    disable_credits:
      "Deshabilita el sistema de créditos en la plataforma. Los usuarios no podrán comprar ni gastar créditos.",
    enable_payment_methods:
      "Habilita diferentes métodos de pago como tarjetas, PayPal, etc. Requiere configuración previa de cada proveedor.",
    enable_points:
      "Activa el sistema de puntos por actividades. Los usuarios ganarán puntos por completar acciones en la plataforma.",
    enable_badges:
      "Permite la obtención de insignias al alcanzar ciertos logros. Configura los requisitos en la pestaña de Gamificación.",
    enable_coupons:
      "Permite la creación y uso de cupones de descuento. Los usuarios podrán canjear cupones para obtener descuentos en compras.",
  };
  return descriptions[key] || "Funcionalidad del sistema";
};

// Renderización de la tabla de orígenes
const renderOriginsTable = () => {
  return (
    <Table>
      <TableHead>
        <TableRow>
          <TableCell>Origen</TableCell>
          <TableCell>Acciones</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {(origins || []).map((origin) => (
          <TableRow key={origin}>
            <TableCell>{origin}</TableCell>
            <TableCell>
              {corsEnabled ? (
                <IconButton
                  onClick={() => handleDeleteOrigin(origin)}
                  color="error"
                >
                  <Delete />
                </IconButton>
              ) : (
                <Typography color="textSecondary">Desactivado</Typography>
              )}
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

// Asegurar que las variables y funciones estén definidas
const corsEnabled = true; // Valor por defecto para evitar errores

const handleDeleteOrigin = (origin: string) => {
  console.error(
    `handleDeleteOrigin no implementado. Intentando eliminar: ${origin}`
  );
};

const origins: string[] = []; // Inicializar como un array vacío para evitar errores


Tambien debemos aportar mas información util al usuario:

en la pestaña de historial de compras del dashboar de usuario aparece esta información:

Historial de Compras

    Orden #1

    Total: 500 - Estado: completed - Fecha: 4/29/2025, 7:59:40 PM

Añade mas verbose al historial de compras

// src/app/user/dashboard/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/lib/auth/context";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Link,
} from "@mui/material";
import { motion, AnimatePresence } from "framer-motion";
import {
  Box,
  Grid,
  Card,
  CardContent,
  CardHeader,
  TextField,
  Button,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  IconButton,
  Snackbar,
  Alert,
  MenuItem,
  Avatar,
  Chip,
  Divider,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Badge,
  Paper,
  Tabs,
  Tab,
  useTheme,
  styled,
} from "@mui/material";
import { ShoppingCart } from "@mui/icons-material";
import {
  AccountCircle,
  Lock,
  Payment,
  CreditCard,
  AddCircle,
  Delete,
  ExpandMore,
  Edit,
  History,
  AttachMoney,
  Security,
  Logout,
  Person,
  LocationOn,
  Language,
  Star,
  StarBorder,
  LocalActivity,
} from "@mui/icons-material";
import { Integration, Order } from "@/lib/types";

// Styled Components
const GradientCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%)`,
  color: "white",
  borderRadius: "16px",
  boxShadow: theme.shadows[4],
}));

const GlassCard = styled(Card)(({ theme }) => ({
  background: "rgba(248, 249, 250, 0.8)",
  backdropFilter: "blur(10px)",
  border: "1px solid rgba(222, 226, 230, 0.5)",
  borderRadius: "16px",
  boxShadow: theme.shadows[2],
}));

interface PaymentMethod {
  id: number;
  payment_type: string;
  details: string;
  is_default: boolean;
}

interface CreditTransaction {
  id: number;
  amount: number;
  transaction_type: string;
  payment_amount?: number;
  payment_method?: string;
  payment_status: string;
  timestamp: string;
}

interface PaymentProvider {
  id: number;
  name: string;
  active: boolean;
}

export default function UserDashboard() {
  const { user, logout, updateProfile } = useAuth();
  const router = useRouter();
  const theme = useTheme();
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({
    email: "",
    username: "",
    ciudad: "",
    website: "",
  });
  const [transactions, setTransactions] = useState<CreditTransaction[]>([]);
  const [methods, setMethods] = useState<PaymentMethod[]>([]);
  const [newMethod, setNewMethod] = useState({
    payment_type: "",
    details: "",
    is_default: false,
  });
  const [paymentProviders, setPaymentProviders] = useState<PaymentProvider[]>(
    []
  );
  const [credits, setCredits] = useState("");
  const [paymentAmount, setPaymentAmount] = useState("");
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [tabValue, setTabValue] = useState(0);
  const [editMethod, setEditMethod] = useState<PaymentMethod | null>(null);
  const [deleteMethodId, setDeleteMethodId] = useState<number | null>(null);
  const { coupons, setCoupons } = useAuth();
  const [newIntegration, setNewIntegration] = useState({
    name: "",
    webhook_url: "",
    event_type: "",
  });
  const [integrations, setIntegrations] = useState<Integration[]>([]);

  const [orders, setOrders] = useState<Order[]>([]);

  useEffect(() => {
    const fetchOrders = async () => {
      const { data } = await fetchAPI<Order[]>("/v1/marketplace/orders");
      setOrders(data || []);
    };
    fetchOrders();
  }, []);

  // Añadir este useEffect justo después de los useState existentes
  useEffect(() => {
    const fetchCoupons = async () => {
      try {
        const { data } = await fetchAPI<any[]>("/v1/coupons/me"); // Ajusta el endpoint según tu API
        setCoupons(data || []);
      } catch (err) {
        setError(
          err instanceof Error ? err.message : "Error al cargar cupones"
        );
      }
    };
    fetchCoupons();
  }, [setCoupons]);

  // Actualizar la función handleRedeem
  const handleRedeem = async (couponId: number) => {
    try {
      const { data } = await fetchAPI<any>(`/v1/coupons/redeem/${couponId}`, {
        method: "POST",
      });
      if (data) {
        setCoupons(coupons.map((c) => (c.id === couponId ? data : c)));
        const { data: info } = await fetchAPI<any>("/whoami");
        setCredits(info.credits);
        setSuccess("Cupón canjeado exitosamente");
      } else {
        setError("No se pudo canjear el cupón");
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al canjear cupón");
    }
  };

  // Actualizar el contenido de la pestaña "Coupons" (tabValue === 2)

  useEffect(() => {
    if (!user) {
      router.push("/");
      return;
    }
    setFormData({
      email: user.email || "",
      username: user.username || "",
      ciudad: user.ciudad || "",
      website: user.website || "",
    });

    const fetchData = async () => {
      try {
        const [transRes, methRes, providersRes, integrationsRes] =
          await Promise.all([
            fetchAPI<CreditTransaction[]>("/v1/payments/transactions"),
            fetchAPI<PaymentMethod[]>("/v1/payments/methods"),
            fetchAPI<PaymentProvider[]>("/v1/payment-providers"),
            fetchAPI<Integration[]>("/v1/integrations/"),
          ]);
        setTransactions(transRes.data || []);
        setMethods(methRes.data || []);
        setPaymentProviders(providersRes.data?.filter((p) => p.active) || []);
        setIntegrations(integrationsRes.data || []);
        if (providersRes.data && providersRes.data.length > 0) {
          setNewMethod((prev) => ({
            ...prev,
            payment_type: providersRes.data.find((p) => p.active)?.name || "",
          }));
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : "Error al cargar datos");
      }
    };
    fetchData();
  }, [user, router, credits]);

  const handleAddIntegration = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<Integration>("/v1/integrations/", {
        method: "POST",
        data: {
          name: newIntegration.name,
          webhook_url: newIntegration.webhook_url,
          event_type: newIntegration.event_type,
        },
      });
      setIntegrations([...integrations, data!]);
      setNewIntegration({ name: "", webhook_url: "", event_type: "" });
      setSuccess("Integración creada con éxito");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al crear integración"
      );
    }
  };

  const handleDeleteIntegration = async (id: number) => {
    try {
      await fetchAPI(`/v1/integrations/${id}`, { method: "DELETE" });
      setIntegrations(integrations.filter((i) => i.id !== id));
      setSuccess("Integración eliminada");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al eliminar integración"
      );
    }
  };

  const handleEditMethod = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editMethod) return;
    try {
      const { data } = await fetchAPI<PaymentMethod>(
        `/v1/payments/methods/${editMethod.id}`,
        {
          method: "PUT",
          data: editMethod,
        }
      );
      setMethods(methods.map((m) => (m.id === data!.id ? data! : m)));
      setEditMethod(null);
      setSuccess("Método actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al actualizar método"
      );
    }
  };

  const handleDeleteMethod = async (id: number) => {
    try {
      await fetchAPI(`/v1/payments/methods/${id}`, { method: "DELETE" });
      setMethods(methods.filter((m) => m.id !== id));
      setDeleteMethodId(null);
      setSuccess("Método eliminado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al eliminar método");
    }
  };

  const handleUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await updateProfile(formData);
      setSuccess("Perfil actualizado");
      setEditMode(false);
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al actualizar perfil"
      );
    }
  };

  const handleChangePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<{ message: string }>(
        "/v1/auth/me/password",
        {
          method: "PUT",
          data: {
            current_password: currentPassword,
            new_password: newPassword,
          },
        }
      );
      setSuccess(data?.message || "Contraseña actualizada");
      setCurrentPassword("");
      setNewPassword("");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al cambiar contraseña"
      );
    }
  };

  const handlePurchase = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<CreditTransaction>(
        "/v1/payments/purchase",
        {
          method: "POST",
          data: {
            credits: parseInt(credits),
            payment_amount: parseFloat(paymentAmount),
            payment_method: "stripe",
          },
        }
      );
      setTransactions([data!, ...transactions]);
      setCredits("");
      setPaymentAmount("");
      setSuccess("Créditos comprados");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Error al comprar créditos"
      );
    }
  };

  const handleAddMethod = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const { data } = await fetchAPI<PaymentMethod>("/v1/payments/methods", {
        method: "POST",
        data: newMethod,
      });
      setMethods([...methods, data!]);
      setNewMethod({
        payment_type: paymentProviders[0]?.name || "",
        details: "",
        is_default: false,
      });
      setSuccess("Método añadido");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error al añadir método");
    }
  };

  const handleSetDefault = async (id: number) => {
    try {
      await fetchAPI(`/v1/payments/methods/${id}/default`, { method: "PUT" });
      setMethods(methods.map((m) => ({ ...m, is_default: m.id === id })));
      setSuccess("Método predeterminado actualizado");
      setTimeout(() => setSuccess(null), 3000);
    } catch (err) {
      setError(
        err instanceof Error
          ? err.message
          : "Error al establecer predeterminado"
      );
    }
  };

  const handleDeleteAccount = async () => {
    if (
      confirm(
        "¿Estás seguro de eliminar tu cuenta? Esta acción es irreversible."
      )
    ) {
      try {
        await fetchAPI("/v1/users/me", { method: "DELETE" });
        await logout();
        router.push("/user/auth/#login");
      } catch (err) {
        setError(
          err instanceof Error ? err.message : "Error al eliminar cuenta"
        );
      }
    }
  };

  if (!user)
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "100vh",
          background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
        }}
      >
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <Typography variant="h6" color="textSecondary">
            Cargando tu perfil...
          </Typography>
        </motion.div>
      </Box>
    );

  return (
    <Box
      sx={{
        p: { xs: 2, md: 4 },
        minHeight: "100vh",
        background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)",
      }}
    >
      <Box sx={{ maxWidth: "1400px", mx: "auto" }}>
        {/* Header Section */}
        <Box
          sx={{
            display: "flex",
            flexDirection: { xs: "column", md: "row" },
            justifyContent: "space-between",
            alignItems: "center",
            mb: 4,
            gap: 2,
          }}
        >
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Typography
              variant="h3"
              sx={{
                fontWeight: "bold",
                background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%, ${theme.palette.secondary.main} 90%)`,
                WebkitBackgroundClip: "text",
                WebkitTextFillColor: "transparent",
                display: "inline-block",
              }}
            >
              Hola, {user.username}!
            </Typography>
            <Typography variant="subtitle1" color="textSecondary">
              Bienvenido a tu panel de control
            </Typography>
          </motion.div>

          <Badge
            overlap="circular"
            anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
            badgeContent={
              <IconButton
                onClick={() => setEditMode(true)}
                size="small"
                sx={{ bgcolor: "primary.main", color: "white" }}
              >
                <Edit fontSize="small" />
              </IconButton>
            }
          >
            <Avatar
              sx={{
                width: 80,
                height: 80,
                bgcolor: theme.palette.primary.main,
                fontSize: "2rem",
                boxShadow: theme.shadows[6],
              }}
            >
              {user.username.charAt(0).toUpperCase()}
            </Avatar>
          </Badge>
        </Box>

        {/* Stats Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Grid container spacing={3} sx={{ mb: 4 }}>
            {/* Credits Card */}
            <Grid item xs={12} md={4}>
              <GradientCard>
                <CardContent>
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    }}
                  >
                    <Box>
                      <Typography
                        variant="overline"
                        color="inherit"
                        sx={{ opacity: 0.8 }}
                      >
                        Tus Créditos
                      </Typography>
                      <Typography variant="h3" sx={{ fontWeight: "bold" }}>
                        {user.credits ?? 0}
                      </Typography>
                    </Box>
                    <AttachMoney sx={{ fontSize: 48, opacity: 0.8 }} />
                  </Box>
                </CardContent>
              </GradientCard>
            </Grid>

            {/* Transactions Card */}
            <Grid item xs={12} md={4}>
              <GradientCard
                sx={{
                  background:
                    "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
                }}
              >
                <CardContent>
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    }}
                  >
                    <Box>
                      <Typography
                        variant="overline"
                        color="inherit"
                        sx={{ opacity: 0.8 }}
                      >
                        Transacciones
                      </Typography>
                      <Typography variant="h3" sx={{ fontWeight: "bold" }}>
                        {transactions.length}
                      </Typography>
                    </Box>
                    <History sx={{ fontSize: 48, opacity: 0.8 }} />
                  </Box>
                </CardContent>
              </GradientCard>
            </Grid>

            {/* Payment Methods Card */}
            <Grid item xs={12} md={4}>
              <GradientCard
                sx={{
                  background:
                    "linear-gradient(135deg, #a6c1ee 0%, #fbc2eb 100%)",
                }}
              >
                <CardContent>
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    }}
                  >
                    <Box>
                      <Typography
                        variant="overline"
                        color="inherit"
                        sx={{ opacity: 0.8 }}
                      >
                        Métodos de Pago
                      </Typography>
                      <Typography variant="h3" sx={{ fontWeight: "bold" }}>
                        {methods.length}
                      </Typography>
                    </Box>
                    <Payment sx={{ fontSize: 48, opacity: 0.8 }} />
                  </Box>
                </CardContent>
              </GradientCard>
            </Grid>
          </Grid>
        </motion.div>

        {/* Tabs Navigation */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Paper sx={{ mb: 3, borderRadius: "12px", overflow: "hidden" }}>
            <Tabs
              value={tabValue}
              onChange={(_, newValue) => setTabValue(newValue)}
              variant="scrollable"
              scrollButtons="auto"
              indicatorColor="primary"
              textColor="primary"
            >
              <Tab label="Perfil" icon={<Person />} iconPosition="start" />

              <Tab label="Seguridad" icon={<Security />} iconPosition="start" />
              <Tab
                label="Cupones"
                icon={<LocalActivity />}
                iconPosition="start"
              />
              <Tab
                label="Transacciones"
                icon={<History />}
                iconPosition="start"
              />
              <Tab
                label="Métodos de Pago"
                icon={<Payment />}
                iconPosition="start"
              />
              <Tab
                label="Comprar Créditos"
                icon={<CreditCard />}
                iconPosition="start"
              />

              <Tab label="Integraciones" icon={<Link />} iconPosition="start" />

              <Tab
                label="Compras"
                icon={<ShoppingCart />}
                iconPosition="start"
              />
              
            </Tabs>
          </Paper>
        </motion.div>

        {/* Tab Content */}
        <Box sx={{ mb: 4 }}>
          {/* Profile Tab */}
          {tabValue === 0 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Información Personal"
                      avatar={<AccountCircle color="primary" />}
                      action={
                        <IconButton onClick={() => setEditMode(!editMode)}>
                          <Edit color="primary" />
                        </IconButton>
                      }
                    />
                    <CardContent>
                      <AnimatePresence mode="wait">
                        {editMode ? (
                          <Box
                            component={motion.form}
                            key="edit"
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            onSubmit={handleUpdate}
                            sx={{
                              display: "flex",
                              flexDirection: "column",
                              gap: 2,
                            }}
                          >
                            <TextField
                              label="Email"
                              type="email"
                              value={formData.email}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  email: e.target.value,
                                })
                              }
                              fullWidth
                              variant="outlined"
                              size="small"
                            />
                            <TextField
                              label="Username"
                              type="text"
                              value={formData.username}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  username: e.target.value,
                                })
                              }
                              fullWidth
                              variant="outlined"
                              size="small"
                            />
                            <TextField
                              label="Ciudad"
                              type="text"
                              value={formData.ciudad}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  ciudad: e.target.value,
                                })
                              }
                              fullWidth
                              variant="outlined"
                              size="small"
                              InputProps={{
                                startAdornment: (
                                  <LocationOn color="action" sx={{ mr: 1 }} />
                                ),
                              }}
                            />
                            <TextField
                              label="Website"
                              type="text"
                              value={formData.website}
                              onChange={(e) =>
                                setFormData({
                                  ...formData,
                                  website: e.target.value,
                                })
                              }
                              fullWidth
                              variant="outlined"
                              size="small"
                              InputProps={{
                                startAdornment: (
                                  <Language color="action" sx={{ mr: 1 }} />
                                ),
                              }}
                            />
                            <Box sx={{ display: "flex", gap: 2, mt: 2 }}>
                              <Button
                                type="submit"
                                variant="contained"
                                color="primary"
                                sx={{ flex: 1 }}
                              >
                                Guardar Cambios
                              </Button>
                              <Button
                                onClick={() => setEditMode(false)}
                                variant="outlined"
                                sx={{ flex: 1 }}
                              >
                                Cancelar
                              </Button>
                            </Box>
                          </Box>
                        ) : (
                          <Box
                            component={motion.div}
                            key="view"
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                          >
                            <List>
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar
                                    sx={{
                                      bgcolor: theme.palette.primary.light,
                                    }}
                                  >
                                    <Person />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Username"
                                  secondary={user.username || "No especificado"}
                                  secondaryTypographyProps={{
                                    color: "textPrimary",
                                  }}
                                />
                              </ListItem>
                              <Divider variant="inset" component="li" />
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar
                                    sx={{ bgcolor: theme.palette.info.light }}
                                  >
                                    <AccountCircle />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Email"
                                  secondary={user.email || "No especificado"}
                                  secondaryTypographyProps={{
                                    color: "textPrimary",
                                  }}
                                />
                              </ListItem>
                              <Divider variant="inset" component="li" />
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar
                                    sx={{
                                      bgcolor: theme.palette.success.light,
                                    }}
                                  >
                                    <LocationOn />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Ciudad"
                                  secondary={user.ciudad || "No especificado"}
                                  secondaryTypographyProps={{
                                    color: "textPrimary",
                                  }}
                                />
                              </ListItem>
                              <Divider variant="inset" component="li" />
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar
                                    sx={{
                                      bgcolor: theme.palette.warning.light,
                                    }}
                                  >
                                    <Language />
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary="Website"
                                  secondary={user.website || "No especificado"}
                                  secondaryTypographyProps={{
                                    color: "textPrimary",
                                  }}
                                />
                              </ListItem>
                            </List>
                          </Box>
                        )}
                      </AnimatePresence>
                    </CardContent>
                  </GlassCard>
                </Grid>

                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Actividad Reciente"
                      avatar={<History color="primary" />}
                    />
                    <CardContent>
                      {transactions.slice(0, 3).length > 0 ? (
                        <List>
                          {transactions.slice(0, 3).map((t) => (
                            <motion.div
                              key={t.id}
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              transition={{ duration: 0.3 }}
                            >
                              <ListItem>
                                <ListItemAvatar>
                                  <Avatar
                                    sx={{
                                      bgcolor:
                                        t.amount > 0
                                          ? theme.palette.success.light
                                          : theme.palette.error.light,
                                    }}
                                  >
                                    {t.amount > 0 ? "+" : "-"}
                                  </Avatar>
                                </ListItemAvatar>
                                <ListItemText
                                  primary={`${t.transaction_type}`}
                                  secondary={`${new Date(
                                    t.timestamp
                                  ).toLocaleString()} • ${t.payment_status}`}
                                />
                                <Typography
                                  variant="body2"
                                  color={
                                    t.amount > 0 ? "success.main" : "error.main"
                                  }
                                >
                                  {t.amount > 0 ? "+" : ""}
                                  {t.amount} créditos
                                </Typography>
                              </ListItem>
                              <Divider variant="inset" component="li" />
                            </motion.div>
                          ))}
                        </List>
                      ) : (
                        <Typography
                          variant="body2"
                          color="textSecondary"
                          sx={{ textAlign: "center", py: 2 }}
                        >
                          No hay actividad reciente
                        </Typography>
                      )}
                      <Button
                        fullWidth
                        variant="outlined"
                        sx={{ mt: 2 }}
                        onClick={() => setTabValue(2)}
                      >
                        Ver todas las transacciones
                      </Button>
                    </CardContent>
                  </GlassCard>
                </Grid>
              </Grid>

              {/* Danger Zone moved to Profile Tab */}
              <GlassCard sx={{ mt: 3 }}>
                <CardHeader
                  title="Zona Peligrosa"
                  avatar={<Security color="error" />}
                />
                <CardContent>
                  <Typography
                    variant="body2"
                    color="textSecondary"
                    sx={{ mb: 2 }}
                  >
                    Estas acciones son irreversibles. Por favor, procede con
                    precaución.
                  </Typography>
                  <Box sx={{ display: "flex", gap: 2 }}>
                    <Button
                      onClick={logout}
                      variant="outlined"
                      color="secondary"
                      startIcon={<Logout />}
                      sx={{ flex: 1 }}
                    >
                      Cerrar Sesión
                    </Button>
                    <Button
                      onClick={handleDeleteAccount}
                      variant="contained"
                      color="error"
                      startIcon={<Delete />}
                      sx={{ flex: 1 }}
                    >
                      Eliminar Cuenta
                    </Button>
                  </Box>
                </CardContent>
              </GlassCard>
            </motion.div>
          )}
          {/* Security Tab */}
          {tabValue === 1 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Cambiar Contraseña"
                      avatar={<Lock color="primary" />}
                    />
                    <CardContent>
                      <Box
                        component="form"
                        onSubmit={handleChangePassword}
                        sx={{
                          display: "flex",
                          flexDirection: "column",
                          gap: 2,
                        }}
                      >
                        <TextField
                          label="Contraseña Actual"
                          type="password"
                          value={currentPassword}
                          onChange={(e) => setCurrentPassword(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{
                            startAdornment: (
                              <Lock color="action" sx={{ mr: 1 }} />
                            ),
                          }}
                        />
                        <TextField
                          label="Nueva Contraseña"
                          type="password"
                          value={newPassword}
                          onChange={(e) => setNewPassword(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{
                            startAdornment: (
                              <Security color="action" sx={{ mr: 1 }} />
                            ),
                          }}
                        />
                        <Button
                          type="submit"
                          variant="contained"
                          color="primary"
                          sx={{ mt: 1 }}
                        >
                          Actualizar Contraseña
                        </Button>
                      </Box>
                    </CardContent>
                  </GlassCard>
                </Grid>

                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Métodos de Pago"
                      subheader={`${methods.length} configurados`}
                      avatar={<Payment color="primary" />}
                    />
                    <CardContent>
                      {methods.length > 0 ? (
                        <List>
                          {methods.slice(0, 2).map((m) => (
                            <ListItem key={m.id}>
                              <ListItemAvatar>
                                <Avatar
                                  sx={{
                                    bgcolor: m.is_default
                                      ? theme.palette.success.light
                                      : theme.palette.grey[300],
                                  }}
                                >
                                  {m.is_default ? <Star /> : <StarBorder />}
                                </Avatar>
                              </ListItemAvatar>
                              <ListItemText
                                primary={m.payment_type}
                                secondary={m.details}
                              />
                            </ListItem>
                          ))}
                        </List>
                      ) : (
                        <Typography
                          variant="body2"
                          color="textSecondary"
                          sx={{ textAlign: "center", py: 2 }}
                        >
                          No hay métodos de pago configurados
                        </Typography>
                      )}
                      <Button
                        fullWidth
                        variant="outlined"
                        sx={{ mt: 2 }}
                        onClick={() => setTabValue(3)}
                      >
                        {methods.length > 0
                          ? "Gestionar métodos"
                          : "Añadir método"}
                      </Button>
                    </CardContent>
                  </GlassCard>
                </Grid>
              </Grid>
            </motion.div>
          )}
          {/* Coupons Tab */}
          {tabValue === 2 && (
            <Box>
              <Typography variant="h6">Mis Cupones</Typography>
              {!coupons || coupons.length === 0 ? (
                <Typography>No tienes cupones</Typography>
              ) : (
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Nombre</TableCell>
                      <TableCell>Créditos</TableCell>
                      <TableCell>Estado</TableCell>
                      <TableCell>Acciones</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {coupons.map((coupon) => (
                      <TableRow key={coupon.id}>
                        <TableCell>{coupon.name}</TableCell>
                        <TableCell>{coupon.credits}</TableCell>
                        <TableCell>
                          <Chip
                            label={coupon.status}
                            color={
                              coupon.status === "active" ? "success" : "error"
                            }
                          />
                        </TableCell>
                        <TableCell>
                          {coupon.status === "active" && (
                            <Button
                              variant="contained"
                              onClick={() => handleRedeem(coupon.id)}
                            >
                              Canjear
                            </Button>
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </Box>
          )}
          {/* Transactions Tab */}
          {tabValue === 3 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <GlassCard>
                <CardHeader
                  title="Historial de Transacciones"
                  avatar={<History color="primary" />}
                  action={
                    <Chip
                      label={`${transactions.length} transacciones`}
                      color="primary"
                      variant="outlined"
                    />
                  }
                />
                <CardContent>
                  {transactions.length === 0 ? (
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      sx={{ textAlign: "center", py: 4 }}
                    >
                      No hay transacciones registradas
                    </Typography>
                  ) : (
                    <List sx={{ maxHeight: "500px", overflow: "auto" }}>
                      {transactions.map((t, index) => (
                        <motion.div
                          key={t.id || index} // Usar `index` como respaldo si `t.id` no está definido
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          transition={{ duration: 0.2 }}
                        >
                          <ListItem>
                            <ListItemAvatar>
                              <Avatar
                                sx={{
                                  bgcolor:
                                    t.amount > 0
                                      ? theme.palette.success.light
                                      : theme.palette.error.light,
                                }}
                              >
                                {t.amount > 0 ? "+" : "-"}
                              </Avatar>
                            </ListItemAvatar>
                            <ListItemText
                              primary={t.transaction_type || "N/A"}
                              secondary={`${
                                t.timestamp
                                  ? new Date(t.timestamp).toLocaleString()
                                  : "N/A"
                              } • ${t.payment_status || "N/A"}`}
                            />
                          </ListItem>
                          <Divider variant="inset" component="li" />
                        </motion.div>
                      ))}
                    </List>
                  )}
                </CardContent>
              </GlassCard>
            </motion.div>
          )}
          {/* Payment Methods Tab */}
          {tabValue === 4 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <GlassCard>
                <CardHeader
                  title="Métodos de Pago"
                  avatar={<Payment color="primary" />}
                  subheader="Gestiona tus métodos de pago asociados"
                />
                <CardContent>
                  {methods.length > 0 && (
                    <List sx={{ mb: 3 }}>
                      {methods.map((m) => (
                        <Paper
                          key={m.id}
                          elevation={2}
                          sx={{
                            mb: 2,
                            borderRadius: "8px",
                            overflow: "hidden",
                          }}
                        >
                          <ListItem>
                            <ListItemAvatar>
                              <Avatar
                                sx={{
                                  bgcolor: m.is_default
                                    ? theme.palette.success.main
                                    : theme.palette.grey[300],
                                }}
                              >
                                {m.is_default ? <Star /> : <CreditCard />}
                              </Avatar>
                            </ListItemAvatar>
                            <ListItemText
                              primary={
                                <Box
                                  sx={{ display: "flex", alignItems: "center" }}
                                >
                                  <Typography sx={{ mr: 1 }}>
                                    {m.payment_type}
                                  </Typography>
                                  {m.is_default && (
                                    <Chip
                                      label="Predeterminado"
                                      size="small"
                                      color="success"
                                      variant="outlined"
                                    />
                                  )}
                                </Box>
                              }
                              secondary={m.details}
                            />
                            <Box sx={{ display: "flex", gap: 1 }}>
                              <IconButton
                                onClick={() => setEditMethod(m)}
                                color="primary"
                              >
                                <Edit />
                              </IconButton>
                              <IconButton
                                onClick={() => setDeleteMethodId(m.id)}
                                color="error"
                              >
                                <Delete />
                              </IconButton>
                              {!m.is_default && (
                                <Button
                                  onClick={() => handleSetDefault(m.id)}
                                  variant="outlined"
                                  size="small"
                                >
                                  Hacer Predeterminado
                                </Button>
                              )}
                            </Box>
                          </ListItem>
                        </Paper>
                      ))}
                    </List>
                  )}

                  {/* Formulario para añadir método */}
                  <Accordion
                    sx={{
                      background: "rgba(255, 255, 255, 0.05)",
                      boxShadow: "none",
                      border: "1px solid rgba(255, 255, 255, 0.2)",
                    }}
                  >
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Typography>Añadir nuevo método de pago</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Box
                        component="form"
                        onSubmit={handleAddMethod}
                        sx={{
                          display: "flex",
                          flexDirection: "column",
                          gap: 2,
                        }}
                      >
                        <TextField
                          label="Tipo"
                          select
                          value={newMethod.payment_type}
                          onChange={(e) =>
                            setNewMethod({
                              ...newMethod,
                              payment_type: e.target.value,
                            })
                          }
                          fullWidth
                          variant="outlined"
                          size="small"
                        >
                          {paymentProviders.map((provider) => (
                            <MenuItem key={provider.id} value={provider.name}>
                              {provider.name}
                            </MenuItem>
                          ))}
                        </TextField>
                        <TextField
                          label="Detalles"
                          value={newMethod.details}
                          onChange={(e) =>
                            setNewMethod({
                              ...newMethod,
                              details: e.target.value,
                            })
                          }
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          multiline
                          rows={3}
                        />
                        <Button
                          type="submit"
                          variant="contained"
                          color="primary"
                          startIcon={<AddCircle />}
                          sx={{ mt: 1 }}
                        >
                          Añadir Método
                        </Button>
                      </Box>
                    </AccordionDetails>
                  </Accordion>
                </CardContent>
              </GlassCard>

              {/* Diálogo para editar método */}
              <Dialog open={!!editMethod} onClose={() => setEditMethod(null)}>
                <DialogTitle>Editar Método de Pago</DialogTitle>
                <DialogContent>
                  <Box
                    component="form"
                    onSubmit={handleEditMethod}
                    sx={{
                      display: "flex",
                      flexDirection: "column",
                      gap: 2,
                      mt: 2,
                    }}
                  >
                    <TextField
                      label="Tipo"
                      select
                      value={editMethod?.payment_type || ""}
                      onChange={(e) =>
                        setEditMethod({
                          ...editMethod!,
                          payment_type: e.target.value,
                        })
                      }
                      fullWidth
                      variant="outlined"
                      size="small"
                    >
                      {paymentProviders.map((provider) => (
                        <MenuItem key={provider.id} value={provider.name}>
                          {provider.name}
                        </MenuItem>
                      ))}
                    </TextField>
                    <TextField
                      label="Detalles"
                      value={editMethod?.details || ""}
                      onChange={(e) =>
                        setEditMethod({
                          ...editMethod!,
                          details: e.target.value,
                        })
                      }
                      fullWidth
                      required
                      variant="outlined"
                      size="small"
                      multiline
                      rows={3}
                    />
                    <DialogActions>
                      <Button
                        onClick={() => setEditMethod(null)}
                        variant="outlined"
                      >
                        Cancelar
                      </Button>
                      <Button type="submit" variant="contained" color="primary">
                        Guardar
                      </Button>
                    </DialogActions>
                  </Box>
                </DialogContent>
              </Dialog>

              {/* Diálogo para confirmar eliminación */}
              <Dialog
                open={!!deleteMethodId}
                onClose={() => setDeleteMethodId(null)}
              >
                <DialogTitle>¿Eliminar Método de Pago?</DialogTitle>
                <DialogContent>
                  <Typography>
                    Esta acción es irreversible. ¿Estás seguro de eliminar este
                    método?
                  </Typography>
                </DialogContent>
                <DialogActions>
                  <Button
                    onClick={() => setDeleteMethodId(null)}
                    variant="outlined"
                  >
                    Cancelar
                  </Button>
                  <Button
                    onClick={() => handleDeleteMethod(deleteMethodId!)}
                    variant="contained"
                    color="error"
                  >
                    Eliminar
                  </Button>
                </DialogActions>
              </Dialog>
            </motion.div>
          )}
          {/* Buy Credits Tab */}
          {tabValue === 5 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Comprar Créditos"
                      avatar={<AttachMoney color="primary" />}
                      subheader="Recarga tu saldo de créditos"
                    />
                    <CardContent>
                      <Box
                        component="form"
                        onSubmit={handlePurchase}
                        sx={{
                          display: "flex",
                          flexDirection: "column",
                          gap: 2,
                        }}
                      >
                        <TextField
                          label="Cantidad de Créditos"
                          type="number"
                          value={credits}
                          onChange={(e) => setCredits(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{
                            startAdornment: (
                              <AttachMoney color="action" sx={{ mr: 1 }} />
                            ),
                          }}
                        />
                        <TextField
                          label="Monto a Pagar (USD)"
                          type="number"
                          inputProps={{ step: "0.01" }}
                          value={paymentAmount}
                          onChange={(e) => setPaymentAmount(e.target.value)}
                          fullWidth
                          required
                          variant="outlined"
                          size="small"
                          InputProps={{
                            startAdornment: (
                              <Typography sx={{ mr: 1 }}>$</Typography>
                            ),
                          }}
                        />
                        <TextField
                          label="Método de Pago"
                          select
                          value={
                            methods.find((m) => m.is_default)?.id ||
                            methods[0]?.id ||
                            ""
                          }
                          onChange={(e) => {
                            const selectedMethod = methods.find(
                              (m) => m.id === parseInt(e.target.value)
                            );
                            if (selectedMethod) {
                              handleSetDefault(selectedMethod.id);
                            }
                          }}
                          fullWidth
                          variant="outlined"
                          size="small"
                          disabled={methods.length === 0}
                          helperText={
                            methods.length === 0
                              ? "No hay métodos de pago disponibles"
                              : "Selecciona un método de pago"
                          }
                        >
                          {methods.map((method) => (
                            <MenuItem key={method.id} value={method.id}>
                              {method.payment_type} - {method.details}{" "}
                              {method.is_default ? "(Predeterminado)" : ""}
                            </MenuItem>
                          ))}
                        </TextField>
                        <Button
                          type="submit"
                          variant="contained"
                          color="primary"
                          size="large"
                          sx={{ mt: 2 }}
                          disabled={methods.length === 0}
                        >
                          Comprar Créditos
                        </Button>
                      </Box>
                    </CardContent>
                  </GlassCard>
                </Grid>

                <Grid item xs={12} md={6}>
                  <GlassCard>
                    <CardHeader
                      title="Tarifas y Beneficios"
                      avatar={<CreditCard color="primary" />}
                    />
                    <CardContent>
                      <List>
                        <ListItem>
                          <ListItemAvatar>
                            <Avatar
                              sx={{ bgcolor: theme.palette.success.light }}
                            >
                              <Star />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText
                            primary="1 crédito = $1 USD"
                            secondary="Tasa de cambio fija"
                          />
                        </ListItem>
                        <Divider variant="inset" component="li" />
                        <ListItem>
                          <ListItemAvatar>
                            <Avatar sx={{ bgcolor: theme.palette.info.light }}>
                              <Payment />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText
                            primary="Múltiples métodos de pago"
                            secondary="Tarjetas, PayPal y más"
                          />
                        </ListItem>
                        <Divider variant="inset" component="li" />
                        <ListItem>
                          <ListItemAvatar>
                            <Avatar
                              sx={{ bgcolor: theme.palette.warning.light }}
                            >
                              <Security />
                            </Avatar>
                          </ListItemAvatar>
                          <ListItemText
                            primary="Transacciones seguras"
                            secondary="Encriptación SSL"
                          />
                        </ListItem>
                      </List>
                    </CardContent>
                  </GlassCard>
                </Grid>
              </Grid>
            </motion.div>
          )}
          {tabValue === 6 && (
            <Box>
              <Box
                component="form"
                onSubmit={handleAddIntegration}
                sx={{ mb: 2 }}
              >
                <TextField
                  label="Nombre"
                  value={newIntegration.name}
                  onChange={(e) =>
                    setNewIntegration({
                      ...newIntegration,
                      name: e.target.value,
                    })
                  }
                />
                <TextField
                  label="Webhook URL"
                  value={newIntegration.webhook_url}
                  onChange={(e) =>
                    setNewIntegration({
                      ...newIntegration,
                      webhook_url: e.target.value,
                    })
                  }
                />
                <TextField
                  label="Tipo de Evento"
                  value={newIntegration.event_type}
                  onChange={(e) =>
                    setNewIntegration({
                      ...newIntegration,
                      event_type: e.target.value,
                    })
                  }
                />
                <Button type="submit" variant="contained">
                  Añadir
                </Button>
              </Box>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Nombre</TableCell>
                    <TableCell>Estado</TableCell>
                    <TableCell>Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {integrations.map((integration) => (
                    <TableRow key={integration.id}>
                      <TableCell>{integration.name}</TableCell>
                      <TableCell>
                        {integration.active ? "Activo (Admin)" : "Pendiente"}
                      </TableCell>
                      <TableCell>
                        <IconButton
                          onClick={() =>
                            handleDeleteIntegration(integration.id)
                          }
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          )}

          {/* Orders Tab */}
          {tabValue === 7 && (
            <Box>
              <Typography variant="h6">Historial de Compras</Typography>
              <List>
                {orders.map((order) => (
                  <ListItem key={order.id}>
                    <ListItemText
                      primary={`Orden #${order.id}`}
                      secondary={`Total: ${order.total_amount} - Estado: ${
                        order.status
                      } - Fecha: ${new Date(
                        order.created_at
                      ).toLocaleString()}`}
                    />
                    {order.items.some((item) => item.is_digital) && (
                      <Button
                        href={
                          order.items.find((item) => item.is_digital)?.file_path
                        }
                        download
                        disabled={
                          !order.items.find((item) => item.is_digital)
                            ?.file_path
                        }
                      >
                        Descargar
                      </Button>
                    )}
                  </ListItem>
                ))}
              </List>
            </Box>
          )}
        </Box>
      </Box>

      {/* Notifications */}
      <AnimatePresence>
        {error && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setError(null)}
            anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="error"
                onClose={() => setError(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: "12px" }}
              >
                {error}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
        {success && (
          <Snackbar
            open
            autoHideDuration={3000}
            onClose={() => setSuccess(null)}
            anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          >
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
            >
              <Alert
                severity="success"
                onClose={() => setSuccess(null)}
                sx={{ boxShadow: theme.shadows[6], borderRadius: "12px" }}
              >
                {success}
              </Alert>
            </motion.div>
          </Snackbar>
        )}
      </AnimatePresence>
    </Box>
  );
}


Por ultimo, cuando finalizo la compra, si pincho de nuevo en el carrito,
no se borra del carrito, sino que sigue apareciendo los productos por los
que ya pague por ellos.

Te adjunto archivos que te pueden ser de utilidad para solucionar los bugs

// frontend/src/lib/types.ts
// Tipos TypeScript para entidades y respuestas de la app

// src/lib/types.ts
export interface User {
  id: number;
  email: string;
  username: string;
  rol: string;
  activo: boolean;
  subscription: string;
  ciudad?: string;
  website?: string;
  credits: number;
  create_at: string; // ISO string (e.g., "2023-10-01T12:00:00Z")
  last_ip?: string;
  last_login: string;
  user_type: string;
}

export interface TokenResponse {
  access_token: string;
  refresh_token: string;
  token_type: string;
}

export interface RegisterRequest {
  email: string;
  username: string;
  password: string;
  ciudad?: string;
  website?: string;
}

export interface UpdateProfileRequest {
  email?: string;
  username?: string;
  ciudad?: string;
  website?: string;
}

export interface PurchaseRequest {
  credits: number;
  payment_amount: number;
  payment_method?: string;
}

export interface PurchaseResponse {
  transaction_id: string;
  credits_added: number;
  new_balance: number;
}

export interface PaymentMethod {
  id: number;
  payment_type: string;
  details: string;
  is_default: boolean;
  created_at: string; // ISO string
  updated_at: string; // ISO string
}

export interface HTTPValidationError {
  detail: ValidationError[];
}

export interface ValidationError {
  loc: (string | number)[];
  msg: string;
  type: string;
}

export interface CreditTransaction {
  id: number;
  amount: number;
  transaction_type: string;
  payment_amount?: number;
  payment_method?: string;
  payment_status: string;
  timestamp: string; // ISO string
}

export interface Integration {
  user_id: number;
  id: number;
  name: string;
  webhook_url: string;
  event_type: string;
  active: boolean;
  created_at: string;
  last_triggered: string | null;
}

export interface SiteSetting {
  id: number;
  key: string;
  value: string;
  description?: string;
  tag?: string;
  updated_by?: number;
  updated_at: string; // ISO string
}

export interface FetchResponse<T> {
  data: T | null;
  error: string | HTTPValidationError | null;
  total_pages?: number;
}

// src/lib/types.ts
export interface UserInfo {
  user_id: string | null;
  email: string | null;
  username: string | null;
  user_type: string;
  subscription: string | null;
  credits: number;
  rol: string | null;
  session_id?: string;
  gamification: UserGamificationResponse[]; // Actualizado para reflejar /whoami
}

export interface EventType {
  id: number;
  name: string;
  description?: string;
  points_per_event: number;
}

export interface Badge {
  id: number;
  name: string;
  description?: string;
  event_type_id: number;
  required_points: number;
  user_type: string; // "anonymous", "registered", "both"
}

export interface Gamification {
  points: number;
  badges: Badge[];
}

export interface GamificationEventCreate {
  event_type_id: number;
}

export interface GamificationEventResponse {
  id: number;
  event_type_id: number;
  user_id?: number;
  session_id?: string;
  timestamp: string; // ISO string
}

export interface UserGamificationResponse {
  points: number;
  badge_id?: number;
  event_type_id: number;
  user_id?: number;
  session_id?: string;
  event_type: EventType;
  badge?: Badge;
}
export interface RankingResponse {
  username: string;
  points: number;
  badges_count: number;
  user_type: string;
}

export interface PaymentProvider {
  id: number;
  name: string;
  active: boolean;
}

export interface InfoResponse {
  credits: number;
  gamification: { points: number; badge: Badge | null }[];
}

export interface BadgeWithEventType extends Badge {
  event_type: EventType;
}

// src/lib/types.ts

// Nuevo tipo para cupones
export interface Coupon {
  id: number;
  name: string;
  description?: string;
  unique_identifier: string;
  issued_at: string; // ISO string
  expires_at?: string; // ISO string, opcional
  redeemed_at?: string; // ISO string, opcional
  active: boolean;
  status: "active" | "redeemed" | "expired" | "disabled";
  credits: number;
  user_id?: number; // Opcional, para usuarios registrados
  session_id?: string; // Opcional, para usuarios anónimos
  redeemed_by_user_id?: number; // Quién lo canjeó, si aplica
  redeemed_by_session_id?: string; // Quién lo canjeó (anónimo), si aplica
}

export interface CouponType {
  id: number;
  name: string;
  description?: string;
  credits: number;
  active: boolean;
}

export interface CouponActivity {
  id: number;
  coupon_type: string;
  unique_identifier: string;
  user_id?: number;
  session_id?: string;
  status: string;
  issued_at: string;
  redeemed_at?: string;
}

export interface AllowedOrigin {
  id: number;
  origin: string;
}
// frontend/src/lib/types.ts (actualización)
export interface Category {
  id: number;
  name: string;
  description?: string;
}

export interface Product {
  id: number;
  name: string;
  description?: string;
  price: number;
  category_id: number;
  is_digital: boolean;
  is_free: boolean;
  file_path?: string;
  subscription_duration?: number;
}

export interface CartItem {
  id: number;
  product_id: number;
  quantity: number;
  product: Product;
}

export interface OrderItem {
  id: number;
  product_id: number;
  quantity: number;
  price: number;
  product_name: string;
  is_digital: boolean;
  file_path?: string;
}

export interface Order {
  id: number;
  total_amount: number;
  status: string;
  created_at: string;
  items: OrderItem[];
}


// frontend/src/lib/auth/context.tsx
// Contexto de autenticación y estado global del usuario

"use client";

import { createContext, useContext, useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import fetchAPI from "@/lib/api";
import { User, TokenResponse, RegisterRequest, UserInfo, Gamification, Badge, Coupon } from "../types";
import { motion } from "framer-motion";
import { GamificationEventCreate, GamificationEventResponse, UserGamificationResponse } from "../types";

interface AuthContextType {
  user: User | null;
  credits: number;
  gamification: Gamification | null; // Añadimos gamificación al contexto
  coupons: Coupon[];
  setCredits: (credits: number) => void; // Añadido
  setCoupons: (coupons: Coupon[]) => void;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  setGamification: (gamification: Gamification) => void; // Añadido
  register: (data: RegisterRequest) => Promise<void>;
  loginWithGoogle: () => void;
  refreshToken: () => Promise<string | null>;
  updateProfile: (data: Partial<User>) => Promise<void>;
  deleteProfile: () => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
}



const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [credits, setCredits] = useState<number>(10); // Valor por defecto para anónimos
  const [gamification, setGamification] = useState<Gamification | null>(null); // Estado para gamificación
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const [coupons, setCoupons] = useState<Coupon[]>([]);


  useEffect(() => {
    const checkAuth = async () => {
      try {
        const { data } = await fetchAPI<any>("/whoami"); // Endpoint para obtener info del usuario
        if (data) {
          if (data.user_type === "registered") {
            setUser({
              id: parseInt(data.user_id!),
              email: data.email!,
              username: data.username!,
              rol: data.rol!,
              activo: true,
              subscription: data.subscription!,
              credits: data.credits,
              create_at: "",
              last_ip: "",
              last_login: "",
              user_type: data.user_type,
            });
            setCredits(data.credits);
          } else if (data.user_type === "anonymous") {
            setUser(null);
            setCredits(data.credits);
            localStorage.setItem("session_id", data.session_id!);
          } else {
            setUser(null);
            setCredits(0);
          }

          // Obtener datos de gamificación
          const gamificationRes = await fetchAPI<any[]>("/v1/gamification/me");
          if (gamificationRes.data) {
            const totalPoints = gamificationRes.data.reduce((sum, g) => sum + g.points, 0);
            const badges = gamificationRes.data.map(g => g.badge).filter(Boolean) as Badge[];
            setGamification({ points: totalPoints, badges });
          } else {
            setGamification({ points: 0, badges: [] });
          }

          // Obtener cupones del usuario
          const couponsRes = await fetchAPI<Coupon[]>("/v1/coupons/me");
          setCoupons(couponsRes.data || []);
        }
      } catch (err) {
        console.error("Error en checkAuth:", err);
        setUser(null);
        setCredits(0);
        setGamification({ points: 0, badges: [] });
        setCoupons([]);
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    const { data, error } = await fetchAPI<TokenResponse>(
      "/v1/auth/token",
      {
        method: "POST",
        data: { username: email, password, grant_type: "password" },
      },
      "application/x-www-form-urlencoded"
    );
    if (error) throw new Error(typeof error === "string" ? error : "Error al iniciar sesión");
    localStorage.setItem("accessToken", data!.access_token);
    localStorage.setItem("refreshToken", data!.refresh_token);
    localStorage.removeItem("session_id");  // Limpiar session_id al iniciar sesión
    const userResponse = await fetchAPI<User>("/v1/users/me");
    if (userResponse.data) {
      setUser(userResponse.data);
      setCredits(userResponse.data.credits);
      router.push("/user/dashboard");
    }
  };

  const logout = async () => {
    try {
      await fetchAPI("/v1/auth/logout", { method: "POST" });
    } catch (err) {
      console.error("Error al cerrar sesión:", err);
    }
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("session_id");  // Limpiar session_id al cerrar sesión
    setUser(null);
    // const anonCredits = localStorage.getItem("anonCredits");
    // setCredits(anonCredits ? parseInt(anonCredits) : 100);
    router.push("/");
  };

  const register = async (data: RegisterRequest) => {
    const { error } = await fetchAPI("/v1/auth/register", {
      method: "POST",
      data,
    });
    if (error) throw new Error(typeof error === "string" ? error : "Error al registrarse");
    await login(data.email, data.password);
  };

  const loginWithGoogle = () => {
    window.location.href = `${process.env.NEXT_PUBLIC_API_URL}/v1/auth/login/google`;
  };

  const refreshToken = async (): Promise<string | null> => {
    const refresh = localStorage.getItem("refreshToken");
    if (!refresh) {
      await logout();
      return null;
    }

    try {
      const { data, error } = await fetchAPI<TokenResponse>("/v1/auth/refresh", {
        method: "POST",
        data: { refresh_token: refresh },
        ...(true && { _retry: true }) // Evitar bucle infinito
      });

      if (error || !data) {
        throw new Error(typeof error === "string" ? error : JSON.stringify(error) || "Refresh failed");
      }

      // Actualizar localStorage ANTES de cualquier otra operación
      localStorage.setItem("accessToken", data.access_token);
      localStorage.setItem("refreshToken", data.refresh_token);

      // Actualizar estado del usuario
      const userResponse = await fetchAPI<User>("/v1/users/me");
      if (userResponse.data) {
        setUser(userResponse.data);
        setCredits(userResponse.data.credits);
      }

      return data.access_token;
    } catch (err) {
      console.error("Refresh error:", err);
      await logout();
      return null;
    }
  };

  const updateProfile = async (data: Partial<User>) => {
    try {
      const response = await fetchAPI<User>("/v1/users/me", {
        method: "PUT",
        data,
      });
      if (response.error) throw new Error(typeof response.error === "string" ? response.error : JSON.stringify(response.error));
      if (response.data) {
        setUser(response.data);
        setCredits(response.data.credits);
      } else {
        throw new Error("No se recibió la información del usuario actualizado");
      }
    } catch (err) {
      console.error("Error al actualizar el perfil:", err);
      throw err;
    }
  };

  const deleteProfile = async () => {
    const { error } = await fetchAPI("/v1/users/me", { method: "DELETE" });
    if (error) throw new Error(typeof error === "string" ? error : "Error al eliminar perfil");
    logout();
  };

  const resetPassword = async (email: string) => {
    const { error } = await fetchAPI("/v1/auth/password-reset", {
      method: "POST",
      data: { email },
    });
    if (error) throw new Error(typeof error === "string" ? error : "Error al restablecer contraseña");
  };

  if (loading) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="fixed inset-0 flex items-center justify-center bg-[var(--background)] z-50"
      >
        <div className="text-[var(--foreground)] text-xl font-semibold">
          Cargando Neptuno...
        </div>
      </motion.div>
    );
  }

  return (
    <AuthContext.Provider
      value={{ user, credits, gamification, coupons, setCoupons, setGamification, setCredits, login, logout, register, loginWithGoogle, refreshToken, updateProfile, deleteProfile, resetPassword }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error("useAuth must be used within AuthProvider");
  return context;
};

// frontend/src/components/marketplace/Marketplace.tsx
import { useEffect, useState } from "react";
import fetchAPI from "@/lib/api";
import { Category, Product } from "@/lib/types";
import { Box, Typography, Grid, Card, CardContent, Button, FormControl, InputLabel, Select, MenuItem } from "@mui/material";
import { useAuth } from "@/lib/auth/context";
import { motion } from "framer-motion";

export default function Marketplace() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<number | "all">("all");
  const { user } = useAuth();

  useEffect(() => {
    const fetchData = async () => {
      const { data: catData } = await fetchAPI<Category[]>("/v1/marketplace/categories");
      setCategories(catData || []);
      const { data: prodData } = await fetchAPI<Product[]>("/v1/marketplace/products");
      setProducts(prodData || []);
    };
    fetchData();
  }, []);

  const handleAddToCart = async (productId: number) => {
    try {
      await fetchAPI("/v1/marketplace/cart", { method: "POST", data: { product_id: productId, quantity: 1 } });
      alert("Producto añadido al carrito");
    } catch (error) {
      alert("Error al añadir al carrito");
    }
  };

  const filteredProducts = selectedCategory === "all"
    ? products
    : products.filter(product => product.category_id === selectedCategory);

  return (
    <Box sx={{ p: 4, minHeight: "100vh", background: "linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)" }}>
      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }}>
        <Typography variant="h4" sx={{ mb: 3, fontWeight: "bold" }}>Marketplace</Typography>
        <FormControl fullWidth sx={{ mb: 3, maxWidth: 300 }}>
          <InputLabel>Categoría</InputLabel>
          <Select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value as number | "all")}
          >
            <MenuItem value="all">Todas</MenuItem>
            {categories.map((cat) => (
              <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>
            ))}
          </Select>
        </FormControl>
        <Grid container spacing={3}>
          {filteredProducts.map((product) => (
            <Grid item xs={12} sm={6} md={4} key={product.id}>
              <Card sx={{ borderRadius: "12px", boxShadow: 3 }}>
                <CardContent>
                  <Typography variant="h6">{product.name}</Typography>
                  <Typography color="textSecondary">{product.description}</Typography>
                  <Typography sx={{ mt: 1 }}>Precio: {product.price} créditos</Typography>
                  <Button
                    variant="contained"
                    onClick={() => handleAddToCart(product.id)}
                    disabled={!product.is_free && !user}
                    sx={{ mt: 2 }}
                  >
                    {product.is_free ? "Obtener Gratis" : "Añadir al Carrito"}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </motion.div>
    </Box>
  );
}

# backend/api/v1/config/integrations.py
from sqlalchemy.orm import Session
from fastapi import HTTPException
from models.marketplace import Category, Product
from schemas.marketplace import CategoryCreate, CategoryResponse, ProductCreate, ProductResponse
from typing import List

def create_category(db: Session, category: CategoryCreate) -> Category:
    db_category = Category(**category.dict())
    db.add(db_category)
    db.commit()
    db.refresh(db_category)
    return db_category

def get_categories(db: Session) -> List[Category]:
    return db.query(Category).all()

def update_category(db: Session, category_id: int, category: CategoryCreate) -> Category:
    db_category = db.query(Category).filter(Category.id == category_id).first()
    if not db_category:
        raise HTTPException(status_code=404, detail="Categoría no encontrada")
    for key, value in category.dict().items():
        setattr(db_category, key, value)
    db.commit()
    db.refresh(db_category)
    return db_category

def delete_category(db: Session, category_id: int):
    db_category = db.query(Category).filter(Category.id == category_id).first()
    if not db_category:
        raise HTTPException(status_code=404, detail="Categoría no encontrada")
    db.delete(db_category)
    db.commit()

def create_product(db: Session, product: ProductCreate) -> Product:
    db_product = Product(**product.dict())
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return db_product

def get_products(db: Session) -> List[Product]:
    return db.query(Product).all()

def update_product(db: Session, product_id: int, product: ProductCreate) -> Product:
    db_product = db.query(Product).filter(Product.id == product_id).first()
    if not db_product:
        raise HTTPException(status_code=404, detail="Producto no encontrado")
    for key, value in product.dict().items():
        setattr(db_product, key, value)
    db.commit()
    db.refresh(db_product)
    return db_product

def delete_product(db: Session, product_id: int):
    db_product = db.query(Product).filter(Product.id == product_id).first()
    if not db_product:
        raise HTTPException(status_code=404, detail="Producto no encontrado")
    db.delete(db_product)
    db.commit()


    # backend/schemas/marketplace.py
from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime

class CategoryBase(BaseModel):
    name: str
    description: Optional[str] = None

class CategoryCreate(CategoryBase):
    pass

class CategoryResponse(CategoryBase):
    id: int
    class Config:
        orm_mode = True

class ProductBase(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    category_id: int
    is_digital: bool = False
    file_path: Optional[str] = None
    subscription_duration: Optional[int] = None
    is_free: bool = False  # Añadido

class ProductCreate(ProductBase):
    pass

class ProductResponse(ProductBase):
    id: int
    class Config:
        orm_mode = True

class CartItemBase(BaseModel):
    product_id: int
    quantity: int

class CartItemCreate(CartItemBase):
    pass

class CartItemResponse(CartItemBase):
    id: int
    product: ProductResponse
    class Config:
        orm_mode = True

class OrderItemBase(BaseModel):
    product_id: int
    quantity: int

class OrderItemResponse(BaseModel):
    id: int
    product_id: int
    quantity: int
    price: float
    product_name: str
    is_digital: bool
    file_path: Optional[str] = None
    class Config:
        orm_mode = True

class OrderCreate(BaseModel):
    items: List[OrderItemBase]

class OrderResponse(BaseModel):
    id: int
    total_amount: float
    status: str
    created_at: datetime
    items: List[OrderItemResponse]
    class Config:
        orm_mode = True

# backend/models/marketplace.py
from sqlalchemy import Column, Integer, String, Float, Boolean, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from core.database import Base
from datetime import datetime
from sqlalchemy import Column, DateTime, Integer, String, Float, Boolean, ForeignKey
from sqlalchemy.orm import relationship

class Category(Base):
    __tablename__ = "categories"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, nullable=False)
    description = Column(String, nullable=True)
    products = relationship("Product", back_populates="category")

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(String, nullable=True)
    price = Column(Float, nullable=False)
    category_id = Column(Integer, ForeignKey("categories.id"))
    is_digital = Column(Boolean, default=False)
    file_path = Column(String, nullable=True)
    subscription_duration = Column(Integer, nullable=True)
    is_free = Column(Boolean, default=False)  # Nuevo campo para productos gratuitos
    category = relationship("Category", back_populates="products")
    cart_items = relationship("CartItem", back_populates="product")
    order_items = relationship("OrderItem", back_populates="product")



class CartItem(Base):
    __tablename__ = "cart_items"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("usuarios.id"), nullable=True)  # Cambiado de "users.id" a "usuarios.id"
    session_id = Column(String, ForeignKey("sesiones_anonimas.id"), nullable=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer, nullable=False)
    product = relationship("Product", back_populates="cart_items")

class Order(Base):
    __tablename__ = "orders"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("usuarios.id"), nullable=True)  # Cambiado de "users.id" a "usuarios.id"
    session_id = Column(String, ForeignKey("sesiones_anonimas.id"), nullable=True)
    total_amount = Column(Float, nullable=False)
    status = Column(String, default="pending")
    created_at = Column(DateTime, default=datetime.utcnow)
    items = relationship("OrderItem", back_populates="order", lazy="selectin")

class OrderItem(Base):
    __tablename__ = "order_items"
    id = Column(Integer, primary_key=True, index=True)
    order_id = Column(Integer, ForeignKey("orders.id"))
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer, nullable=False)
    price = Column(Float, nullable=False)  # Precio en el momento de la compra
    product_name = Column(String, nullable=False)
    is_digital = Column(Boolean, default=False)
    file_path = Column(String, nullable=True)
    order = relationship("Order", back_populates="items")
    product = relationship("Product", back_populates="order_items")

En cuanto al desarrollo tecnico a la hora de generar el codifo fuente de los cambios solicitados, debes seguir estas indicaciones:

los criterios a seguir son: usabilidad, legibilidad, jerarquia de contenidos, facilidad, orden, sentido comun, visualización

- reutiliza elementos visuales y componentes visuales / UI a la hora de programar, manteniendo la robusted y solidez del codigo fuente actual que ya has estudiado.

- haz tu codigo fuente modular y escalable

- no rompas el desarrollo actual

- recuerda organizar de forma modular y escalable las carpetas y ficheros de la app que crees nuevos

- NO ROMPAS el proyecto actual,estamos ampliando no cambiando.

Si necesitas más ayuda o necesitas código adicional que ver, no dudes en decírmelo. A ver como te desenvuelves con mi software.

Se que es muchiiiisima información, por favor leela toda con detenimiento. Si es mucho separa tu respuesta en partes. Solicitame los archivos que necesites ver. 


Respeta la logica actual para no romper ningun servicio activo. 
Es importante esta parte que salga bien, tomate tu tiempo.
Pideme los archivos que necesites ver para una mejor implantación.

Para la parte del frontend, al ser en nextjs, ten en mente la reutilización y reuso de componentes reutilizables y modulares.

Recuerda generar codigo completo.

Solicita cualquier archivo que necesites.


